
AutoStick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7c4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800a9b4  0800a9b4  0001a9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa8c  0800aa8c  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa8c  0800aa8c  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa8c  0800aa8c  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800aa8c  0800aa8c  0001aa8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa94  0800aa94  0001aa94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800aa98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004494  20000220  0800acb8  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046b4  0800acb8  000246b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   000260f0  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005a24  00000000  00000000  00046339  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d38  00000000  00000000  0004bd60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ab0  00000000  00000000  0004da98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f6c3  00000000  00000000  0004f548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001de82  00000000  00000000  0006ec0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000995d1  00000000  00000000  0008ca8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012605e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000781c  00000000  00000000  001260dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000220 	.word	0x20000220
 800020c:	00000000 	.word	0x00000000
 8000210:	0800a99c 	.word	0x0800a99c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000224 	.word	0x20000224
 800022c:	0800a99c 	.word	0x0800a99c

08000230 <_ZN10LEDHandler4initEP20__UART_HandleTypeDefP7TCA9555>:


#include "LEDHandler.h"

void LEDHandler::init(UART_HandleTypeDef* _esp, TCA9555* _tca)
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
	esp = _esp;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	68ba      	ldr	r2, [r7, #8]
 8000240:	601a      	str	r2, [r3, #0]
	tca = _tca;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	605a      	str	r2, [r3, #4]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
	...

08000254 <_ZN10LEDHandler3setERK18USBMIDIEventPacket>:

void LEDHandler::set(const USBMIDIEventPacket& midi)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	6039      	str	r1, [r7, #0]
	uint8_t led_num = (midi.Data1 - OFFSET) / CHANNEL_COUNT;
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	789b      	ldrb	r3, [r3, #2]
 8000262:	4a27      	ldr	r2, [pc, #156]	; (8000300 <_ZN10LEDHandler3setERK18USBMIDIEventPacket+0xac>)
 8000264:	fb82 1203 	smull	r1, r2, r2, r3
 8000268:	1052      	asrs	r2, r2, #1
 800026a:	17db      	asrs	r3, r3, #31
 800026c:	1ad3      	subs	r3, r2, r3
 800026e:	73fb      	strb	r3, [r7, #15]
	bool onoff		= midi.Data0 == MIDI_NOTE_ON;
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	785b      	ldrb	r3, [r3, #1]
 8000274:	2b90      	cmp	r3, #144	; 0x90
 8000276:	bf0c      	ite	eq
 8000278:	2301      	moveq	r3, #1
 800027a:	2300      	movne	r3, #0
 800027c:	73bb      	strb	r3, [r7, #14]

	if(led_num < ESP_LED_COUNT)	// LED count on ESP32 is 10, so 0 ~ 9.
 800027e:	7bfb      	ldrb	r3, [r7, #15]
 8000280:	2b09      	cmp	r3, #9
 8000282:	d815      	bhi.n	80002b0 <_ZN10LEDHandler3setERK18USBMIDIEventPacket+0x5c>
	{
		uint8_t buffer[3] = {'m', led_num, (uint8_t)onoff};
 8000284:	f107 0308 	add.w	r3, r7, #8
 8000288:	2100      	movs	r1, #0
 800028a:	460a      	mov	r2, r1
 800028c:	801a      	strh	r2, [r3, #0]
 800028e:	460a      	mov	r2, r1
 8000290:	709a      	strb	r2, [r3, #2]
 8000292:	236d      	movs	r3, #109	; 0x6d
 8000294:	723b      	strb	r3, [r7, #8]
 8000296:	7bfb      	ldrb	r3, [r7, #15]
 8000298:	727b      	strb	r3, [r7, #9]
 800029a:	7bbb      	ldrb	r3, [r7, #14]
 800029c:	72bb      	strb	r3, [r7, #10]
		HAL_UART_Transmit(esp, buffer, sizeof(buffer), 10);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6818      	ldr	r0, [r3, #0]
 80002a2:	f107 0108 	add.w	r1, r7, #8
 80002a6:	230a      	movs	r3, #10
 80002a8:	2203      	movs	r2, #3
 80002aa:	f005 fcaa 	bl	8005c02 <HAL_UART_Transmit>
		{
			tca->set_output(LED_G12, HIGH);
			tca->set_output(LED_R12, LOW);
		}
	}
}
 80002ae:	e022      	b.n	80002f6 <_ZN10LEDHandler3setERK18USBMIDIEventPacket+0xa2>
		if(led_num == 10)
 80002b0:	7bfb      	ldrb	r3, [r7, #15]
 80002b2:	2b0a      	cmp	r3, #10
 80002b4:	d10e      	bne.n	80002d4 <_ZN10LEDHandler3setERK18USBMIDIEventPacket+0x80>
			tca->set_output(LED_G11, HIGH);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	2201      	movs	r2, #1
 80002bc:	210f      	movs	r1, #15
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f8aa 	bl	8000418 <_ZN7TCA955510set_outputEhi>
			tca->set_output(LED_R11, LOW);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	2200      	movs	r2, #0
 80002ca:	2110      	movs	r1, #16
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f8a3 	bl	8000418 <_ZN7TCA955510set_outputEhi>
}
 80002d2:	e010      	b.n	80002f6 <_ZN10LEDHandler3setERK18USBMIDIEventPacket+0xa2>
		else if(led_num == 11)
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
 80002d6:	2b0b      	cmp	r3, #11
 80002d8:	d10d      	bne.n	80002f6 <_ZN10LEDHandler3setERK18USBMIDIEventPacket+0xa2>
			tca->set_output(LED_G12, HIGH);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	2201      	movs	r2, #1
 80002e0:	210d      	movs	r1, #13
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 f898 	bl	8000418 <_ZN7TCA955510set_outputEhi>
			tca->set_output(LED_R12, LOW);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	2200      	movs	r2, #0
 80002ee:	210e      	movs	r1, #14
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f891 	bl	8000418 <_ZN7TCA955510set_outputEhi>
}
 80002f6:	bf00      	nop
 80002f8:	3710      	adds	r7, #16
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	2aaaaaab 	.word	0x2aaaaaab

08000304 <_ZN7TCA95554initEP19__I2C_HandleTypeDefth>:


#include "TCA9555.h"

void TCA9555::init(I2C_HandleTypeDef* _hi2c, uint16_t pin, uint8_t _id)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b08a      	sub	sp, #40	; 0x28
 8000308:	af02      	add	r7, sp, #8
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	4611      	mov	r1, r2
 8000310:	461a      	mov	r2, r3
 8000312:	460b      	mov	r3, r1
 8000314:	80fb      	strh	r3, [r7, #6]
 8000316:	4613      	mov	r3, r2
 8000318:	717b      	strb	r3, [r7, #5]
	hi2c	= _hi2c;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	68ba      	ldr	r2, [r7, #8]
 800031e:	601a      	str	r2, [r3, #0]
	id		= ID(_id);
 8000320:	797b      	ldrb	r3, [r7, #5]
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	b2da      	uxtb	r2, r3
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	711a      	strb	r2, [r3, #4]
	uint8_t config_port0[2] = {CONFIG_PORT0, (uint8_t)(pin & 0xff)}, config_port1[2] = {CONFIG_PORT1, (uint8_t)(pin >> 8)};
 800032a:	2300      	movs	r3, #0
 800032c:	83bb      	strh	r3, [r7, #28]
 800032e:	2306      	movs	r3, #6
 8000330:	773b      	strb	r3, [r7, #28]
 8000332:	88fb      	ldrh	r3, [r7, #6]
 8000334:	b2db      	uxtb	r3, r3
 8000336:	777b      	strb	r3, [r7, #29]
 8000338:	2300      	movs	r3, #0
 800033a:	833b      	strh	r3, [r7, #24]
 800033c:	2307      	movs	r3, #7
 800033e:	763b      	strb	r3, [r7, #24]
 8000340:	88fb      	ldrh	r3, [r7, #6]
 8000342:	121b      	asrs	r3, r3, #8
 8000344:	b2db      	uxtb	r3, r3
 8000346:	767b      	strb	r3, [r7, #25]

	/* config I/O input_pin */
	while(HAL_I2C_Master_Transmit(hi2c, id, config_port0, 2, 10000) != HAL_OK);
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	6818      	ldr	r0, [r3, #0]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	791b      	ldrb	r3, [r3, #4]
 8000350:	b299      	uxth	r1, r3
 8000352:	f107 021c 	add.w	r2, r7, #28
 8000356:	f242 7310 	movw	r3, #10000	; 0x2710
 800035a:	9300      	str	r3, [sp, #0]
 800035c:	2302      	movs	r3, #2
 800035e:	f002 fe8b 	bl	8003078 <HAL_I2C_Master_Transmit>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	bf14      	ite	ne
 8000368:	2301      	movne	r3, #1
 800036a:	2300      	moveq	r3, #0
 800036c:	b2db      	uxtb	r3, r3
 800036e:	2b00      	cmp	r3, #0
 8000370:	d000      	beq.n	8000374 <_ZN7TCA95554initEP19__I2C_HandleTypeDefth+0x70>
 8000372:	e7e9      	b.n	8000348 <_ZN7TCA95554initEP19__I2C_HandleTypeDefth+0x44>
	while(HAL_I2C_Master_Transmit(hi2c, id, config_port1, 2, 10000) != HAL_OK);
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6818      	ldr	r0, [r3, #0]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	791b      	ldrb	r3, [r3, #4]
 800037c:	b299      	uxth	r1, r3
 800037e:	f107 0218 	add.w	r2, r7, #24
 8000382:	f242 7310 	movw	r3, #10000	; 0x2710
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2302      	movs	r3, #2
 800038a:	f002 fe75 	bl	8003078 <HAL_I2C_Master_Transmit>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	bf14      	ite	ne
 8000394:	2301      	movne	r3, #1
 8000396:	2300      	moveq	r3, #0
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b00      	cmp	r3, #0
 800039c:	d000      	beq.n	80003a0 <_ZN7TCA95554initEP19__I2C_HandleTypeDefth+0x9c>
 800039e:	e7e9      	b.n	8000374 <_ZN7TCA95554initEP19__I2C_HandleTypeDefth+0x70>

	/* reset output input_pin */
	uint8_t output_reset[2] = {OUTPUT_PORT0, 0x00};
 80003a0:	2302      	movs	r3, #2
 80003a2:	753b      	strb	r3, [r7, #20]
 80003a4:	2300      	movs	r3, #0
 80003a6:	757b      	strb	r3, [r7, #21]
	while(HAL_I2C_Master_Transmit(hi2c, id, output_reset, 2, 10000) != HAL_OK);
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	6818      	ldr	r0, [r3, #0]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	791b      	ldrb	r3, [r3, #4]
 80003b0:	b299      	uxth	r1, r3
 80003b2:	f107 0214 	add.w	r2, r7, #20
 80003b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	2302      	movs	r3, #2
 80003be:	f002 fe5b 	bl	8003078 <HAL_I2C_Master_Transmit>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	bf14      	ite	ne
 80003c8:	2301      	movne	r3, #1
 80003ca:	2300      	moveq	r3, #0
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d000      	beq.n	80003d4 <_ZN7TCA95554initEP19__I2C_HandleTypeDefth+0xd0>
 80003d2:	e7e9      	b.n	80003a8 <_ZN7TCA95554initEP19__I2C_HandleTypeDefth+0xa4>
	output_reset[0] = OUTPUT_PORT1;
 80003d4:	2303      	movs	r3, #3
 80003d6:	753b      	strb	r3, [r7, #20]
	while(HAL_I2C_Master_Transmit(hi2c, id, output_reset, 2, 10000) != HAL_OK);
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	6818      	ldr	r0, [r3, #0]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	791b      	ldrb	r3, [r3, #4]
 80003e0:	b299      	uxth	r1, r3
 80003e2:	f107 0214 	add.w	r2, r7, #20
 80003e6:	f242 7310 	movw	r3, #10000	; 0x2710
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	2302      	movs	r3, #2
 80003ee:	f002 fe43 	bl	8003078 <HAL_I2C_Master_Transmit>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	bf14      	ite	ne
 80003f8:	2301      	movne	r3, #1
 80003fa:	2300      	moveq	r3, #0
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d000      	beq.n	8000404 <_ZN7TCA95554initEP19__I2C_HandleTypeDefth+0x100>
 8000402:	e7e9      	b.n	80003d8 <_ZN7TCA95554initEP19__I2C_HandleTypeDefth+0xd4>

	output_pin[0] = 0x0;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	2200      	movs	r2, #0
 8000408:	715a      	strb	r2, [r3, #5]
	output_pin[1] = 0x0;
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2200      	movs	r2, #0
 800040e:	719a      	strb	r2, [r3, #6]
}
 8000410:	bf00      	nop
 8000412:	3720      	adds	r7, #32
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <_ZN7TCA955510set_outputEhi>:

int TCA9555::set_output(uint8_t _pin, int state)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08a      	sub	sp, #40	; 0x28
 800041c:	af02      	add	r7, sp, #8
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	460b      	mov	r3, r1
 8000422:	607a      	str	r2, [r7, #4]
 8000424:	72fb      	strb	r3, [r7, #11]
	if(_pin > 15) return 1;
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	2b0f      	cmp	r3, #15
 800042a:	d901      	bls.n	8000430 <_ZN7TCA955510set_outputEhi+0x18>
 800042c:	2301      	movs	r3, #1
 800042e:	e05b      	b.n	80004e8 <_ZN7TCA955510set_outputEhi+0xd0>
	uint8_t port = _pin >= 8 ? OUTPUT_PORT1 : OUTPUT_PORT0;
 8000430:	7afb      	ldrb	r3, [r7, #11]
 8000432:	2b07      	cmp	r3, #7
 8000434:	d901      	bls.n	800043a <_ZN7TCA955510set_outputEhi+0x22>
 8000436:	2303      	movs	r3, #3
 8000438:	e000      	b.n	800043c <_ZN7TCA955510set_outputEhi+0x24>
 800043a:	2302      	movs	r3, #2
 800043c:	77fb      	strb	r3, [r7, #31]
	int ind = port & 0x1;
 800043e:	7ffb      	ldrb	r3, [r7, #31]
 8000440:	f003 0301 	and.w	r3, r3, #1
 8000444:	61bb      	str	r3, [r7, #24]
	if(state == HIGH)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d116      	bne.n	800047a <_ZN7TCA955510set_outputEhi+0x62>
		output_pin[ind]  |= 1 << (_pin % 8);		//set pin
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	69bb      	ldr	r3, [r7, #24]
 8000450:	4413      	add	r3, r2
 8000452:	3305      	adds	r3, #5
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	b25a      	sxtb	r2, r3
 8000458:	7afb      	ldrb	r3, [r7, #11]
 800045a:	f003 0307 	and.w	r3, r3, #7
 800045e:	2101      	movs	r1, #1
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	b25b      	sxtb	r3, r3
 8000466:	4313      	orrs	r3, r2
 8000468:	b25b      	sxtb	r3, r3
 800046a:	b2d9      	uxtb	r1, r3
 800046c:	68fa      	ldr	r2, [r7, #12]
 800046e:	69bb      	ldr	r3, [r7, #24]
 8000470:	4413      	add	r3, r2
 8000472:	3305      	adds	r3, #5
 8000474:	460a      	mov	r2, r1
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	e017      	b.n	80004aa <_ZN7TCA955510set_outputEhi+0x92>
	else
		output_pin[ind]  &= ~(1 << (_pin % 8));		//reset pin
 800047a:	68fa      	ldr	r2, [r7, #12]
 800047c:	69bb      	ldr	r3, [r7, #24]
 800047e:	4413      	add	r3, r2
 8000480:	3305      	adds	r3, #5
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b25a      	sxtb	r2, r3
 8000486:	7afb      	ldrb	r3, [r7, #11]
 8000488:	f003 0307 	and.w	r3, r3, #7
 800048c:	2101      	movs	r1, #1
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	b25b      	sxtb	r3, r3
 8000494:	43db      	mvns	r3, r3
 8000496:	b25b      	sxtb	r3, r3
 8000498:	4013      	ands	r3, r2
 800049a:	b25b      	sxtb	r3, r3
 800049c:	b2d9      	uxtb	r1, r3
 800049e:	68fa      	ldr	r2, [r7, #12]
 80004a0:	69bb      	ldr	r3, [r7, #24]
 80004a2:	4413      	add	r3, r2
 80004a4:	3305      	adds	r3, #5
 80004a6:	460a      	mov	r2, r1
 80004a8:	701a      	strb	r2, [r3, #0]

	uint8_t pData[2] = {port, output_pin[ind]};
 80004aa:	7ffb      	ldrb	r3, [r7, #31]
 80004ac:	753b      	strb	r3, [r7, #20]
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	69bb      	ldr	r3, [r7, #24]
 80004b2:	4413      	add	r3, r2
 80004b4:	3305      	adds	r3, #5
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	757b      	strb	r3, [r7, #21]
	while(HAL_I2C_Master_Transmit(hi2c, id, pData, 2, 10000) != HAL_OK);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6818      	ldr	r0, [r3, #0]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	b299      	uxth	r1, r3
 80004c4:	f107 0214 	add.w	r2, r7, #20
 80004c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2302      	movs	r3, #2
 80004d0:	f002 fdd2 	bl	8003078 <HAL_I2C_Master_Transmit>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	bf14      	ite	ne
 80004da:	2301      	movne	r3, #1
 80004dc:	2300      	moveq	r3, #0
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d000      	beq.n	80004e6 <_ZN7TCA955510set_outputEhi+0xce>
 80004e4:	e7e9      	b.n	80004ba <_ZN7TCA955510set_outputEhi+0xa2>

	return 0;
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3720      	adds	r7, #32
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <_ZN12atstkChannel10set_configEP12GPIO_TypeDefhP17TIM_HandleTypeDefh>:
#include "cmsis_os.h"
/* public member methods */

/* initializer */
void atstkChannel::set_config(GPIO_TypeDef* _ph_port, uint8_t _ph_pin, TIM_HandleTypeDef* _timer, uint8_t _channel)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	603b      	str	r3, [r7, #0]
 80004fc:	4613      	mov	r3, r2
 80004fe:	71fb      	strb	r3, [r7, #7]
	channel_state	= IDLE;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
	is_set			= false;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2200      	movs	r2, #0
 800050a:	749a      	strb	r2, [r3, #18]
	fault 			= false;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	2200      	movs	r2, #0
 8000510:	74da      	strb	r2, [r3, #19]
	cur_vel			= 0;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	2200      	movs	r2, #0
 8000516:	829a      	strh	r2, [r3, #20]
	before 			= 0;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
	now				= 0;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]

	ph_port			= _ph_port;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	60da      	str	r2, [r3, #12]
	ph_pin			= _ph_pin;
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	b29a      	uxth	r2, r3
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	821a      	strh	r2, [r3, #16]
	timer			= _timer;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	683a      	ldr	r2, [r7, #0]
 8000536:	605a      	str	r2, [r3, #4]
	channel			= _channel;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	7e3a      	ldrb	r2, [r7, #24]
 800053c:	721a      	strb	r2, [r3, #8]

	HAL_TIM_PWM_Start(timer, channel);
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	685a      	ldr	r2, [r3, #4]
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	7a1b      	ldrb	r3, [r3, #8]
 8000546:	4619      	mov	r1, r3
 8000548:	4610      	mov	r0, r2
 800054a:	f004 fcef 	bl	8004f2c <HAL_TIM_PWM_Start>
}
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <_ZN12atstkChannel3setEh>:

/* set velocity and state */
void atstkChannel::set(uint8_t vel)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b084      	sub	sp, #16
 800055a:	af02      	add	r7, sp, #8
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	460b      	mov	r3, r1
 8000560:	70fb      	strb	r3, [r7, #3]
	cur_vel 		= map(vel, 0, 127, 0, PWM_MAX);
 8000562:	78f8      	ldrb	r0, [r7, #3]
 8000564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2300      	movs	r3, #0
 800056c:	227f      	movs	r2, #127	; 0x7f
 800056e:	2100      	movs	r1, #0
 8000570:	f001 fb8c 	bl	8001c8c <_Z3maplllll>
 8000574:	4603      	mov	r3, r0
 8000576:	b29a      	uxth	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	829a      	strh	r2, [r3, #20]
	is_set			= true;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2201      	movs	r2, #1
 8000580:	749a      	strb	r2, [r3, #18]
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <_ZN12atstkChannel4initEv>:

/* set stick upward */
void atstkChannel::init()
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b082      	sub	sp, #8
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
	setMotor(UP);
 8000592:	2102      	movs	r1, #2
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 f824 	bl	80005e2 <_ZN12atstkChannel8setMotorEh>
	channel_state = UP;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2202      	movs	r2, #2
 800059e:	601a      	str	r2, [r3, #0]
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <_ZN12atstkChannel4loopEv>:

/* motor loop */
void atstkChannel::loop()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	switch(channel_state)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d008      	beq.n	80005ca <_ZN12atstkChannel4loopEv+0x22>
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d00a      	beq.n	80005d2 <_ZN12atstkChannel4loopEv+0x2a>
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d000      	beq.n	80005c2 <_ZN12atstkChannel4loopEv+0x1a>
		break;
	case UP:
		up();
		break;
	}
}
 80005c0:	e00b      	b.n	80005da <_ZN12atstkChannel4loopEv+0x32>
		idle();
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f000 f851 	bl	800066a <_ZN12atstkChannel4idleEv>
		break;
 80005c8:	e007      	b.n	80005da <_ZN12atstkChannel4loopEv+0x32>
		down();
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f000 f864 	bl	8000698 <_ZN12atstkChannel4downEv>
		break;
 80005d0:	e003      	b.n	80005da <_ZN12atstkChannel4loopEv+0x32>
		up();
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 f882 	bl	80006dc <_ZN12atstkChannel2upEv>
		break;
 80005d8:	bf00      	nop
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <_ZN12atstkChannel8setMotorEh>:

/* private member methods */

/* set motor direction and power */
void atstkChannel::setMotor(uint8_t state)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	460b      	mov	r3, r1
 80005ec:	70fb      	strb	r3, [r7, #3]

	uint16_t velocity 		= (state == UP   ? cur_vel      : 0);	// 0       when IDLE
 80005ee:	78fb      	ldrb	r3, [r7, #3]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d102      	bne.n	80005fa <_ZN12atstkChannel8setMotorEh+0x18>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	8a9b      	ldrh	r3, [r3, #20]
 80005f8:	e000      	b.n	80005fc <_ZN12atstkChannel8setMotorEh+0x1a>
 80005fa:	2300      	movs	r3, #0
 80005fc:	81bb      	strh	r3, [r7, #12]
																	// cur_vel when UP
																	// 0	   when DOWN(PWM_MAX - PWM_MAX)
	GPIO_PinState pin_state = (state == DOWN ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005fe:	78fb      	ldrb	r3, [r7, #3]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d101      	bne.n	8000608 <_ZN12atstkChannel8setMotorEh+0x26>
 8000604:	2301      	movs	r3, #1
 8000606:	e000      	b.n	800060a <_ZN12atstkChannel8setMotorEh+0x28>
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
																	// SET for DOWN, RESET for UP

	HAL_GPIO_WritePin(ph_port, ph_pin, pin_state);					// set ENABLE pin
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	68d8      	ldr	r0, [r3, #12]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	8a1b      	ldrh	r3, [r3, #16]
 8000614:	7bfa      	ldrb	r2, [r7, #15]
 8000616:	4619      	mov	r1, r3
 8000618:	f002 fbcc 	bl	8002db4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(timer, channel, velocity);			// set PWM pin
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	7a1b      	ldrb	r3, [r3, #8]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d105      	bne.n	8000630 <_ZN12atstkChannel8setMotorEh+0x4e>
 8000624:	89ba      	ldrh	r2, [r7, #12]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800062e:	e018      	b.n	8000662 <_ZN12atstkChannel8setMotorEh+0x80>
	__HAL_TIM_SET_COMPARE(timer, channel, velocity);			// set PWM pin
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	7a1b      	ldrb	r3, [r3, #8]
 8000634:	2b04      	cmp	r3, #4
 8000636:	d105      	bne.n	8000644 <_ZN12atstkChannel8setMotorEh+0x62>
 8000638:	89ba      	ldrh	r2, [r7, #12]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000642:	e00e      	b.n	8000662 <_ZN12atstkChannel8setMotorEh+0x80>
	__HAL_TIM_SET_COMPARE(timer, channel, velocity);			// set PWM pin
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7a1b      	ldrb	r3, [r3, #8]
 8000648:	2b08      	cmp	r3, #8
 800064a:	d105      	bne.n	8000658 <_ZN12atstkChannel8setMotorEh+0x76>
 800064c:	89ba      	ldrh	r2, [r7, #12]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000656:	e004      	b.n	8000662 <_ZN12atstkChannel8setMotorEh+0x80>
	__HAL_TIM_SET_COMPARE(timer, channel, velocity);			// set PWM pin
 8000658:	89ba      	ldrh	r2, [r7, #12]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <_ZN12atstkChannel4idleEv>:

/* when channel is idle && not fault && is set, set channel state to DOWN */
void atstkChannel::idle()
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
	if(!fault && is_set)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	7cdb      	ldrb	r3, [r3, #19]
 8000676:	f083 0301 	eor.w	r3, r3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2b00      	cmp	r3, #0
 800067e:	d006      	beq.n	800068e <_ZN12atstkChannel4idleEv+0x24>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	7c9b      	ldrb	r3, [r3, #18]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <_ZN12atstkChannel4idleEv+0x24>
	{
		channel_state = DOWN;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2201      	movs	r2, #1
 800068c:	601a      	str	r2, [r3, #0]
	}
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <_ZN12atstkChannel4downEv>:

/* wait for DTIME and set UP */
void atstkChannel::down()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	is_set 	= false;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2200      	movs	r2, #0
 80006a4:	749a      	strb	r2, [r3, #18]
	//now 	= HAL_GetTick();
	now		= osKernelSysTick();
 80006a6:	f007 f874 	bl	8007792 <osKernelSysTick>
 80006aa:	4602      	mov	r2, r0
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	619a      	str	r2, [r3, #24]
	if(now - before > DTIME)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	699a      	ldr	r2, [r3, #24]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	2b3c      	cmp	r3, #60	; 0x3c
 80006bc:	d90a      	bls.n	80006d4 <_ZN12atstkChannel4downEv+0x3c>
	{
		setMotor(UP);
 80006be:	2102      	movs	r1, #2
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff ff8e 	bl	80005e2 <_ZN12atstkChannel8setMotorEh>
		channel_state 	= UP;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2202      	movs	r2, #2
 80006ca:	601a      	str	r2, [r3, #0]
		before 			= now;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	699a      	ldr	r2, [r3, #24]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	61da      	str	r2, [r3, #28]
	}
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <_ZN12atstkChannel2upEv>:

/* wait for UTIME and set IDLE, or wait for MIN_UTIME and set DOWN if channel is set */
void atstkChannel::up()
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	//now = HAL_GetTick();
	now = osKernelSysTick();
 80006e4:	f007 f855 	bl	8007792 <osKernelSysTick>
 80006e8:	4602      	mov	r2, r0
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	619a      	str	r2, [r3, #24]
	if(now - before > (is_set ? MIN_UTIME : UTIME))
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	699a      	ldr	r2, [r3, #24]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	7c92      	ldrb	r2, [r2, #18]
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	d001      	beq.n	8000704 <_ZN12atstkChannel2upEv+0x28>
 8000700:	2228      	movs	r2, #40	; 0x28
 8000702:	e000      	b.n	8000706 <_ZN12atstkChannel2upEv+0x2a>
 8000704:	2264      	movs	r2, #100	; 0x64
 8000706:	429a      	cmp	r2, r3
 8000708:	d213      	bcs.n	8000732 <_ZN12atstkChannel2upEv+0x56>
	{
		channel_state = (is_set ? DOWN : IDLE);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	7c9b      	ldrb	r3, [r3, #18]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <_ZN12atstkChannel2upEv+0x3a>
 8000712:	2201      	movs	r2, #1
 8000714:	e000      	b.n	8000718 <_ZN12atstkChannel2upEv+0x3c>
 8000716:	2200      	movs	r2, #0
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	601a      	str	r2, [r3, #0]
		setMotor(channel_state);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4619      	mov	r1, r3
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff5c 	bl	80005e2 <_ZN12atstkChannel8setMotorEh>
		before = now;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	699a      	ldr	r2, [r3, #24]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	61da      	str	r2, [r3, #28]
	}
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <_ZN13atstkChannels11set_configsEP13channelConfigPP19__ADC_HandleTypeDefP19__I2C_HandleTypeDef>:


#include "atstkChannels.h"

void atstkChannels::set_configs(channelConfig* configs, ADC_HandleTypeDef** _adcs, I2C_HandleTypeDef* _hi2c)
{
 800073a:	b5b0      	push	{r4, r5, r7, lr}
 800073c:	b08a      	sub	sp, #40	; 0x28
 800073e:	af02      	add	r7, sp, #8
 8000740:	60f8      	str	r0, [r7, #12]
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	603b      	str	r3, [r7, #0]
	/* set config of individual channel */
	for(int i = 0; i < CHANNEL_COUNT; ++i)
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	2b0b      	cmp	r3, #11
 8000750:	dc21      	bgt.n	8000796 <_ZN13atstkChannels11set_configsEP13channelConfigPP19__ADC_HandleTypeDefP19__I2C_HandleTypeDef+0x5c>
	{
		channels[i].set_config(configs[i].ph_port, configs[i].ph_pin, configs[i].timer, configs[i].channel);
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	015b      	lsls	r3, r3, #5
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	18d0      	adds	r0, r2, r3
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	011b      	lsls	r3, r3, #4
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	4413      	add	r3, r2
 8000762:	6899      	ldr	r1, [r3, #8]
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	011b      	lsls	r3, r3, #4
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	4413      	add	r3, r2
 800076c:	899b      	ldrh	r3, [r3, #12]
 800076e:	b2dc      	uxtb	r4, r3
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	011b      	lsls	r3, r3, #4
 8000774:	68ba      	ldr	r2, [r7, #8]
 8000776:	4413      	add	r3, r2
 8000778:	681d      	ldr	r5, [r3, #0]
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	4413      	add	r3, r2
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	462b      	mov	r3, r5
 8000788:	4622      	mov	r2, r4
 800078a:	f7ff feb1 	bl	80004f0 <_ZN12atstkChannel10set_configEP12GPIO_TypeDefhP17TIM_HandleTypeDefh>
	for(int i = 0; i < CHANNEL_COUNT; ++i)
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3301      	adds	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
 8000794:	e7da      	b.n	800074c <_ZN13atstkChannels11set_configsEP13channelConfigPP19__ADC_HandleTypeDefP19__I2C_HandleTypeDef+0x12>
	}

	/* set adc handler */
	for(int i = 0; i < 3; ++i)
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	2b02      	cmp	r3, #2
 800079e:	dc0d      	bgt.n	80007bc <_ZN13atstkChannels11set_configsEP13channelConfigPP19__ADC_HandleTypeDefP19__I2C_HandleTypeDef+0x82>
	{
		adcs[i] = _adcs[i];
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4413      	add	r3, r2
 80007a8:	6819      	ldr	r1, [r3, #0]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	69ba      	ldr	r2, [r7, #24]
 80007ae:	3260      	adds	r2, #96	; 0x60
 80007b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < 3; ++i)
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	3301      	adds	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
 80007ba:	e7ee      	b.n	800079a <_ZN13atstkChannels11set_configsEP13channelConfigPP19__ADC_HandleTypeDefP19__I2C_HandleTypeDef+0x60>
	}

	/* set i2c handler */
	hi2c = _hi2c;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

	/* set stick UP */
	for(int i = 0; i < CHANNEL_COUNT; ++i)
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	2b0b      	cmp	r3, #11
 80007cc:	dc0a      	bgt.n	80007e4 <_ZN13atstkChannels11set_configsEP13channelConfigPP19__ADC_HandleTypeDefP19__I2C_HandleTypeDef+0xaa>
	{
		channels[i].init();
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	015b      	lsls	r3, r3, #5
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	4413      	add	r3, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fed7 	bl	800058a <_ZN12atstkChannel4initEv>
	for(int i = 0; i < CHANNEL_COUNT; ++i)
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	3301      	adds	r3, #1
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	e7f1      	b.n	80007c8 <_ZN13atstkChannels11set_configsEP13channelConfigPP19__ADC_HandleTypeDefP19__I2C_HandleTypeDef+0x8e>
	}
}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bdb0      	pop	{r4, r5, r7, pc}

080007ec <_ZN13atstkChannels4loopEv>:

void atstkChannels::loop()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < CHANNEL_COUNT; ++i)
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b0b      	cmp	r3, #11
 80007fc:	dc0a      	bgt.n	8000814 <_ZN13atstkChannels4loopEv+0x28>
	{
		channels[i].loop();
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	015b      	lsls	r3, r3, #5
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fece 	bl	80005a8 <_ZN12atstkChannel4loopEv>
	for(int i = 0; i < CHANNEL_COUNT; ++i)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3301      	adds	r3, #1
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	e7f1      	b.n	80007f8 <_ZN13atstkChannels4loopEv+0xc>
	}
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <_ZN13atstkChannels3setERK18USBMIDIEventPacket>:

void atstkChannels::set(const USBMIDIEventPacket& midi)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
	if(midi.Data0 == MIDI_NOTE_ON)
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	785b      	ldrb	r3, [r3, #1]
 800082a:	2b90      	cmp	r3, #144	; 0x90
 800082c:	d118      	bne.n	8000860 <_ZN13atstkChannels3setERK18USBMIDIEventPacket+0x44>
	{
		int channel_num = (midi.Data1 - OFFSET) % CHANNEL_COUNT;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	789b      	ldrb	r3, [r3, #2]
 8000832:	461a      	mov	r2, r3
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <_ZN13atstkChannels3setERK18USBMIDIEventPacket+0x4c>)
 8000836:	fb83 1302 	smull	r1, r3, r3, r2
 800083a:	1059      	asrs	r1, r3, #1
 800083c:	17d3      	asrs	r3, r2, #31
 800083e:	1ac9      	subs	r1, r1, r3
 8000840:	460b      	mov	r3, r1
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	440b      	add	r3, r1
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	60fb      	str	r3, [r7, #12]
		channels[channel_num].set(midi.Data2);
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	015b      	lsls	r3, r3, #5
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	441a      	add	r2, r3
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	78db      	ldrb	r3, [r3, #3]
 8000858:	4619      	mov	r1, r3
 800085a:	4610      	mov	r0, r2
 800085c:	f7ff fe7b 	bl	8000556 <_ZN12atstkChannel3setEh>
	}
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2aaaaaab 	.word	0x2aaaaaab

0800086c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4a06      	ldr	r2, [pc, #24]	; (8000894 <vApplicationGetIdleTaskMemory+0x28>)
 800087c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	4a05      	ldr	r2, [pc, #20]	; (8000898 <vApplicationGetIdleTaskMemory+0x2c>)
 8000882:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2280      	movs	r2, #128	; 0x80
 8000888:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	2000023c 	.word	0x2000023c
 8000898:	20000290 	.word	0x20000290

0800089c <_ZN12atstkChannelC1Ev>:
	/* state methods */
	void idle();
	void down();
	void up();
public:
	atstkChannel(){};
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4618      	mov	r0, r3
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <_ZN13atstkChannelsC1Ev>:
	I2C_HandleTypeDef*	hi2c;
	int 				motor_adc[CHANNEL_COUNT] = {0, 1, 2, 3, 4, 5, 10, 11, 6, 7, 8, 9};
												// |----adc1----|----adc2----|----adc3---|

public:
	atstkChannels(){};
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	240b      	movs	r4, #11
 80008bc:	461d      	mov	r5, r3
 80008be:	2c00      	cmp	r4, #0
 80008c0:	db05      	blt.n	80008ce <_ZN13atstkChannelsC1Ev+0x1e>
 80008c2:	4628      	mov	r0, r5
 80008c4:	f7ff ffea 	bl	800089c <_ZN12atstkChannelC1Ev>
 80008c8:	3520      	adds	r5, #32
 80008ca:	3c01      	subs	r4, #1
 80008cc:	e7f7      	b.n	80008be <_ZN13atstkChannelsC1Ev+0xe>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <_ZN13atstkChannelsC1Ev+0x44>)
 80008d2:	f503 74c8 	add.w	r4, r3, #400	; 0x190
 80008d6:	4615      	mov	r5, r2
 80008d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bdb0      	pop	{r4, r5, r7, pc}
 80008f2:	bf00      	nop
 80008f4:	0800a9b4 	.word	0x0800a9b4

080008f8 <HAL_UART_RxCpltCallback>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM5_Init(void);

/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart5.Instance) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <HAL_UART_RxCpltCallback+0x44>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	429a      	cmp	r2, r3
 800090a:	d113      	bne.n	8000934 <HAL_UART_RxCpltCallback+0x3c>
		USBMIDIEventPacket midi;
		midi.PacketHeader	= urx[0];
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_UART_RxCpltCallback+0x48>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	733b      	strb	r3, [r7, #12]
		midi.Data0 			= urx[1];
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_UART_RxCpltCallback+0x48>)
 8000914:	785b      	ldrb	r3, [r3, #1]
 8000916:	737b      	strb	r3, [r7, #13]
		midi.Data1			= urx[2];
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_UART_RxCpltCallback+0x48>)
 800091a:	789b      	ldrb	r3, [r3, #2]
 800091c:	73bb      	strb	r3, [r7, #14]
		midi.Data2			= urx[3];
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_UART_RxCpltCallback+0x48>)
 8000920:	78db      	ldrb	r3, [r3, #3]
 8000922:	73fb      	strb	r3, [r7, #15]
		midiOutputEventPush(midi);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	f008 f94b 	bl	8008bc0 <midiOutputEventPush>
		HAL_UART_Receive_IT(&huart5, urx, sizeof(urx));
 800092a:	2204      	movs	r2, #4
 800092c:	4904      	ldr	r1, [pc, #16]	; (8000940 <HAL_UART_RxCpltCallback+0x48>)
 800092e:	4803      	ldr	r0, [pc, #12]	; (800093c <HAL_UART_RxCpltCallback+0x44>)
 8000930:	f005 fa00 	bl	8005d34 <HAL_UART_Receive_IT>
	}
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000634 	.word	0x20000634
 8000940:	2000090c 	.word	0x2000090c

08000944 <_Z10MidiThreadPKv>:

void MidiThread(const void *p)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	midiUSBDeviceInitialize();		//MX_USB_DEVICE_INIT();
 800094c:	f008 f97c 	bl	8008c48 <midiUSBDeviceInitialize>
	midiOutputInitialize();			//Initialize midi USB queue
 8000950:	f008 f91e 	bl	8008b90 <midiOutputInitialize>
	while(1)
	{
		USBMIDIEventPacket midi;
		while(!midiIsConnected())midiUSBTask();
 8000954:	f008 f994 	bl	8008c80 <midiIsConnected>
 8000958:	4603      	mov	r3, r0
 800095a:	f083 0301 	eor.w	r3, r3, #1
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <_Z10MidiThreadPKv+0x26>
 8000964:	f008 f9d6 	bl	8008d14 <midiUSBTask>
 8000968:	e7f4      	b.n	8000954 <_Z10MidiThreadPKv+0x10>
		if(midiOutput(&(midi.PacketHeader), &(midi.Data0), &(midi.Data1), &(midi.Data2)))
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	1cdc      	adds	r4, r3, #3
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	1c9a      	adds	r2, r3, #2
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	1c59      	adds	r1, r3, #1
 800097c:	f107 000c 	add.w	r0, r7, #12
 8000980:	4623      	mov	r3, r4
 8000982:	f008 f92d 	bl	8008be0 <midiOutput>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d00b      	beq.n	80009a4 <_Z10MidiThreadPKv+0x60>
		{
			sticks.set(midi);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4619      	mov	r1, r3
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <_Z10MidiThreadPKv+0x68>)
 8000994:	f7ff ff42 	bl	800081c <_ZN13atstkChannels3setERK18USBMIDIEventPacket>
			leds.set(midi);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4619      	mov	r1, r3
 800099e:	4804      	ldr	r0, [pc, #16]	; (80009b0 <_Z10MidiThreadPKv+0x6c>)
 80009a0:	f7ff fc58 	bl	8000254 <_ZN10LEDHandler3setERK18USBMIDIEventPacket>
		}
		sticks.loop();
 80009a4:	4801      	ldr	r0, [pc, #4]	; (80009ac <_Z10MidiThreadPKv+0x68>)
 80009a6:	f7ff ff21 	bl	80007ec <_ZN13atstkChannels4loopEv>
		//osDelay(1);
	}
 80009aa:	e7d3      	b.n	8000954 <_Z10MidiThreadPKv+0x10>
 80009ac:	20000744 	.word	0x20000744
 80009b0:	20000904 	.word	0x20000904

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b5b0      	push	{r4, r5, r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  ADC_HandleTypeDef* hadcs[3] = {&hadc1, &hadc2, &hadc3};
 80009ba:	4a29      	ldr	r2, [pc, #164]	; (8000a60 <main+0xac>)
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80009c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  InitUartQueue(&UartQue);
 80009c6:	4827      	ldr	r0, [pc, #156]	; (8000a64 <main+0xb0>)
 80009c8:	f001 f94c 	bl	8001c64 <InitUartQueue>
  InitUartQueue(&CDCQue);
 80009cc:	4826      	ldr	r0, [pc, #152]	; (8000a68 <main+0xb4>)
 80009ce:	f001 f949 	bl	8001c64 <InitUartQueue>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d2:	f001 f99d 	bl	8001d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d6:	f000 f85b 	bl	8000a90 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009da:	f000 fc6b 	bl	80012b4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80009de:	f000 fc43 	bl	8001268 <_ZL11MX_DMA_Initv>
  MX_UART5_Init();
 80009e2:	f000 fbe5 	bl	80011b0 <_ZL13MX_UART5_Initv>
  MX_USART1_UART_Init();
 80009e6:	f000 fc11 	bl	800120c <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 80009ea:	f000 f8c1 	bl	8000b70 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 80009ee:	f000 f907 	bl	8000c00 <_ZL12MX_ADC2_Initv>
  MX_ADC3_Init();
 80009f2:	f000 f94d 	bl	8000c90 <_ZL12MX_ADC3_Initv>
  MX_I2C1_Init();
 80009f6:	f000 f993 	bl	8000d20 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80009fa:	f000 f9c5 	bl	8000d88 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80009fe:	f000 fa81 	bl	8000f04 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8000a02:	f000 fb3d 	bl	8001080 <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */
  tca.init(&hi2c1, PIN12|PIN13|PIN14|PIN15);
 8000a06:	2320      	movs	r3, #32
 8000a08:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000a0c:	4917      	ldr	r1, [pc, #92]	; (8000a6c <main+0xb8>)
 8000a0e:	4818      	ldr	r0, [pc, #96]	; (8000a70 <main+0xbc>)
 8000a10:	f7ff fc78 	bl	8000304 <_ZN7TCA95554initEP19__I2C_HandleTypeDefth>
  leds.init(&huart5, &tca);
 8000a14:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <main+0xbc>)
 8000a16:	4917      	ldr	r1, [pc, #92]	; (8000a74 <main+0xc0>)
 8000a18:	4817      	ldr	r0, [pc, #92]	; (8000a78 <main+0xc4>)
 8000a1a:	f7ff fc09 	bl	8000230 <_ZN10LEDHandler4initEP20__UART_HandleTypeDefP7TCA9555>
  sticks.set_configs(configs, hadcs, &hi2c1);
 8000a1e:	f107 021c 	add.w	r2, r7, #28
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <main+0xb8>)
 8000a24:	4915      	ldr	r1, [pc, #84]	; (8000a7c <main+0xc8>)
 8000a26:	4816      	ldr	r0, [pc, #88]	; (8000a80 <main+0xcc>)
 8000a28:	f7ff fe87 	bl	800073a <_ZN13atstkChannels11set_configsEP13channelConfigPP19__ADC_HandleTypeDefP19__I2C_HandleTypeDef>
  HAL_UART_Receive_IT(&huart5, urx, sizeof(urx));
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	4915      	ldr	r1, [pc, #84]	; (8000a84 <main+0xd0>)
 8000a30:	4810      	ldr	r0, [pc, #64]	; (8000a74 <main+0xc0>)
 8000a32:	f005 f97f 	bl	8005d34 <HAL_UART_Receive_IT>
  /*
  osThreadDef(MainThread, MainThread, osPriorityNormal, 0, 128);
  MainThreadTaskHandle = osThreadCreate(osThread(MainThread), NULL);		// main thread task

  */
  osThreadDef(MidiThread, MidiThread, osPriorityNormal, 0, 128);
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <main+0xd4>)
 8000a38:	463c      	mov	r4, r7
 8000a3a:	461d      	mov	r5, r3
 8000a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MidiThreadTaskHandle = osThreadCreate(osThread(MidiThread), NULL);		// pwm thread task
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f006 feb0 	bl	80077b2 <osThreadCreate>
 8000a52:	4602      	mov	r2, r0
 8000a54:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <main+0xd8>)
 8000a56:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a58:	f006 fe94 	bl	8007784 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <main+0xa8>
 8000a5e:	bf00      	nop
 8000a60:	0800a9e4 	.word	0x0800a9e4
 8000a64:	20000d1c 	.word	0x20000d1c
 8000a68:	20000910 	.word	0x20000910
 8000a6c:	20000520 	.word	0x20000520
 8000a70:	2000073c 	.word	0x2000073c
 8000a74:	20000634 	.word	0x20000634
 8000a78:	20000904 	.word	0x20000904
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	20000744 	.word	0x20000744
 8000a84:	2000090c 	.word	0x2000090c
 8000a88:	0800a9fc 	.word	0x0800a9fc
 8000a8c:	20001128 	.word	0x20001128

08000a90 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b096      	sub	sp, #88	; 0x58
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a9a:	2228      	movs	r2, #40	; 0x28
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f009 ff26 	bl	800a8f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
 8000ac2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ade:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000ae0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ae4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 fca0 	bl	8004430 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bf14      	ite	ne
 8000af6:	2301      	movne	r3, #1
 8000af8:	2300      	moveq	r3, #0
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8000b00:	f000 fc86 	bl	8001410 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4618      	mov	r0, r3
 8000b22:	f003 ff05 	bl	8004930 <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	bf14      	ite	ne
 8000b2c:	2301      	movne	r3, #1
 8000b2e:	2300      	moveq	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8000b36:	f000 fc6b 	bl	8001410 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000b3a:	2312      	movs	r3, #18
 8000b3c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000b3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b42:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b48:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f004 f8bd 	bl	8004ccc <HAL_RCCEx_PeriphCLKConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	bf14      	ite	ne
 8000b58:	2301      	movne	r3, #1
 8000b5a:	2300      	moveq	r3, #0
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8000b62:	f000 fc55 	bl	8001410 <Error_Handler>
  }
}
 8000b66:	bf00      	nop
 8000b68:	3758      	adds	r7, #88	; 0x58
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <_ZL12MX_ADC1_Initv+0x88>)
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <_ZL12MX_ADC1_Initv+0x8c>)
 8000b84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <_ZL12MX_ADC1_Initv+0x88>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <_ZL12MX_ADC1_Initv+0x88>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <_ZL12MX_ADC1_Initv+0x88>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <_ZL12MX_ADC1_Initv+0x88>)
 8000b9a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_ZL12MX_ADC1_Initv+0x88>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <_ZL12MX_ADC1_Initv+0x88>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <_ZL12MX_ADC1_Initv+0x88>)
 8000bae:	f001 f8e1 	bl	8001d74 <HAL_ADC_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	bf14      	ite	ne
 8000bb8:	2301      	movne	r3, #1
 8000bba:	2300      	moveq	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8000bc2:	f000 fc25 	bl	8001410 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <_ZL12MX_ADC1_Initv+0x88>)
 8000bd8:	f001 f9b6 	bl	8001f48 <HAL_ADC_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	bf14      	ite	ne
 8000be2:	2301      	movne	r3, #1
 8000be4:	2300      	moveq	r3, #0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8000bec:	f000 fc10 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000490 	.word	0x20000490
 8000bfc:	40012400 	.word	0x40012400

08000c00 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <_ZL12MX_ADC2_Initv+0x88>)
 8000c12:	4a1e      	ldr	r2, [pc, #120]	; (8000c8c <_ZL12MX_ADC2_Initv+0x8c>)
 8000c14:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <_ZL12MX_ADC2_Initv+0x88>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <_ZL12MX_ADC2_Initv+0x88>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <_ZL12MX_ADC2_Initv+0x88>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <_ZL12MX_ADC2_Initv+0x88>)
 8000c2a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c2e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <_ZL12MX_ADC2_Initv+0x88>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <_ZL12MX_ADC2_Initv+0x88>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c3c:	4812      	ldr	r0, [pc, #72]	; (8000c88 <_ZL12MX_ADC2_Initv+0x88>)
 8000c3e:	f001 f899 	bl	8001d74 <HAL_ADC_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	bf14      	ite	ne
 8000c48:	2301      	movne	r3, #1
 8000c4a:	2300      	moveq	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <_ZL12MX_ADC2_Initv+0x56>
  {
    Error_Handler();
 8000c52:	f000 fbdd 	bl	8001410 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c56:	2308      	movs	r3, #8
 8000c58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4808      	ldr	r0, [pc, #32]	; (8000c88 <_ZL12MX_ADC2_Initv+0x88>)
 8000c68:	f001 f96e 	bl	8001f48 <HAL_ADC_ConfigChannel>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	bf14      	ite	ne
 8000c72:	2301      	movne	r3, #1
 8000c74:	2300      	moveq	r3, #0
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <_ZL12MX_ADC2_Initv+0x80>
  {
    Error_Handler();
 8000c7c:	f000 fbc8 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200004c0 	.word	0x200004c0
 8000c8c:	40012800 	.word	0x40012800

08000c90 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <_ZL12MX_ADC3_Initv+0x88>)
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <_ZL12MX_ADC3_Initv+0x8c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <_ZL12MX_ADC3_Initv+0x88>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <_ZL12MX_ADC3_Initv+0x88>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <_ZL12MX_ADC3_Initv+0x88>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <_ZL12MX_ADC3_Initv+0x88>)
 8000cba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cbe:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <_ZL12MX_ADC3_Initv+0x88>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 1;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <_ZL12MX_ADC3_Initv+0x88>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ccc:	4812      	ldr	r0, [pc, #72]	; (8000d18 <_ZL12MX_ADC3_Initv+0x88>)
 8000cce:	f001 f851 	bl	8001d74 <HAL_ADC_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	bf14      	ite	ne
 8000cd8:	2301      	movne	r3, #1
 8000cda:	2300      	moveq	r3, #0
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <_ZL12MX_ADC3_Initv+0x56>
  {
    Error_Handler();
 8000ce2:	f000 fb95 	bl	8001410 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4808      	ldr	r0, [pc, #32]	; (8000d18 <_ZL12MX_ADC3_Initv+0x88>)
 8000cf8:	f001 f926 	bl	8001f48 <HAL_ADC_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	bf14      	ite	ne
 8000d02:	2301      	movne	r3, #1
 8000d04:	2300      	moveq	r3, #0
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <_ZL12MX_ADC3_Initv+0x80>
  {
    Error_Handler();
 8000d0c:	f000 fb80 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200004f0 	.word	0x200004f0
 8000d1c:	40013c00 	.word	0x40013c00

08000d20 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d26:	4a16      	ldr	r2, [pc, #88]	; (8000d80 <_ZL12MX_I2C1_Initv+0x60>)
 8000d28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d2c:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <_ZL12MX_I2C1_Initv+0x64>)
 8000d2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d5c:	4807      	ldr	r0, [pc, #28]	; (8000d7c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d5e:	f002 f863 	bl	8002e28 <HAL_I2C_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bf14      	ite	ne
 8000d68:	2301      	movne	r3, #1
 8000d6a:	2300      	moveq	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000d72:	f000 fb4d 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000520 	.word	0x20000520
 8000d80:	40005400 	.word	0x40005400
 8000d84:	000186a0 	.word	0x000186a0

08000d88 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08e      	sub	sp, #56	; 0x38
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	615a      	str	r2, [r3, #20]
 8000db6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db8:	4b51      	ldr	r3, [pc, #324]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dc0:	4b4f      	ldr	r3, [pc, #316]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b4e      	ldr	r3, [pc, #312]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000dcc:	4b4c      	ldr	r3, [pc, #304]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b49      	ldr	r3, [pc, #292]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dde:	4848      	ldr	r0, [pc, #288]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000de0:	f004 f82a 	bl	8004e38 <HAL_TIM_Base_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	bf14      	ite	ne
 8000dea:	2301      	movne	r3, #1
 8000dec:	2300      	moveq	r3, #0
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <_ZL12MX_TIM2_Initv+0x70>
  {
    Error_Handler();
 8000df4:	f000 fb0c 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e02:	4619      	mov	r1, r3
 8000e04:	483e      	ldr	r0, [pc, #248]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000e06:	f004 fa9d 	bl	8005344 <HAL_TIM_ConfigClockSource>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf14      	ite	ne
 8000e10:	2301      	movne	r3, #1
 8000e12:	2300      	moveq	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <_ZL12MX_TIM2_Initv+0x96>
  {
    Error_Handler();
 8000e1a:	f000 faf9 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e1e:	4838      	ldr	r0, [pc, #224]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000e20:	f004 f858 	bl	8004ed4 <HAL_TIM_PWM_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bf14      	ite	ne
 8000e2a:	2301      	movne	r3, #1
 8000e2c:	2300      	moveq	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8000e34:	f000 faec 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e40:	f107 0320 	add.w	r3, r7, #32
 8000e44:	4619      	mov	r1, r3
 8000e46:	482e      	ldr	r0, [pc, #184]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000e48:	f004 fe38 	bl	8005abc <HAL_TIMEx_MasterConfigSynchronization>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bf14      	ite	ne
 8000e52:	2301      	movne	r3, #1
 8000e54:	2300      	moveq	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <_ZL12MX_TIM2_Initv+0xd8>
  {
    Error_Handler();
 8000e5c:	f000 fad8 	bl	8001410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e60:	2360      	movs	r3, #96	; 0x60
 8000e62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	4619      	mov	r1, r3
 8000e76:	4822      	ldr	r0, [pc, #136]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000e78:	f004 f99e 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	bf14      	ite	ne
 8000e82:	2301      	movne	r3, #1
 8000e84:	2300      	moveq	r3, #0
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <_ZL12MX_TIM2_Initv+0x108>
  {
    Error_Handler();
 8000e8c:	f000 fac0 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2204      	movs	r2, #4
 8000e94:	4619      	mov	r1, r3
 8000e96:	481a      	ldr	r0, [pc, #104]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000e98:	f004 f98e 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	bf14      	ite	ne
 8000ea2:	2301      	movne	r3, #1
 8000ea4:	2300      	moveq	r3, #0
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <_ZL12MX_TIM2_Initv+0x128>
  {
    Error_Handler();
 8000eac:	f000 fab0 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2208      	movs	r2, #8
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4812      	ldr	r0, [pc, #72]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000eb8:	f004 f97e 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	bf14      	ite	ne
 8000ec2:	2301      	movne	r3, #1
 8000ec4:	2300      	moveq	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <_ZL12MX_TIM2_Initv+0x148>
  {
    Error_Handler();
 8000ecc:	f000 faa0 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480a      	ldr	r0, [pc, #40]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000ed8:	f004 f96e 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bf14      	ite	ne
 8000ee2:	2301      	movne	r3, #1
 8000ee4:	2300      	moveq	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <_ZL12MX_TIM2_Initv+0x168>
  {
    Error_Handler();
 8000eec:	f000 fa90 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <_ZL12MX_TIM2_Initv+0x178>)
 8000ef2:	f000 fc1f 	bl	8001734 <HAL_TIM_MspPostInit>

}
 8000ef6:	bf00      	nop
 8000ef8:	3738      	adds	r7, #56	; 0x38
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000574 	.word	0x20000574

08000f04 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	; 0x38
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f18:	f107 0320 	add.w	r3, r7, #32
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
 8000f30:	615a      	str	r2, [r3, #20]
 8000f32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f34:	4b50      	ldr	r3, [pc, #320]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 8000f36:	4a51      	ldr	r2, [pc, #324]	; (800107c <_ZL12MX_TIM3_Initv+0x178>)
 8000f38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f3a:	4b4f      	ldr	r3, [pc, #316]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b4d      	ldr	r3, [pc, #308]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 8000f46:	4b4c      	ldr	r3, [pc, #304]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 8000f48:	22c7      	movs	r2, #199	; 0xc7
 8000f4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4c:	4b4a      	ldr	r3, [pc, #296]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	4b49      	ldr	r3, [pc, #292]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f58:	4847      	ldr	r0, [pc, #284]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 8000f5a:	f003 ff6d 	bl	8004e38 <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bf14      	ite	ne
 8000f64:	2301      	movne	r3, #1
 8000f66:	2300      	moveq	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8000f6e:	f000 fa4f 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	483e      	ldr	r0, [pc, #248]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 8000f80:	f004 f9e0 	bl	8005344 <HAL_TIM_ConfigClockSource>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bf14      	ite	ne
 8000f8a:	2301      	movne	r3, #1
 8000f8c:	2300      	moveq	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 8000f94:	f000 fa3c 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f98:	4837      	ldr	r0, [pc, #220]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 8000f9a:	f003 ff9b 	bl	8004ed4 <HAL_TIM_PWM_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bf14      	ite	ne
 8000fa4:	2301      	movne	r3, #1
 8000fa6:	2300      	moveq	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8000fae:	f000 fa2f 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	482d      	ldr	r0, [pc, #180]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 8000fc2:	f004 fd7b 	bl	8005abc <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf14      	ite	ne
 8000fcc:	2301      	movne	r3, #1
 8000fce:	2300      	moveq	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 8000fd6:	f000 fa1b 	bl	8001410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fda:	2360      	movs	r3, #96	; 0x60
 8000fdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4821      	ldr	r0, [pc, #132]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 8000ff2:	f004 f8e1 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	bf14      	ite	ne
 8000ffc:	2301      	movne	r3, #1
 8000ffe:	2300      	moveq	r3, #0
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 8001006:	f000 fa03 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2204      	movs	r2, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4819      	ldr	r0, [pc, #100]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 8001012:	f004 f8d1 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	bf14      	ite	ne
 800101c:	2301      	movne	r3, #1
 800101e:	2300      	moveq	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <_ZL12MX_TIM3_Initv+0x126>
  {
    Error_Handler();
 8001026:	f000 f9f3 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2208      	movs	r2, #8
 800102e:	4619      	mov	r1, r3
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 8001032:	f004 f8c1 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	bf14      	ite	ne
 800103c:	2301      	movne	r3, #1
 800103e:	2300      	moveq	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <_ZL12MX_TIM3_Initv+0x146>
  {
    Error_Handler();
 8001046:	f000 f9e3 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	220c      	movs	r2, #12
 800104e:	4619      	mov	r1, r3
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 8001052:	f004 f8b1 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf14      	ite	ne
 800105c:	2301      	movne	r3, #1
 800105e:	2300      	moveq	r3, #0
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <_ZL12MX_TIM3_Initv+0x166>
  {
    Error_Handler();
 8001066:	f000 f9d3 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <_ZL12MX_TIM3_Initv+0x174>)
 800106c:	f000 fb62 	bl	8001734 <HAL_TIM_MspPostInit>

}
 8001070:	bf00      	nop
 8001072:	3738      	adds	r7, #56	; 0x38
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200005b4 	.word	0x200005b4
 800107c:	40000400 	.word	0x40000400

08001080 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <_ZL12MX_TIM5_Initv+0x128>)
 80010a4:	4a41      	ldr	r2, [pc, #260]	; (80011ac <_ZL12MX_TIM5_Initv+0x12c>)
 80010a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010a8:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <_ZL12MX_TIM5_Initv+0x128>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ae:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <_ZL12MX_TIM5_Initv+0x128>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80010b4:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <_ZL12MX_TIM5_Initv+0x128>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <_ZL12MX_TIM5_Initv+0x128>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c0:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <_ZL12MX_TIM5_Initv+0x128>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80010c6:	4838      	ldr	r0, [pc, #224]	; (80011a8 <_ZL12MX_TIM5_Initv+0x128>)
 80010c8:	f003 ff04 	bl	8004ed4 <HAL_TIM_PWM_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf14      	ite	ne
 80010d2:	2301      	movne	r3, #1
 80010d4:	2300      	moveq	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <_ZL12MX_TIM5_Initv+0x60>
  {
    Error_Handler();
 80010dc:	f000 f998 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4619      	mov	r1, r3
 80010ee:	482e      	ldr	r0, [pc, #184]	; (80011a8 <_ZL12MX_TIM5_Initv+0x128>)
 80010f0:	f004 fce4 	bl	8005abc <HAL_TIMEx_MasterConfigSynchronization>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bf14      	ite	ne
 80010fa:	2301      	movne	r3, #1
 80010fc:	2300      	moveq	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <_ZL12MX_TIM5_Initv+0x88>
  {
    Error_Handler();
 8001104:	f000 f984 	bl	8001410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001108:	2360      	movs	r3, #96	; 0x60
 800110a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	4619      	mov	r1, r3
 800111e:	4822      	ldr	r0, [pc, #136]	; (80011a8 <_ZL12MX_TIM5_Initv+0x128>)
 8001120:	f004 f84a 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	bf14      	ite	ne
 800112a:	2301      	movne	r3, #1
 800112c:	2300      	moveq	r3, #0
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <_ZL12MX_TIM5_Initv+0xb8>
  {
    Error_Handler();
 8001134:	f000 f96c 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2204      	movs	r2, #4
 800113c:	4619      	mov	r1, r3
 800113e:	481a      	ldr	r0, [pc, #104]	; (80011a8 <_ZL12MX_TIM5_Initv+0x128>)
 8001140:	f004 f83a 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf14      	ite	ne
 800114a:	2301      	movne	r3, #1
 800114c:	2300      	moveq	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <_ZL12MX_TIM5_Initv+0xd8>
  {
    Error_Handler();
 8001154:	f000 f95c 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2208      	movs	r2, #8
 800115c:	4619      	mov	r1, r3
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <_ZL12MX_TIM5_Initv+0x128>)
 8001160:	f004 f82a 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	bf14      	ite	ne
 800116a:	2301      	movne	r3, #1
 800116c:	2300      	moveq	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <_ZL12MX_TIM5_Initv+0xf8>
  {
    Error_Handler();
 8001174:	f000 f94c 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	220c      	movs	r2, #12
 800117c:	4619      	mov	r1, r3
 800117e:	480a      	ldr	r0, [pc, #40]	; (80011a8 <_ZL12MX_TIM5_Initv+0x128>)
 8001180:	f004 f81a 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	bf14      	ite	ne
 800118a:	2301      	movne	r3, #1
 800118c:	2300      	moveq	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <_ZL12MX_TIM5_Initv+0x118>
  {
    Error_Handler();
 8001194:	f000 f93c 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <_ZL12MX_TIM5_Initv+0x128>)
 800119a:	f000 facb 	bl	8001734 <HAL_TIM_MspPostInit>

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	; 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200005f4 	.word	0x200005f4
 80011ac:	40000c00 	.word	0x40000c00

080011b0 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <_ZL13MX_UART5_Initv+0x54>)
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <_ZL13MX_UART5_Initv+0x58>)
 80011b8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <_ZL13MX_UART5_Initv+0x54>)
 80011bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <_ZL13MX_UART5_Initv+0x54>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <_ZL13MX_UART5_Initv+0x54>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <_ZL13MX_UART5_Initv+0x54>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <_ZL13MX_UART5_Initv+0x54>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <_ZL13MX_UART5_Initv+0x54>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <_ZL13MX_UART5_Initv+0x54>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80011e6:	4807      	ldr	r0, [pc, #28]	; (8001204 <_ZL13MX_UART5_Initv+0x54>)
 80011e8:	f004 fcbe 	bl	8005b68 <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	bf14      	ite	ne
 80011f2:	2301      	movne	r3, #1
 80011f4:	2300      	moveq	r3, #0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 80011fc:	f000 f908 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000634 	.word	0x20000634
 8001208:	40005000 	.word	0x40005000

0800120c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001212:	4a14      	ldr	r2, [pc, #80]	; (8001264 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001214:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <_ZL19MX_USART1_UART_Initv+0x54>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <_ZL19MX_USART1_UART_Initv+0x54>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001242:	4807      	ldr	r0, [pc, #28]	; (8001260 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001244:	f004 fc90 	bl	8005b68 <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001258:	f000 f8da 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000674 	.word	0x20000674
 8001264:	40013800 	.word	0x40013800

08001268 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <_ZL11MX_DMA_Initv+0x48>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <_ZL11MX_DMA_Initv+0x48>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6153      	str	r3, [r2, #20]
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <_ZL11MX_DMA_Initv+0x48>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2105      	movs	r1, #5
 800128a:	200e      	movs	r0, #14
 800128c:	f001 f843 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001290:	200e      	movs	r0, #14
 8001292:	f001 f85c 	bl	800234e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2105      	movs	r1, #5
 800129a:	200f      	movs	r0, #15
 800129c:	f001 f83b 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012a0:	200f      	movs	r0, #15
 80012a2:	f001 f854 	bl	800234e <HAL_NVIC_EnableIRQ>

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000

080012b4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c8:	4b43      	ldr	r3, [pc, #268]	; (80013d8 <_ZL12MX_GPIO_Initv+0x124>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a42      	ldr	r2, [pc, #264]	; (80013d8 <_ZL12MX_GPIO_Initv+0x124>)
 80012ce:	f043 0310 	orr.w	r3, r3, #16
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <_ZL12MX_GPIO_Initv+0x124>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e0:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <_ZL12MX_GPIO_Initv+0x124>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a3c      	ldr	r2, [pc, #240]	; (80013d8 <_ZL12MX_GPIO_Initv+0x124>)
 80012e6:	f043 0320 	orr.w	r3, r3, #32
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <_ZL12MX_GPIO_Initv+0x124>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <_ZL12MX_GPIO_Initv+0x124>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a36      	ldr	r2, [pc, #216]	; (80013d8 <_ZL12MX_GPIO_Initv+0x124>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <_ZL12MX_GPIO_Initv+0x124>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001310:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <_ZL12MX_GPIO_Initv+0x124>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a30      	ldr	r2, [pc, #192]	; (80013d8 <_ZL12MX_GPIO_Initv+0x124>)
 8001316:	f043 0308 	orr.w	r3, r3, #8
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <_ZL12MX_GPIO_Initv+0x124>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|MOTOR11_PH_Pin|MOTOR12_PH_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 4164 	mov.w	r1, #58368	; 0xe400
 800132e:	482b      	ldr	r0, [pc, #172]	; (80013dc <_ZL12MX_GPIO_Initv+0x128>)
 8001330:	f001 fd40 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR1_PH_Pin|MOTOR2_PH_Pin|MOTOR3_PH_Pin|MOTOR4_PH_Pin
 8001334:	2200      	movs	r2, #0
 8001336:	f24f 3134 	movw	r1, #62260	; 0xf334
 800133a:	4829      	ldr	r0, [pc, #164]	; (80013e0 <_ZL12MX_GPIO_Initv+0x12c>)
 800133c:	f001 fd3a 	bl	8002db4 <HAL_GPIO_WritePin>
                          |MOTOR5_PH_Pin|MOTOR7_PH_Pin|MOTOR8_PH_Pin|MOTOR9_PH_Pin
                          |MOTOR10_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR6_PH_GPIO_Port, MOTOR6_PH_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001346:	4827      	ldr	r0, [pc, #156]	; (80013e4 <_ZL12MX_GPIO_Initv+0x130>)
 8001348:	f001 fd34 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin MOTOR11_PH_Pin MOTOR12_PH_Pin PC10 */
  GPIO_InitStruct.Pin = LED0_Pin|MOTOR11_PH_Pin|MOTOR12_PH_Pin|GPIO_PIN_10;
 800134c:	f44f 4364 	mov.w	r3, #58368	; 0xe400
 8001350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2302      	movs	r3, #2
 800135c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	4619      	mov	r1, r3
 8001364:	481d      	ldr	r0, [pc, #116]	; (80013dc <_ZL12MX_GPIO_Initv+0x128>)
 8001366:	f001 fbbb 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR1_PH_Pin MOTOR2_PH_Pin MOTOR3_PH_Pin MOTOR4_PH_Pin
                           MOTOR5_PH_Pin MOTOR7_PH_Pin MOTOR8_PH_Pin MOTOR9_PH_Pin
                           MOTOR10_PH_Pin */
  GPIO_InitStruct.Pin = MOTOR1_PH_Pin|MOTOR2_PH_Pin|MOTOR3_PH_Pin|MOTOR4_PH_Pin
 800136a:	f24f 3334 	movw	r3, #62260	; 0xf334
 800136e:	613b      	str	r3, [r7, #16]
                          |MOTOR5_PH_Pin|MOTOR7_PH_Pin|MOTOR8_PH_Pin|MOTOR9_PH_Pin
                          |MOTOR10_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2302      	movs	r3, #2
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	4817      	ldr	r0, [pc, #92]	; (80013e0 <_ZL12MX_GPIO_Initv+0x12c>)
 8001384:	f001 fbac 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR6_PH_Pin */
  GPIO_InitStruct.Pin = MOTOR6_PH_Pin;
 8001388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2302      	movs	r3, #2
 8001398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR6_PH_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4619      	mov	r1, r3
 80013a0:	4810      	ldr	r0, [pc, #64]	; (80013e4 <_ZL12MX_GPIO_Initv+0x130>)
 80013a2:	f001 fb9d 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_INT_Pin */
  GPIO_InitStruct.Pin = GPIO_INT_Pin;
 80013a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <_ZL12MX_GPIO_Initv+0x134>)
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_INT_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	4808      	ldr	r0, [pc, #32]	; (80013dc <_ZL12MX_GPIO_Initv+0x128>)
 80013bc:	f001 fb90 	bl	8002ae0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2105      	movs	r1, #5
 80013c4:	2028      	movs	r0, #40	; 0x28
 80013c6:	f000 ffa6 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013ca:	2028      	movs	r0, #40	; 0x28
 80013cc:	f000 ffbf 	bl	800234e <HAL_NVIC_EnableIRQ>

}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40011000 	.word	0x40011000
 80013e0:	40010c00 	.word	0x40010c00
 80013e4:	40010800 	.word	0x40010800
 80013e8:	10110000 	.word	0x10110000

080013ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013fe:	f000 fc9d 	bl	8001d3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40001400 	.word	0x40001400

08001410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <_Z41__static_initialization_and_destruction_0ii>:
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d107      	bne.n	800143c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001432:	4293      	cmp	r3, r2
 8001434:	d102      	bne.n	800143c <_Z41__static_initialization_and_destruction_0ii+0x20>
atstkChannels 	sticks;				// drum stick channels
 8001436:	4803      	ldr	r0, [pc, #12]	; (8001444 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001438:	f7ff fa3a 	bl	80008b0 <_ZN13atstkChannelsC1Ev>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000744 	.word	0x20000744

08001448 <_GLOBAL__sub_I_hadc1>:
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
 800144c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001450:	2001      	movs	r0, #1
 8001452:	f7ff ffe3 	bl	800141c <_Z41__static_initialization_and_destruction_0ii>
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_MspInit+0x68>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <HAL_MspInit+0x68>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6193      	str	r3, [r2, #24]
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_MspInit+0x68>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_MspInit+0x68>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <HAL_MspInit+0x68>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	61d3      	str	r3, [r2, #28]
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_MspInit+0x68>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	210f      	movs	r1, #15
 8001492:	f06f 0001 	mvn.w	r0, #1
 8001496:	f000 ff3e 	bl	8002316 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_MspInit+0x6c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_MspInit+0x6c>)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000

080014c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08e      	sub	sp, #56	; 0x38
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a47      	ldr	r2, [pc, #284]	; (8001600 <HAL_ADC_MspInit+0x138>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d122      	bne.n	800152e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014e8:	4b46      	ldr	r3, [pc, #280]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a45      	ldr	r2, [pc, #276]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 80014ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b43      	ldr	r3, [pc, #268]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	4b40      	ldr	r3, [pc, #256]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a3f      	ldr	r2, [pc, #252]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	623b      	str	r3, [r7, #32]
 8001516:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = MOTOR1_IPROP_Pin|MOTOR2_IPROP_Pin|MOTOR3_IPROP_Pin|MOTOR4_IPROP_Pin;
 8001518:	23f0      	movs	r3, #240	; 0xf0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151c:	2303      	movs	r3, #3
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001524:	4619      	mov	r1, r3
 8001526:	4838      	ldr	r0, [pc, #224]	; (8001608 <HAL_ADC_MspInit+0x140>)
 8001528:	f001 fada 	bl	8002ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800152c:	e064      	b.n	80015f8 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC2)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a36      	ldr	r2, [pc, #216]	; (800160c <HAL_ADC_MspInit+0x144>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d138      	bne.n	80015aa <HAL_ADC_MspInit+0xe2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001538:	4b32      	ldr	r3, [pc, #200]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a31      	ldr	r2, [pc, #196]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 800153e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001550:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a2b      	ldr	r2, [pc, #172]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 8001556:	f043 0310 	orr.w	r3, r3, #16
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	4b26      	ldr	r3, [pc, #152]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a25      	ldr	r2, [pc, #148]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR11_IPROP_Pin|MOTOR12_IPROP_Pin;
 8001580:	2330      	movs	r3, #48	; 0x30
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001584:	2303      	movs	r3, #3
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158c:	4619      	mov	r1, r3
 800158e:	4820      	ldr	r0, [pc, #128]	; (8001610 <HAL_ADC_MspInit+0x148>)
 8001590:	f001 faa6 	bl	8002ae0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR5_IPROP_Pin|MOTOR6_IPROP_Pin;
 8001594:	2303      	movs	r3, #3
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001598:	2303      	movs	r3, #3
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a0:	4619      	mov	r1, r3
 80015a2:	481c      	ldr	r0, [pc, #112]	; (8001614 <HAL_ADC_MspInit+0x14c>)
 80015a4:	f001 fa9c 	bl	8002ae0 <HAL_GPIO_Init>
}
 80015a8:	e026      	b.n	80015f8 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC3)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a1a      	ldr	r2, [pc, #104]	; (8001618 <HAL_ADC_MspInit+0x150>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d121      	bne.n	80015f8 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a12      	ldr	r2, [pc, #72]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 80015ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b10      	ldr	r3, [pc, #64]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 80015d2:	f043 0310 	orr.w	r3, r3, #16
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_ADC_MspInit+0x13c>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR7_IPROP_Pin|MOTOR8_IPROP_Pin|MOTOR9_IPROP_Pin|MOTOR10_IPROP_Pin;
 80015e4:	230f      	movs	r3, #15
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e8:	2303      	movs	r3, #3
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f0:	4619      	mov	r1, r3
 80015f2:	4807      	ldr	r0, [pc, #28]	; (8001610 <HAL_ADC_MspInit+0x148>)
 80015f4:	f001 fa74 	bl	8002ae0 <HAL_GPIO_Init>
}
 80015f8:	bf00      	nop
 80015fa:	3738      	adds	r7, #56	; 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40012400 	.word	0x40012400
 8001604:	40021000 	.word	0x40021000
 8001608:	40010800 	.word	0x40010800
 800160c:	40012800 	.word	0x40012800
 8001610:	40011000 	.word	0x40011000
 8001614:	40010c00 	.word	0x40010c00
 8001618:	40013c00 	.word	0x40013c00

0800161c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a15      	ldr	r2, [pc, #84]	; (800168c <HAL_I2C_MspInit+0x70>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d123      	bne.n	8001684 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_I2C_MspInit+0x74>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a13      	ldr	r2, [pc, #76]	; (8001690 <HAL_I2C_MspInit+0x74>)
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_I2C_MspInit+0x74>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001654:	23c0      	movs	r3, #192	; 0xc0
 8001656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001658:	2312      	movs	r3, #18
 800165a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	4619      	mov	r1, r3
 8001666:	480b      	ldr	r0, [pc, #44]	; (8001694 <HAL_I2C_MspInit+0x78>)
 8001668:	f001 fa3a 	bl	8002ae0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_I2C_MspInit+0x74>)
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <HAL_I2C_MspInit+0x74>)
 8001672:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001676:	61d3      	str	r3, [r2, #28]
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_I2C_MspInit+0x74>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001684:	bf00      	nop
 8001686:	3720      	adds	r7, #32
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40005400 	.word	0x40005400
 8001690:	40021000 	.word	0x40021000
 8001694:	40010c00 	.word	0x40010c00

08001698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a8:	d10c      	bne.n	80016c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_TIM_Base_MspInit+0x58>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <HAL_TIM_Base_MspInit+0x58>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_TIM_Base_MspInit+0x58>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016c2:	e010      	b.n	80016e6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_TIM_Base_MspInit+0x5c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10b      	bne.n	80016e6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_TIM_Base_MspInit+0x58>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_TIM_Base_MspInit+0x58>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_TIM_Base_MspInit+0x58>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40000400 	.word	0x40000400

080016f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_TIM_PWM_MspInit+0x34>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d10b      	bne.n	8001722 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_TIM_PWM_MspInit+0x38>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_TIM_PWM_MspInit+0x38>)
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	61d3      	str	r3, [r2, #28]
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_TIM_PWM_MspInit+0x38>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	40000c00 	.word	0x40000c00
 8001730:	40021000 	.word	0x40021000

08001734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	; 0x30
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0318 	add.w	r3, r7, #24
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001752:	d144      	bne.n	80017de <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	4b4b      	ldr	r3, [pc, #300]	; (8001884 <HAL_TIM_MspPostInit+0x150>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a4a      	ldr	r2, [pc, #296]	; (8001884 <HAL_TIM_MspPostInit+0x150>)
 800175a:	f043 0308 	orr.w	r3, r3, #8
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b48      	ldr	r3, [pc, #288]	; (8001884 <HAL_TIM_MspPostInit+0x150>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b45      	ldr	r3, [pc, #276]	; (8001884 <HAL_TIM_MspPostInit+0x150>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a44      	ldr	r2, [pc, #272]	; (8001884 <HAL_TIM_MspPostInit+0x150>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b42      	ldr	r3, [pc, #264]	; (8001884 <HAL_TIM_MspPostInit+0x150>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	693b      	ldr	r3, [r7, #16]
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = MOTOR3_PWM_Pin|MOTOR4_PWM_Pin|MOTOR2_PWM_Pin;
 8001784:	f640 4308 	movw	r3, #3080	; 0xc08
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2302      	movs	r3, #2
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f107 0318 	add.w	r3, r7, #24
 8001796:	4619      	mov	r1, r3
 8001798:	483b      	ldr	r0, [pc, #236]	; (8001888 <HAL_TIM_MspPostInit+0x154>)
 800179a:	f001 f9a1 	bl	8002ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin;
 800179e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2302      	movs	r3, #2
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR1_PWM_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 0318 	add.w	r3, r7, #24
 80017b0:	4619      	mov	r1, r3
 80017b2:	4836      	ldr	r0, [pc, #216]	; (800188c <HAL_TIM_MspPostInit+0x158>)
 80017b4:	f001 f994 	bl	8002ae0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_ENABLE();
 80017b8:	4b35      	ldr	r3, [pc, #212]	; (8001890 <HAL_TIM_MspPostInit+0x15c>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80017be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d6:	4a2e      	ldr	r2, [pc, #184]	; (8001890 <HAL_TIM_MspPostInit+0x15c>)
 80017d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017da:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80017dc:	e04d      	b.n	800187a <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM3)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a2c      	ldr	r2, [pc, #176]	; (8001894 <HAL_TIM_MspPostInit+0x160>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d12b      	bne.n	8001840 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <HAL_TIM_MspPostInit+0x150>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a25      	ldr	r2, [pc, #148]	; (8001884 <HAL_TIM_MspPostInit+0x150>)
 80017ee:	f043 0310 	orr.w	r3, r3, #16
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <HAL_TIM_MspPostInit+0x150>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_PWM_Pin|MOTOR6_PWM_Pin|MOTOR7_PWM_Pin|MOTOR8_PWM_Pin;
 8001800:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2302      	movs	r3, #2
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	4619      	mov	r1, r3
 8001814:	4820      	ldr	r0, [pc, #128]	; (8001898 <HAL_TIM_MspPostInit+0x164>)
 8001816:	f001 f963 	bl	8002ae0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800181a:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_TIM_MspPostInit+0x15c>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001822:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001832:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001838:	4a15      	ldr	r2, [pc, #84]	; (8001890 <HAL_TIM_MspPostInit+0x15c>)
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	6053      	str	r3, [r2, #4]
}
 800183e:	e01c      	b.n	800187a <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM5)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a15      	ldr	r2, [pc, #84]	; (800189c <HAL_TIM_MspPostInit+0x168>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d117      	bne.n	800187a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_TIM_MspPostInit+0x150>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <HAL_TIM_MspPostInit+0x150>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6193      	str	r3, [r2, #24]
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_TIM_MspPostInit+0x150>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR9_PWM_Pin|MOTOR10_PWM_Pin|MOTOR11_PWM_Pin|MOTOR12_PWM_Pin;
 8001862:	230f      	movs	r3, #15
 8001864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2302      	movs	r3, #2
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0318 	add.w	r3, r7, #24
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_TIM_MspPostInit+0x158>)
 8001876:	f001 f933 	bl	8002ae0 <HAL_GPIO_Init>
}
 800187a:	bf00      	nop
 800187c:	3730      	adds	r7, #48	; 0x30
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000
 8001888:	40010c00 	.word	0x40010c00
 800188c:	40010800 	.word	0x40010800
 8001890:	40010000 	.word	0x40010000
 8001894:	40000400 	.word	0x40000400
 8001898:	40011000 	.word	0x40011000
 800189c:	40000c00 	.word	0x40000c00

080018a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	; 0x30
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0320 	add.w	r3, r7, #32
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART5)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6c      	ldr	r2, [pc, #432]	; (8001a6c <HAL_UART_MspInit+0x1cc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d145      	bne.n	800194c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80018c0:	4b6b      	ldr	r3, [pc, #428]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	4a6a      	ldr	r2, [pc, #424]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 80018c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018ca:	61d3      	str	r3, [r2, #28]
 80018cc:	4b68      	ldr	r3, [pc, #416]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d8:	4b65      	ldr	r3, [pc, #404]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a64      	ldr	r2, [pc, #400]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b62      	ldr	r3, [pc, #392]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f0:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a5e      	ldr	r2, [pc, #376]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 80018f6:	f043 0320 	orr.w	r3, r3, #32
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001916:	f107 0320 	add.w	r3, r7, #32
 800191a:	4619      	mov	r1, r3
 800191c:	4855      	ldr	r0, [pc, #340]	; (8001a74 <HAL_UART_MspInit+0x1d4>)
 800191e:	f001 f8df 	bl	8002ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001922:	2304      	movs	r3, #4
 8001924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192e:	f107 0320 	add.w	r3, r7, #32
 8001932:	4619      	mov	r1, r3
 8001934:	4850      	ldr	r0, [pc, #320]	; (8001a78 <HAL_UART_MspInit+0x1d8>)
 8001936:	f001 f8d3 	bl	8002ae0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2105      	movs	r1, #5
 800193e:	2035      	movs	r0, #53	; 0x35
 8001940:	f000 fce9 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001944:	2035      	movs	r0, #53	; 0x35
 8001946:	f000 fd02 	bl	800234e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800194a:	e08b      	b.n	8001a64 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a4a      	ldr	r2, [pc, #296]	; (8001a7c <HAL_UART_MspInit+0x1dc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	f040 8086 	bne.w	8001a64 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001958:	4b45      	ldr	r3, [pc, #276]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a44      	ldr	r2, [pc, #272]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 800195e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b42      	ldr	r3, [pc, #264]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	4b3f      	ldr	r3, [pc, #252]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a3e      	ldr	r2, [pc, #248]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b3c      	ldr	r3, [pc, #240]	; (8001a70 <HAL_UART_MspInit+0x1d0>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 0320 	add.w	r3, r7, #32
 800199a:	4619      	mov	r1, r3
 800199c:	4838      	ldr	r0, [pc, #224]	; (8001a80 <HAL_UART_MspInit+0x1e0>)
 800199e:	f001 f89f 	bl	8002ae0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	f107 0320 	add.w	r3, r7, #32
 80019b4:	4619      	mov	r1, r3
 80019b6:	4832      	ldr	r0, [pc, #200]	; (8001a80 <HAL_UART_MspInit+0x1e0>)
 80019b8:	f001 f892 	bl	8002ae0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80019bc:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <HAL_UART_MspInit+0x1e4>)
 80019be:	4a32      	ldr	r2, [pc, #200]	; (8001a88 <HAL_UART_MspInit+0x1e8>)
 80019c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019c2:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <HAL_UART_MspInit+0x1e4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c8:	4b2e      	ldr	r3, [pc, #184]	; (8001a84 <HAL_UART_MspInit+0x1e4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019ce:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <HAL_UART_MspInit+0x1e4>)
 80019d0:	2280      	movs	r2, #128	; 0x80
 80019d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <HAL_UART_MspInit+0x1e4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <HAL_UART_MspInit+0x1e4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80019e0:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <HAL_UART_MspInit+0x1e4>)
 80019e2:	2220      	movs	r2, #32
 80019e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019e6:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_UART_MspInit+0x1e4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80019ec:	4825      	ldr	r0, [pc, #148]	; (8001a84 <HAL_UART_MspInit+0x1e4>)
 80019ee:	f000 fcbd 	bl	800236c <HAL_DMA_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_UART_MspInit+0x15c>
      Error_Handler();
 80019f8:	f7ff fd0a 	bl	8001410 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <HAL_UART_MspInit+0x1e4>)
 8001a00:	635a      	str	r2, [r3, #52]	; 0x34
 8001a02:	4a20      	ldr	r2, [pc, #128]	; (8001a84 <HAL_UART_MspInit+0x1e4>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_UART_MspInit+0x1ec>)
 8001a0a:	4a21      	ldr	r2, [pc, #132]	; (8001a90 <HAL_UART_MspInit+0x1f0>)
 8001a0c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <HAL_UART_MspInit+0x1ec>)
 8001a10:	2210      	movs	r2, #16
 8001a12:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <HAL_UART_MspInit+0x1ec>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <HAL_UART_MspInit+0x1ec>)
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <HAL_UART_MspInit+0x1ec>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_UART_MspInit+0x1ec>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_UART_MspInit+0x1ec>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_UART_MspInit+0x1ec>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a38:	4814      	ldr	r0, [pc, #80]	; (8001a8c <HAL_UART_MspInit+0x1ec>)
 8001a3a:	f000 fc97 	bl	800236c <HAL_DMA_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001a44:	f7ff fce4 	bl	8001410 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <HAL_UART_MspInit+0x1ec>)
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_UART_MspInit+0x1ec>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2105      	movs	r1, #5
 8001a58:	2025      	movs	r0, #37	; 0x25
 8001a5a:	f000 fc5c 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a5e:	2025      	movs	r0, #37	; 0x25
 8001a60:	f000 fc75 	bl	800234e <HAL_NVIC_EnableIRQ>
}
 8001a64:	bf00      	nop
 8001a66:	3730      	adds	r7, #48	; 0x30
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40005000 	.word	0x40005000
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40011000 	.word	0x40011000
 8001a78:	40011400 	.word	0x40011400
 8001a7c:	40013800 	.word	0x40013800
 8001a80:	40010800 	.word	0x40010800
 8001a84:	200006b4 	.word	0x200006b4
 8001a88:	40020058 	.word	0x40020058
 8001a8c:	200006f8 	.word	0x200006f8
 8001a90:	40020044 	.word	0x40020044

08001a94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08c      	sub	sp, #48	; 0x30
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	2037      	movs	r0, #55	; 0x37
 8001aaa:	f000 fc34 	bl	8002316 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8001aae:	2037      	movs	r0, #55	; 0x37
 8001ab0:	f000 fc4d 	bl	800234e <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <HAL_InitTick+0xa0>)
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <HAL_InitTick+0xa0>)
 8001aba:	f043 0320 	orr.w	r3, r3, #32
 8001abe:	61d3      	str	r3, [r2, #28]
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <HAL_InitTick+0xa0>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	f003 0320 	and.w	r3, r3, #32
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001acc:	f107 0210 	add.w	r2, r7, #16
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 f8aa 	bl	8004c30 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001adc:	f003 f880 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <HAL_InitTick+0xa4>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
 8001aee:	0c9b      	lsrs	r3, r3, #18
 8001af0:	3b01      	subs	r3, #1
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_InitTick+0xa8>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <HAL_InitTick+0xac>)
 8001af8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_InitTick+0xa8>)
 8001afc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b00:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <HAL_InitTick+0xa8>)
 8001b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b06:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_InitTick+0xa8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_InitTick+0xa8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001b14:	4809      	ldr	r0, [pc, #36]	; (8001b3c <HAL_InitTick+0xa8>)
 8001b16:	f003 f98f 	bl	8004e38 <HAL_TIM_Base_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d104      	bne.n	8001b2a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001b20:	4806      	ldr	r0, [pc, #24]	; (8001b3c <HAL_InitTick+0xa8>)
 8001b22:	f003 f9b4 	bl	8004e8e <HAL_TIM_Base_Start_IT>
 8001b26:	4603      	mov	r3, r0
 8001b28:	e000      	b.n	8001b2c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3730      	adds	r7, #48	; 0x30
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	431bde83 	.word	0x431bde83
 8001b3c:	20003f34 	.word	0x20003f34
 8001b40:	40001400 	.word	0x40001400

08001b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <HardFault_Handler+0x4>

08001b56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <MemManage_Handler+0x4>

08001b5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <BusFault_Handler+0x4>

08001b62 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <UsageFault_Handler+0x4>

08001b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <DMA1_Channel4_IRQHandler+0x10>)
 8001b7a:	f000 fd75 	bl	8002668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200006f8 	.word	0x200006f8

08001b88 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <DMA1_Channel5_IRQHandler+0x10>)
 8001b8e:	f000 fd6b 	bl	8002668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200006b4 	.word	0x200006b4

08001b9c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001ba2:	f001 fe6a 	bl	800387a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20004448 	.word	0x20004448

08001bb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <USART1_IRQHandler+0x10>)
 8001bb6:	f004 f911 	bl	8005ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000674 	.word	0x20000674

08001bc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001bc8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001bcc:	f001 f90a 	bl	8002de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <UART5_IRQHandler+0x10>)
 8001bda:	f004 f8ff 	bl	8005ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000634 	.word	0x20000634

08001be8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <TIM7_IRQHandler+0x10>)
 8001bee:	f003 f9db 	bl	8004fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20003f34 	.word	0x20003f34

08001bfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <SystemInit+0x5c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <SystemInit+0x5c>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <SystemInit+0x5c>)
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	4911      	ldr	r1, [pc, #68]	; (8001c58 <SystemInit+0x5c>)
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <SystemInit+0x60>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <SystemInit+0x5c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <SystemInit+0x5c>)
 8001c1e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <SystemInit+0x5c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <SystemInit+0x5c>)
 8001c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c32:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <SystemInit+0x5c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <SystemInit+0x5c>)
 8001c3a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c3e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <SystemInit+0x5c>)
 8001c42:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c46:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SystemInit+0x64>)
 8001c4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c4e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	f8ff0000 	.word	0xf8ff0000
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <InitUartQueue>:
#include "uart_cdc_if.h"

UART_HandleTypeDef *pUartHandler;

void InitUartQueue(pUARTQUEUE pQueue)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
    pQueue->data = pQueue->head = pQueue->tail = 0;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	609a      	str	r2, [r3, #8]

}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <_Z3maplllll>:



#include "utils.h"

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	69b9      	ldr	r1, [r7, #24]
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	1a8a      	subs	r2, r1, r2
 8001ca6:	fb02 f203 	mul.w	r2, r2, r3
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	1acb      	subs	r3, r1, r3
 8001cb0:	fb92 f2f3 	sdiv	r2, r2, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4413      	add	r3, r2
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
	...

08001cc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001cc4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001cc6:	e003      	b.n	8001cd0 <LoopCopyDataInit>

08001cc8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001cca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ccc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001cce:	3104      	adds	r1, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001cd0:	480a      	ldr	r0, [pc, #40]	; (8001cfc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001cd4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001cd6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001cd8:	d3f6      	bcc.n	8001cc8 <CopyDataInit>
  ldr r2, =_sbss
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001cdc:	e002      	b.n	8001ce4 <LoopFillZerobss>

08001cde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ce0:	f842 3b04 	str.w	r3, [r2], #4

08001ce4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001ce6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ce8:	d3f9      	bcc.n	8001cde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cea:	f7ff ff87 	bl	8001bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cee:	f008 fdd3 	bl	800a898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cf2:	f7fe fe5f 	bl	80009b4 <main>
  bx lr
 8001cf6:	4770      	bx	lr
  ldr r3, =_sidata
 8001cf8:	0800aa98 	.word	0x0800aa98
  ldr r0, =_sdata
 8001cfc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d00:	20000220 	.word	0x20000220
  ldr r2, =_sbss
 8001d04:	20000220 	.word	0x20000220
  ldr r3, = _ebss
 8001d08:	200046b4 	.word	0x200046b4

08001d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC1_2_IRQHandler>
	...

08001d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_Init+0x28>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_Init+0x28>)
 8001d1a:	f043 0310 	orr.w	r3, r3, #16
 8001d1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 faed 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff feb4 	bl	8001a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2c:	f7ff fb94 	bl	8001458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40022000 	.word	0x40022000

08001d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_IncTick+0x1c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_IncTick+0x20>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a03      	ldr	r2, [pc, #12]	; (8001d5c <HAL_IncTick+0x20>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	200000c8 	.word	0x200000c8
 8001d5c:	20003f74 	.word	0x20003f74

08001d60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return uwTick;
 8001d64:	4b02      	ldr	r3, [pc, #8]	; (8001d70 <HAL_GetTick+0x10>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	20003f74 	.word	0x20003f74

08001d74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0ce      	b.n	8001f34 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff fb88 	bl	80014c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f9bd 	bl	8002138 <ADC_ConversionStop_Disable>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f040 80a9 	bne.w	8001f22 <HAL_ADC_Init+0x1ae>
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 80a5 	bne.w	8001f22 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001de0:	f023 0302 	bic.w	r3, r3, #2
 8001de4:	f043 0202 	orr.w	r2, r3, #2
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4951      	ldr	r1, [pc, #324]	; (8001f3c <HAL_ADC_Init+0x1c8>)
 8001df6:	428b      	cmp	r3, r1
 8001df8:	d10a      	bne.n	8001e10 <HAL_ADC_Init+0x9c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e02:	d002      	beq.n	8001e0a <HAL_ADC_Init+0x96>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	e004      	b.n	8001e14 <HAL_ADC_Init+0xa0>
 8001e0a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e0e:	e001      	b.n	8001e14 <HAL_ADC_Init+0xa0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7b1b      	ldrb	r3, [r3, #12]
 8001e1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e2c:	d003      	beq.n	8001e36 <HAL_ADC_Init+0xc2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d102      	bne.n	8001e3c <HAL_ADC_Init+0xc8>
 8001e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e3a:	e000      	b.n	8001e3e <HAL_ADC_Init+0xca>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7d1b      	ldrb	r3, [r3, #20]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d119      	bne.n	8001e80 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7b1b      	ldrb	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	035a      	lsls	r2, r3, #13
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	e00b      	b.n	8001e80 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	f043 0220 	orr.w	r2, r3, #32
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <HAL_ADC_Init+0x1cc>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	68b9      	ldr	r1, [r7, #8]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eb0:	d003      	beq.n	8001eba <HAL_ADC_Init+0x146>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d104      	bne.n	8001ec4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	051b      	lsls	r3, r3, #20
 8001ec2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_ADC_Init+0x1d0>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d10b      	bne.n	8001f00 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001efe:	e018      	b.n	8001f32 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	f023 0312 	bic.w	r3, r3, #18
 8001f08:	f043 0210 	orr.w	r2, r3, #16
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	f043 0201 	orr.w	r2, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f20:	e007      	b.n	8001f32 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	f043 0210 	orr.w	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40013c00 	.word	0x40013c00
 8001f40:	ffe1f7fd 	.word	0xffe1f7fd
 8001f44:	ff1f0efe 	.word	0xff1f0efe

08001f48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x20>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e0dc      	b.n	8002122 <HAL_ADC_ConfigChannel+0x1da>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b06      	cmp	r3, #6
 8001f76:	d81c      	bhi.n	8001fb2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	3b05      	subs	r3, #5
 8001f8a:	221f      	movs	r2, #31
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4019      	ands	r1, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b05      	subs	r3, #5
 8001fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	635a      	str	r2, [r3, #52]	; 0x34
 8001fb0:	e03c      	b.n	800202c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d81c      	bhi.n	8001ff4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	3b23      	subs	r3, #35	; 0x23
 8001fcc:	221f      	movs	r2, #31
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	4019      	ands	r1, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3b23      	subs	r3, #35	; 0x23
 8001fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff2:	e01b      	b.n	800202c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	3b41      	subs	r3, #65	; 0x41
 8002006:	221f      	movs	r2, #31
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	4019      	ands	r1, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	3b41      	subs	r3, #65	; 0x41
 8002020:	fa00 f203 	lsl.w	r2, r0, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b09      	cmp	r3, #9
 8002032:	d91c      	bls.n	800206e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68d9      	ldr	r1, [r3, #12]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	3b1e      	subs	r3, #30
 8002046:	2207      	movs	r2, #7
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	4019      	ands	r1, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6898      	ldr	r0, [r3, #8]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	3b1e      	subs	r3, #30
 8002060:	fa00 f203 	lsl.w	r2, r0, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	e019      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6919      	ldr	r1, [r3, #16]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	2207      	movs	r2, #7
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	4019      	ands	r1, r3
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6898      	ldr	r0, [r3, #8]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	fa00 f203 	lsl.w	r2, r0, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d003      	beq.n	80020b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020ae:	2b11      	cmp	r3, #17
 80020b0:	d132      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1d      	ldr	r2, [pc, #116]	; (800212c <HAL_ADC_ConfigChannel+0x1e4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d125      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d126      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020d8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b10      	cmp	r3, #16
 80020e0:	d11a      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_ADC_ConfigChannel+0x1e8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a13      	ldr	r2, [pc, #76]	; (8002134 <HAL_ADC_ConfigChannel+0x1ec>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	0c9a      	lsrs	r2, r3, #18
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020f8:	e002      	b.n	8002100 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f9      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x1b2>
 8002106:	e007      	b.n	8002118 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	f043 0220 	orr.w	r2, r3, #32
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	40012400 	.word	0x40012400
 8002130:	200000c0 	.word	0x200000c0
 8002134:	431bde83 	.word	0x431bde83

08002138 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b01      	cmp	r3, #1
 8002150:	d127      	bne.n	80021a2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0201 	bic.w	r2, r2, #1
 8002160:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002162:	f7ff fdfd 	bl	8001d60 <HAL_GetTick>
 8002166:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002168:	e014      	b.n	8002194 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800216a:	f7ff fdf9 	bl	8001d60 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d90d      	bls.n	8002194 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	f043 0210 	orr.w	r2, r3, #16
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	f043 0201 	orr.w	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e007      	b.n	80021a4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d0e3      	beq.n	800216a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021de:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60d3      	str	r3, [r2, #12]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <__NVIC_GetPriorityGrouping+0x18>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 0307 	and.w	r3, r3, #7
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db0b      	blt.n	800223a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	4906      	ldr	r1, [pc, #24]	; (8002244 <__NVIC_EnableIRQ+0x34>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2001      	movs	r0, #1
 8002232:	fa00 f202 	lsl.w	r2, r0, r2
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100

08002248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	2b00      	cmp	r3, #0
 800225a:	db0a      	blt.n	8002272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	490c      	ldr	r1, [pc, #48]	; (8002294 <__NVIC_SetPriority+0x4c>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	0112      	lsls	r2, r2, #4
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	440b      	add	r3, r1
 800226c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002270:	e00a      	b.n	8002288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4908      	ldr	r1, [pc, #32]	; (8002298 <__NVIC_SetPriority+0x50>)
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	3b04      	subs	r3, #4
 8002280:	0112      	lsls	r2, r2, #4
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	440b      	add	r3, r1
 8002286:	761a      	strb	r2, [r3, #24]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	; 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f1c3 0307 	rsb	r3, r3, #7
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	bf28      	it	cs
 80022ba:	2304      	movcs	r3, #4
 80022bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d902      	bls.n	80022cc <NVIC_EncodePriority+0x30>
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3b03      	subs	r3, #3
 80022ca:	e000      	b.n	80022ce <NVIC_EncodePriority+0x32>
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	43d9      	mvns	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	4313      	orrs	r3, r2
         );
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff4f 	bl	80021ac <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002328:	f7ff ff64 	bl	80021f4 <__NVIC_GetPriorityGrouping>
 800232c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ffb2 	bl	800229c <NVIC_EncodePriority>
 8002338:	4602      	mov	r2, r0
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff81 	bl	8002248 <__NVIC_SetPriority>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff57 	bl	8002210 <__NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e059      	b.n	8002436 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_DMA_Init+0xd4>)
 800238a:	429a      	cmp	r2, r3
 800238c:	d80f      	bhi.n	80023ae <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_DMA_Init+0xd8>)
 8002396:	4413      	add	r3, r2
 8002398:	4a2b      	ldr	r2, [pc, #172]	; (8002448 <HAL_DMA_Init+0xdc>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	009a      	lsls	r2, r3, #2
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a28      	ldr	r2, [pc, #160]	; (800244c <HAL_DMA_Init+0xe0>)
 80023aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80023ac:	e00e      	b.n	80023cc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b26      	ldr	r3, [pc, #152]	; (8002450 <HAL_DMA_Init+0xe4>)
 80023b6:	4413      	add	r3, r2
 80023b8:	4a23      	ldr	r2, [pc, #140]	; (8002448 <HAL_DMA_Init+0xdc>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	009a      	lsls	r2, r3, #2
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a22      	ldr	r2, [pc, #136]	; (8002454 <HAL_DMA_Init+0xe8>)
 80023ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	40020407 	.word	0x40020407
 8002444:	bffdfff8 	.word	0xbffdfff8
 8002448:	cccccccd 	.word	0xcccccccd
 800244c:	40020000 	.word	0x40020000
 8002450:	bffdfbf8 	.word	0xbffdfbf8
 8002454:	40020400 	.word	0x40020400

08002458 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800246a:	2b02      	cmp	r3, #2
 800246c:	d005      	beq.n	800247a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2204      	movs	r2, #4
 8002472:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e0d6      	b.n	8002628 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 020e 	bic.w	r2, r2, #14
 8002488:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	4b64      	ldr	r3, [pc, #400]	; (8002634 <HAL_DMA_Abort_IT+0x1dc>)
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d958      	bls.n	8002558 <HAL_DMA_Abort_IT+0x100>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a63      	ldr	r2, [pc, #396]	; (8002638 <HAL_DMA_Abort_IT+0x1e0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d04f      	beq.n	8002550 <HAL_DMA_Abort_IT+0xf8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a61      	ldr	r2, [pc, #388]	; (800263c <HAL_DMA_Abort_IT+0x1e4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d048      	beq.n	800254c <HAL_DMA_Abort_IT+0xf4>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a60      	ldr	r2, [pc, #384]	; (8002640 <HAL_DMA_Abort_IT+0x1e8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d040      	beq.n	8002546 <HAL_DMA_Abort_IT+0xee>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a5e      	ldr	r2, [pc, #376]	; (8002644 <HAL_DMA_Abort_IT+0x1ec>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d038      	beq.n	8002540 <HAL_DMA_Abort_IT+0xe8>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a5d      	ldr	r2, [pc, #372]	; (8002648 <HAL_DMA_Abort_IT+0x1f0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d030      	beq.n	800253a <HAL_DMA_Abort_IT+0xe2>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a5b      	ldr	r2, [pc, #364]	; (800264c <HAL_DMA_Abort_IT+0x1f4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d028      	beq.n	8002534 <HAL_DMA_Abort_IT+0xdc>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a53      	ldr	r2, [pc, #332]	; (8002634 <HAL_DMA_Abort_IT+0x1dc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d020      	beq.n	800252e <HAL_DMA_Abort_IT+0xd6>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a57      	ldr	r2, [pc, #348]	; (8002650 <HAL_DMA_Abort_IT+0x1f8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d019      	beq.n	800252a <HAL_DMA_Abort_IT+0xd2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a56      	ldr	r2, [pc, #344]	; (8002654 <HAL_DMA_Abort_IT+0x1fc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d012      	beq.n	8002526 <HAL_DMA_Abort_IT+0xce>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a54      	ldr	r2, [pc, #336]	; (8002658 <HAL_DMA_Abort_IT+0x200>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00a      	beq.n	8002520 <HAL_DMA_Abort_IT+0xc8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a53      	ldr	r2, [pc, #332]	; (800265c <HAL_DMA_Abort_IT+0x204>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d102      	bne.n	800251a <HAL_DMA_Abort_IT+0xc2>
 8002514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002518:	e01b      	b.n	8002552 <HAL_DMA_Abort_IT+0xfa>
 800251a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800251e:	e018      	b.n	8002552 <HAL_DMA_Abort_IT+0xfa>
 8002520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002524:	e015      	b.n	8002552 <HAL_DMA_Abort_IT+0xfa>
 8002526:	2310      	movs	r3, #16
 8002528:	e013      	b.n	8002552 <HAL_DMA_Abort_IT+0xfa>
 800252a:	2301      	movs	r3, #1
 800252c:	e011      	b.n	8002552 <HAL_DMA_Abort_IT+0xfa>
 800252e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002532:	e00e      	b.n	8002552 <HAL_DMA_Abort_IT+0xfa>
 8002534:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002538:	e00b      	b.n	8002552 <HAL_DMA_Abort_IT+0xfa>
 800253a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800253e:	e008      	b.n	8002552 <HAL_DMA_Abort_IT+0xfa>
 8002540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002544:	e005      	b.n	8002552 <HAL_DMA_Abort_IT+0xfa>
 8002546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800254a:	e002      	b.n	8002552 <HAL_DMA_Abort_IT+0xfa>
 800254c:	2310      	movs	r3, #16
 800254e:	e000      	b.n	8002552 <HAL_DMA_Abort_IT+0xfa>
 8002550:	2301      	movs	r3, #1
 8002552:	4a43      	ldr	r2, [pc, #268]	; (8002660 <HAL_DMA_Abort_IT+0x208>)
 8002554:	6053      	str	r3, [r2, #4]
 8002556:	e057      	b.n	8002608 <HAL_DMA_Abort_IT+0x1b0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a36      	ldr	r2, [pc, #216]	; (8002638 <HAL_DMA_Abort_IT+0x1e0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d04f      	beq.n	8002602 <HAL_DMA_Abort_IT+0x1aa>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a35      	ldr	r2, [pc, #212]	; (800263c <HAL_DMA_Abort_IT+0x1e4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d048      	beq.n	80025fe <HAL_DMA_Abort_IT+0x1a6>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a33      	ldr	r2, [pc, #204]	; (8002640 <HAL_DMA_Abort_IT+0x1e8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d040      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x1a0>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a32      	ldr	r2, [pc, #200]	; (8002644 <HAL_DMA_Abort_IT+0x1ec>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d038      	beq.n	80025f2 <HAL_DMA_Abort_IT+0x19a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a30      	ldr	r2, [pc, #192]	; (8002648 <HAL_DMA_Abort_IT+0x1f0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d030      	beq.n	80025ec <HAL_DMA_Abort_IT+0x194>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a2f      	ldr	r2, [pc, #188]	; (800264c <HAL_DMA_Abort_IT+0x1f4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d028      	beq.n	80025e6 <HAL_DMA_Abort_IT+0x18e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a26      	ldr	r2, [pc, #152]	; (8002634 <HAL_DMA_Abort_IT+0x1dc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d020      	beq.n	80025e0 <HAL_DMA_Abort_IT+0x188>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2b      	ldr	r2, [pc, #172]	; (8002650 <HAL_DMA_Abort_IT+0x1f8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d019      	beq.n	80025dc <HAL_DMA_Abort_IT+0x184>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a29      	ldr	r2, [pc, #164]	; (8002654 <HAL_DMA_Abort_IT+0x1fc>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d012      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x180>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a28      	ldr	r2, [pc, #160]	; (8002658 <HAL_DMA_Abort_IT+0x200>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00a      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x17a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a26      	ldr	r2, [pc, #152]	; (800265c <HAL_DMA_Abort_IT+0x204>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d102      	bne.n	80025cc <HAL_DMA_Abort_IT+0x174>
 80025c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ca:	e01b      	b.n	8002604 <HAL_DMA_Abort_IT+0x1ac>
 80025cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d0:	e018      	b.n	8002604 <HAL_DMA_Abort_IT+0x1ac>
 80025d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d6:	e015      	b.n	8002604 <HAL_DMA_Abort_IT+0x1ac>
 80025d8:	2310      	movs	r3, #16
 80025da:	e013      	b.n	8002604 <HAL_DMA_Abort_IT+0x1ac>
 80025dc:	2301      	movs	r3, #1
 80025de:	e011      	b.n	8002604 <HAL_DMA_Abort_IT+0x1ac>
 80025e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025e4:	e00e      	b.n	8002604 <HAL_DMA_Abort_IT+0x1ac>
 80025e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025ea:	e00b      	b.n	8002604 <HAL_DMA_Abort_IT+0x1ac>
 80025ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025f0:	e008      	b.n	8002604 <HAL_DMA_Abort_IT+0x1ac>
 80025f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f6:	e005      	b.n	8002604 <HAL_DMA_Abort_IT+0x1ac>
 80025f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025fc:	e002      	b.n	8002604 <HAL_DMA_Abort_IT+0x1ac>
 80025fe:	2310      	movs	r3, #16
 8002600:	e000      	b.n	8002604 <HAL_DMA_Abort_IT+0x1ac>
 8002602:	2301      	movs	r3, #1
 8002604:	4a17      	ldr	r2, [pc, #92]	; (8002664 <HAL_DMA_Abort_IT+0x20c>)
 8002606:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4798      	blx	r3
    } 
  }
  return status;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40020080 	.word	0x40020080
 8002638:	40020008 	.word	0x40020008
 800263c:	4002001c 	.word	0x4002001c
 8002640:	40020030 	.word	0x40020030
 8002644:	40020044 	.word	0x40020044
 8002648:	40020058 	.word	0x40020058
 800264c:	4002006c 	.word	0x4002006c
 8002650:	40020408 	.word	0x40020408
 8002654:	4002041c 	.word	0x4002041c
 8002658:	40020430 	.word	0x40020430
 800265c:	40020444 	.word	0x40020444
 8002660:	40020400 	.word	0x40020400
 8002664:	40020000 	.word	0x40020000

08002668 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	2204      	movs	r2, #4
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80d6 	beq.w	800283e <HAL_DMA_IRQHandler+0x1d6>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80d0 	beq.w	800283e <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d107      	bne.n	80026bc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0204 	bic.w	r2, r2, #4
 80026ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b9b      	ldr	r3, [pc, #620]	; (8002930 <HAL_DMA_IRQHandler+0x2c8>)
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d958      	bls.n	800277a <HAL_DMA_IRQHandler+0x112>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a99      	ldr	r2, [pc, #612]	; (8002934 <HAL_DMA_IRQHandler+0x2cc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d04f      	beq.n	8002772 <HAL_DMA_IRQHandler+0x10a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a98      	ldr	r2, [pc, #608]	; (8002938 <HAL_DMA_IRQHandler+0x2d0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d048      	beq.n	800276e <HAL_DMA_IRQHandler+0x106>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a96      	ldr	r2, [pc, #600]	; (800293c <HAL_DMA_IRQHandler+0x2d4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d040      	beq.n	8002768 <HAL_DMA_IRQHandler+0x100>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a95      	ldr	r2, [pc, #596]	; (8002940 <HAL_DMA_IRQHandler+0x2d8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d038      	beq.n	8002762 <HAL_DMA_IRQHandler+0xfa>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a93      	ldr	r2, [pc, #588]	; (8002944 <HAL_DMA_IRQHandler+0x2dc>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d030      	beq.n	800275c <HAL_DMA_IRQHandler+0xf4>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a92      	ldr	r2, [pc, #584]	; (8002948 <HAL_DMA_IRQHandler+0x2e0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d028      	beq.n	8002756 <HAL_DMA_IRQHandler+0xee>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a89      	ldr	r2, [pc, #548]	; (8002930 <HAL_DMA_IRQHandler+0x2c8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d020      	beq.n	8002750 <HAL_DMA_IRQHandler+0xe8>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a8e      	ldr	r2, [pc, #568]	; (800294c <HAL_DMA_IRQHandler+0x2e4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d019      	beq.n	800274c <HAL_DMA_IRQHandler+0xe4>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a8c      	ldr	r2, [pc, #560]	; (8002950 <HAL_DMA_IRQHandler+0x2e8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d012      	beq.n	8002748 <HAL_DMA_IRQHandler+0xe0>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a8b      	ldr	r2, [pc, #556]	; (8002954 <HAL_DMA_IRQHandler+0x2ec>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d00a      	beq.n	8002742 <HAL_DMA_IRQHandler+0xda>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a89      	ldr	r2, [pc, #548]	; (8002958 <HAL_DMA_IRQHandler+0x2f0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d102      	bne.n	800273c <HAL_DMA_IRQHandler+0xd4>
 8002736:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800273a:	e01b      	b.n	8002774 <HAL_DMA_IRQHandler+0x10c>
 800273c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002740:	e018      	b.n	8002774 <HAL_DMA_IRQHandler+0x10c>
 8002742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002746:	e015      	b.n	8002774 <HAL_DMA_IRQHandler+0x10c>
 8002748:	2340      	movs	r3, #64	; 0x40
 800274a:	e013      	b.n	8002774 <HAL_DMA_IRQHandler+0x10c>
 800274c:	2304      	movs	r3, #4
 800274e:	e011      	b.n	8002774 <HAL_DMA_IRQHandler+0x10c>
 8002750:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002754:	e00e      	b.n	8002774 <HAL_DMA_IRQHandler+0x10c>
 8002756:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800275a:	e00b      	b.n	8002774 <HAL_DMA_IRQHandler+0x10c>
 800275c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002760:	e008      	b.n	8002774 <HAL_DMA_IRQHandler+0x10c>
 8002762:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002766:	e005      	b.n	8002774 <HAL_DMA_IRQHandler+0x10c>
 8002768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800276c:	e002      	b.n	8002774 <HAL_DMA_IRQHandler+0x10c>
 800276e:	2340      	movs	r3, #64	; 0x40
 8002770:	e000      	b.n	8002774 <HAL_DMA_IRQHandler+0x10c>
 8002772:	2304      	movs	r3, #4
 8002774:	4a79      	ldr	r2, [pc, #484]	; (800295c <HAL_DMA_IRQHandler+0x2f4>)
 8002776:	6053      	str	r3, [r2, #4]
 8002778:	e057      	b.n	800282a <HAL_DMA_IRQHandler+0x1c2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a6d      	ldr	r2, [pc, #436]	; (8002934 <HAL_DMA_IRQHandler+0x2cc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d04f      	beq.n	8002824 <HAL_DMA_IRQHandler+0x1bc>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6b      	ldr	r2, [pc, #428]	; (8002938 <HAL_DMA_IRQHandler+0x2d0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d048      	beq.n	8002820 <HAL_DMA_IRQHandler+0x1b8>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6a      	ldr	r2, [pc, #424]	; (800293c <HAL_DMA_IRQHandler+0x2d4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d040      	beq.n	800281a <HAL_DMA_IRQHandler+0x1b2>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a68      	ldr	r2, [pc, #416]	; (8002940 <HAL_DMA_IRQHandler+0x2d8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d038      	beq.n	8002814 <HAL_DMA_IRQHandler+0x1ac>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a67      	ldr	r2, [pc, #412]	; (8002944 <HAL_DMA_IRQHandler+0x2dc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d030      	beq.n	800280e <HAL_DMA_IRQHandler+0x1a6>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a65      	ldr	r2, [pc, #404]	; (8002948 <HAL_DMA_IRQHandler+0x2e0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d028      	beq.n	8002808 <HAL_DMA_IRQHandler+0x1a0>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a5d      	ldr	r2, [pc, #372]	; (8002930 <HAL_DMA_IRQHandler+0x2c8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d020      	beq.n	8002802 <HAL_DMA_IRQHandler+0x19a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a61      	ldr	r2, [pc, #388]	; (800294c <HAL_DMA_IRQHandler+0x2e4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d019      	beq.n	80027fe <HAL_DMA_IRQHandler+0x196>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a60      	ldr	r2, [pc, #384]	; (8002950 <HAL_DMA_IRQHandler+0x2e8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d012      	beq.n	80027fa <HAL_DMA_IRQHandler+0x192>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a5e      	ldr	r2, [pc, #376]	; (8002954 <HAL_DMA_IRQHandler+0x2ec>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00a      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x18c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a5d      	ldr	r2, [pc, #372]	; (8002958 <HAL_DMA_IRQHandler+0x2f0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d102      	bne.n	80027ee <HAL_DMA_IRQHandler+0x186>
 80027e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027ec:	e01b      	b.n	8002826 <HAL_DMA_IRQHandler+0x1be>
 80027ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027f2:	e018      	b.n	8002826 <HAL_DMA_IRQHandler+0x1be>
 80027f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027f8:	e015      	b.n	8002826 <HAL_DMA_IRQHandler+0x1be>
 80027fa:	2340      	movs	r3, #64	; 0x40
 80027fc:	e013      	b.n	8002826 <HAL_DMA_IRQHandler+0x1be>
 80027fe:	2304      	movs	r3, #4
 8002800:	e011      	b.n	8002826 <HAL_DMA_IRQHandler+0x1be>
 8002802:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002806:	e00e      	b.n	8002826 <HAL_DMA_IRQHandler+0x1be>
 8002808:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800280c:	e00b      	b.n	8002826 <HAL_DMA_IRQHandler+0x1be>
 800280e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002812:	e008      	b.n	8002826 <HAL_DMA_IRQHandler+0x1be>
 8002814:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002818:	e005      	b.n	8002826 <HAL_DMA_IRQHandler+0x1be>
 800281a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800281e:	e002      	b.n	8002826 <HAL_DMA_IRQHandler+0x1be>
 8002820:	2340      	movs	r3, #64	; 0x40
 8002822:	e000      	b.n	8002826 <HAL_DMA_IRQHandler+0x1be>
 8002824:	2304      	movs	r3, #4
 8002826:	4a4e      	ldr	r2, [pc, #312]	; (8002960 <HAL_DMA_IRQHandler+0x2f8>)
 8002828:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8136 	beq.w	8002aa0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800283c:	e130      	b.n	8002aa0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	2202      	movs	r2, #2
 8002844:	409a      	lsls	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4013      	ands	r3, r2
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80f8 	beq.w	8002a40 <HAL_DMA_IRQHandler+0x3d8>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80f2 	beq.w	8002a40 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10b      	bne.n	8002882 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 020a 	bic.w	r2, r2, #10
 8002878:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	4b29      	ldr	r3, [pc, #164]	; (8002930 <HAL_DMA_IRQHandler+0x2c8>)
 800288a:	429a      	cmp	r2, r3
 800288c:	d973      	bls.n	8002976 <HAL_DMA_IRQHandler+0x30e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a28      	ldr	r2, [pc, #160]	; (8002934 <HAL_DMA_IRQHandler+0x2cc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d06a      	beq.n	800296e <HAL_DMA_IRQHandler+0x306>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a26      	ldr	r2, [pc, #152]	; (8002938 <HAL_DMA_IRQHandler+0x2d0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d063      	beq.n	800296a <HAL_DMA_IRQHandler+0x302>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a25      	ldr	r2, [pc, #148]	; (800293c <HAL_DMA_IRQHandler+0x2d4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d05b      	beq.n	8002964 <HAL_DMA_IRQHandler+0x2fc>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a23      	ldr	r2, [pc, #140]	; (8002940 <HAL_DMA_IRQHandler+0x2d8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d038      	beq.n	8002928 <HAL_DMA_IRQHandler+0x2c0>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a22      	ldr	r2, [pc, #136]	; (8002944 <HAL_DMA_IRQHandler+0x2dc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d030      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ba>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a20      	ldr	r2, [pc, #128]	; (8002948 <HAL_DMA_IRQHandler+0x2e0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d028      	beq.n	800291c <HAL_DMA_IRQHandler+0x2b4>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a18      	ldr	r2, [pc, #96]	; (8002930 <HAL_DMA_IRQHandler+0x2c8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d020      	beq.n	8002916 <HAL_DMA_IRQHandler+0x2ae>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1c      	ldr	r2, [pc, #112]	; (800294c <HAL_DMA_IRQHandler+0x2e4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d019      	beq.n	8002912 <HAL_DMA_IRQHandler+0x2aa>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <HAL_DMA_IRQHandler+0x2e8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d012      	beq.n	800290e <HAL_DMA_IRQHandler+0x2a6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a19      	ldr	r2, [pc, #100]	; (8002954 <HAL_DMA_IRQHandler+0x2ec>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00a      	beq.n	8002908 <HAL_DMA_IRQHandler+0x2a0>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a18      	ldr	r2, [pc, #96]	; (8002958 <HAL_DMA_IRQHandler+0x2f0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d102      	bne.n	8002902 <HAL_DMA_IRQHandler+0x29a>
 80028fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002900:	e036      	b.n	8002970 <HAL_DMA_IRQHandler+0x308>
 8002902:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002906:	e033      	b.n	8002970 <HAL_DMA_IRQHandler+0x308>
 8002908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800290c:	e030      	b.n	8002970 <HAL_DMA_IRQHandler+0x308>
 800290e:	2320      	movs	r3, #32
 8002910:	e02e      	b.n	8002970 <HAL_DMA_IRQHandler+0x308>
 8002912:	2302      	movs	r3, #2
 8002914:	e02c      	b.n	8002970 <HAL_DMA_IRQHandler+0x308>
 8002916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291a:	e029      	b.n	8002970 <HAL_DMA_IRQHandler+0x308>
 800291c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002920:	e026      	b.n	8002970 <HAL_DMA_IRQHandler+0x308>
 8002922:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002926:	e023      	b.n	8002970 <HAL_DMA_IRQHandler+0x308>
 8002928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800292c:	e020      	b.n	8002970 <HAL_DMA_IRQHandler+0x308>
 800292e:	bf00      	nop
 8002930:	40020080 	.word	0x40020080
 8002934:	40020008 	.word	0x40020008
 8002938:	4002001c 	.word	0x4002001c
 800293c:	40020030 	.word	0x40020030
 8002940:	40020044 	.word	0x40020044
 8002944:	40020058 	.word	0x40020058
 8002948:	4002006c 	.word	0x4002006c
 800294c:	40020408 	.word	0x40020408
 8002950:	4002041c 	.word	0x4002041c
 8002954:	40020430 	.word	0x40020430
 8002958:	40020444 	.word	0x40020444
 800295c:	40020400 	.word	0x40020400
 8002960:	40020000 	.word	0x40020000
 8002964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002968:	e002      	b.n	8002970 <HAL_DMA_IRQHandler+0x308>
 800296a:	2320      	movs	r3, #32
 800296c:	e000      	b.n	8002970 <HAL_DMA_IRQHandler+0x308>
 800296e:	2302      	movs	r3, #2
 8002970:	4a4e      	ldr	r2, [pc, #312]	; (8002aac <HAL_DMA_IRQHandler+0x444>)
 8002972:	6053      	str	r3, [r2, #4]
 8002974:	e057      	b.n	8002a26 <HAL_DMA_IRQHandler+0x3be>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a4d      	ldr	r2, [pc, #308]	; (8002ab0 <HAL_DMA_IRQHandler+0x448>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d04f      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x3b8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a4b      	ldr	r2, [pc, #300]	; (8002ab4 <HAL_DMA_IRQHandler+0x44c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d048      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x3b4>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a4a      	ldr	r2, [pc, #296]	; (8002ab8 <HAL_DMA_IRQHandler+0x450>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d040      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3ae>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a48      	ldr	r2, [pc, #288]	; (8002abc <HAL_DMA_IRQHandler+0x454>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d038      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x3a8>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a47      	ldr	r2, [pc, #284]	; (8002ac0 <HAL_DMA_IRQHandler+0x458>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d030      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x3a2>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a45      	ldr	r2, [pc, #276]	; (8002ac4 <HAL_DMA_IRQHandler+0x45c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d028      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x39c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a44      	ldr	r2, [pc, #272]	; (8002ac8 <HAL_DMA_IRQHandler+0x460>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d020      	beq.n	80029fe <HAL_DMA_IRQHandler+0x396>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a42      	ldr	r2, [pc, #264]	; (8002acc <HAL_DMA_IRQHandler+0x464>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d019      	beq.n	80029fa <HAL_DMA_IRQHandler+0x392>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a41      	ldr	r2, [pc, #260]	; (8002ad0 <HAL_DMA_IRQHandler+0x468>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d012      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x38e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a3f      	ldr	r2, [pc, #252]	; (8002ad4 <HAL_DMA_IRQHandler+0x46c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00a      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x388>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a3e      	ldr	r2, [pc, #248]	; (8002ad8 <HAL_DMA_IRQHandler+0x470>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d102      	bne.n	80029ea <HAL_DMA_IRQHandler+0x382>
 80029e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029e8:	e01b      	b.n	8002a22 <HAL_DMA_IRQHandler+0x3ba>
 80029ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ee:	e018      	b.n	8002a22 <HAL_DMA_IRQHandler+0x3ba>
 80029f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f4:	e015      	b.n	8002a22 <HAL_DMA_IRQHandler+0x3ba>
 80029f6:	2320      	movs	r3, #32
 80029f8:	e013      	b.n	8002a22 <HAL_DMA_IRQHandler+0x3ba>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e011      	b.n	8002a22 <HAL_DMA_IRQHandler+0x3ba>
 80029fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a02:	e00e      	b.n	8002a22 <HAL_DMA_IRQHandler+0x3ba>
 8002a04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a08:	e00b      	b.n	8002a22 <HAL_DMA_IRQHandler+0x3ba>
 8002a0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0e:	e008      	b.n	8002a22 <HAL_DMA_IRQHandler+0x3ba>
 8002a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a14:	e005      	b.n	8002a22 <HAL_DMA_IRQHandler+0x3ba>
 8002a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a1a:	e002      	b.n	8002a22 <HAL_DMA_IRQHandler+0x3ba>
 8002a1c:	2320      	movs	r3, #32
 8002a1e:	e000      	b.n	8002a22 <HAL_DMA_IRQHandler+0x3ba>
 8002a20:	2302      	movs	r3, #2
 8002a22:	4a2e      	ldr	r2, [pc, #184]	; (8002adc <HAL_DMA_IRQHandler+0x474>)
 8002a24:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d034      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a3e:	e02f      	b.n	8002aa0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	2208      	movs	r2, #8
 8002a46:	409a      	lsls	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d028      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x43a>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d023      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 020e 	bic.w	r2, r2, #14
 8002a68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f202 	lsl.w	r2, r1, r2
 8002a78:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d004      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
    }
  }
  return;
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
}
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	40020008 	.word	0x40020008
 8002ab4:	4002001c 	.word	0x4002001c
 8002ab8:	40020030 	.word	0x40020030
 8002abc:	40020044 	.word	0x40020044
 8002ac0:	40020058 	.word	0x40020058
 8002ac4:	4002006c 	.word	0x4002006c
 8002ac8:	40020080 	.word	0x40020080
 8002acc:	40020408 	.word	0x40020408
 8002ad0:	4002041c 	.word	0x4002041c
 8002ad4:	40020430 	.word	0x40020430
 8002ad8:	40020444 	.word	0x40020444
 8002adc:	40020000 	.word	0x40020000

08002ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b08b      	sub	sp, #44	; 0x2c
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002aee:	2300      	movs	r3, #0
 8002af0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af2:	e133      	b.n	8002d5c <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002af4:	2201      	movs	r2, #1
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f040 8122 	bne.w	8002d56 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b12      	cmp	r3, #18
 8002b18:	d034      	beq.n	8002b84 <HAL_GPIO_Init+0xa4>
 8002b1a:	2b12      	cmp	r3, #18
 8002b1c:	d80d      	bhi.n	8002b3a <HAL_GPIO_Init+0x5a>
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d02b      	beq.n	8002b7a <HAL_GPIO_Init+0x9a>
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d804      	bhi.n	8002b30 <HAL_GPIO_Init+0x50>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d031      	beq.n	8002b8e <HAL_GPIO_Init+0xae>
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d01c      	beq.n	8002b68 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b2e:	e048      	b.n	8002bc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d043      	beq.n	8002bbc <HAL_GPIO_Init+0xdc>
 8002b34:	2b11      	cmp	r3, #17
 8002b36:	d01b      	beq.n	8002b70 <HAL_GPIO_Init+0x90>
          break;
 8002b38:	e043      	b.n	8002bc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b3a:	4a8f      	ldr	r2, [pc, #572]	; (8002d78 <HAL_GPIO_Init+0x298>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d026      	beq.n	8002b8e <HAL_GPIO_Init+0xae>
 8002b40:	4a8d      	ldr	r2, [pc, #564]	; (8002d78 <HAL_GPIO_Init+0x298>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d806      	bhi.n	8002b54 <HAL_GPIO_Init+0x74>
 8002b46:	4a8d      	ldr	r2, [pc, #564]	; (8002d7c <HAL_GPIO_Init+0x29c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d020      	beq.n	8002b8e <HAL_GPIO_Init+0xae>
 8002b4c:	4a8c      	ldr	r2, [pc, #560]	; (8002d80 <HAL_GPIO_Init+0x2a0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01d      	beq.n	8002b8e <HAL_GPIO_Init+0xae>
          break;
 8002b52:	e036      	b.n	8002bc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b54:	4a8b      	ldr	r2, [pc, #556]	; (8002d84 <HAL_GPIO_Init+0x2a4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d019      	beq.n	8002b8e <HAL_GPIO_Init+0xae>
 8002b5a:	4a8b      	ldr	r2, [pc, #556]	; (8002d88 <HAL_GPIO_Init+0x2a8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d016      	beq.n	8002b8e <HAL_GPIO_Init+0xae>
 8002b60:	4a8a      	ldr	r2, [pc, #552]	; (8002d8c <HAL_GPIO_Init+0x2ac>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <HAL_GPIO_Init+0xae>
          break;
 8002b66:	e02c      	b.n	8002bc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	623b      	str	r3, [r7, #32]
          break;
 8002b6e:	e028      	b.n	8002bc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	3304      	adds	r3, #4
 8002b76:	623b      	str	r3, [r7, #32]
          break;
 8002b78:	e023      	b.n	8002bc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	3308      	adds	r3, #8
 8002b80:	623b      	str	r3, [r7, #32]
          break;
 8002b82:	e01e      	b.n	8002bc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	623b      	str	r3, [r7, #32]
          break;
 8002b8c:	e019      	b.n	8002bc2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b96:	2304      	movs	r3, #4
 8002b98:	623b      	str	r3, [r7, #32]
          break;
 8002b9a:	e012      	b.n	8002bc2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	611a      	str	r2, [r3, #16]
          break;
 8002bae:	e008      	b.n	8002bc2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	615a      	str	r2, [r3, #20]
          break;
 8002bba:	e002      	b.n	8002bc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	623b      	str	r3, [r7, #32]
          break;
 8002bc0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2bff      	cmp	r3, #255	; 0xff
 8002bc6:	d801      	bhi.n	8002bcc <HAL_GPIO_Init+0xec>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	e001      	b.n	8002bd0 <HAL_GPIO_Init+0xf0>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	2bff      	cmp	r3, #255	; 0xff
 8002bd6:	d802      	bhi.n	8002bde <HAL_GPIO_Init+0xfe>
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	e002      	b.n	8002be4 <HAL_GPIO_Init+0x104>
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	3b08      	subs	r3, #8
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	210f      	movs	r1, #15
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	6a39      	ldr	r1, [r7, #32]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a2 	beq.w	8002d56 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c12:	4b5f      	ldr	r3, [pc, #380]	; (8002d90 <HAL_GPIO_Init+0x2b0>)
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	4a5e      	ldr	r2, [pc, #376]	; (8002d90 <HAL_GPIO_Init+0x2b0>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6193      	str	r3, [r2, #24]
 8002c1e:	4b5c      	ldr	r3, [pc, #368]	; (8002d90 <HAL_GPIO_Init+0x2b0>)
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c2a:	4a5a      	ldr	r2, [pc, #360]	; (8002d94 <HAL_GPIO_Init+0x2b4>)
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3302      	adds	r3, #2
 8002c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c36:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	220f      	movs	r2, #15
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a51      	ldr	r2, [pc, #324]	; (8002d98 <HAL_GPIO_Init+0x2b8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01f      	beq.n	8002c96 <HAL_GPIO_Init+0x1b6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a50      	ldr	r2, [pc, #320]	; (8002d9c <HAL_GPIO_Init+0x2bc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d019      	beq.n	8002c92 <HAL_GPIO_Init+0x1b2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a4f      	ldr	r2, [pc, #316]	; (8002da0 <HAL_GPIO_Init+0x2c0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0x1ae>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4e      	ldr	r2, [pc, #312]	; (8002da4 <HAL_GPIO_Init+0x2c4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00d      	beq.n	8002c8a <HAL_GPIO_Init+0x1aa>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4d      	ldr	r2, [pc, #308]	; (8002da8 <HAL_GPIO_Init+0x2c8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0x1a6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4c      	ldr	r2, [pc, #304]	; (8002dac <HAL_GPIO_Init+0x2cc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_GPIO_Init+0x1a2>
 8002c7e:	2305      	movs	r3, #5
 8002c80:	e00a      	b.n	8002c98 <HAL_GPIO_Init+0x1b8>
 8002c82:	2306      	movs	r3, #6
 8002c84:	e008      	b.n	8002c98 <HAL_GPIO_Init+0x1b8>
 8002c86:	2304      	movs	r3, #4
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_Init+0x1b8>
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e004      	b.n	8002c98 <HAL_GPIO_Init+0x1b8>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e002      	b.n	8002c98 <HAL_GPIO_Init+0x1b8>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_GPIO_Init+0x1b8>
 8002c96:	2300      	movs	r3, #0
 8002c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9a:	f002 0203 	and.w	r2, r2, #3
 8002c9e:	0092      	lsls	r2, r2, #2
 8002ca0:	4093      	lsls	r3, r2
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ca8:	493a      	ldr	r1, [pc, #232]	; (8002d94 <HAL_GPIO_Init+0x2b4>)
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	3302      	adds	r3, #2
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cc2:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	493a      	ldr	r1, [pc, #232]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]
 8002cce:	e006      	b.n	8002cde <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cd0:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	4935      	ldr	r1, [pc, #212]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cea:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	4930      	ldr	r1, [pc, #192]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]
 8002cf6:	e006      	b.n	8002d06 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cf8:	4b2d      	ldr	r3, [pc, #180]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	492b      	ldr	r1, [pc, #172]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d006      	beq.n	8002d20 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d12:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	4926      	ldr	r1, [pc, #152]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
 8002d1e:	e006      	b.n	8002d2e <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d20:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	4921      	ldr	r1, [pc, #132]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	491c      	ldr	r1, [pc, #112]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60cb      	str	r3, [r1, #12]
 8002d46:	e006      	b.n	8002d56 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	4917      	ldr	r1, [pc, #92]	; (8002db0 <HAL_GPIO_Init+0x2d0>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	3301      	adds	r3, #1
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	fa22 f303 	lsr.w	r3, r2, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f47f aec4 	bne.w	8002af4 <HAL_GPIO_Init+0x14>
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	372c      	adds	r7, #44	; 0x2c
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	10210000 	.word	0x10210000
 8002d7c:	10110000 	.word	0x10110000
 8002d80:	10120000 	.word	0x10120000
 8002d84:	10310000 	.word	0x10310000
 8002d88:	10320000 	.word	0x10320000
 8002d8c:	10220000 	.word	0x10220000
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40010000 	.word	0x40010000
 8002d98:	40010800 	.word	0x40010800
 8002d9c:	40010c00 	.word	0x40010c00
 8002da0:	40011000 	.word	0x40011000
 8002da4:	40011400 	.word	0x40011400
 8002da8:	40011800 	.word	0x40011800
 8002dac:	40011c00 	.word	0x40011c00
 8002db0:	40010400 	.word	0x40010400

08002db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	807b      	strh	r3, [r7, #2]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dc4:	787b      	ldrb	r3, [r7, #1]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dca:	887a      	ldrh	r2, [r7, #2]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dd0:	e003      	b.n	8002dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dd2:	887b      	ldrh	r3, [r7, #2]
 8002dd4:	041a      	lsls	r2, r3, #16
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	611a      	str	r2, [r3, #16]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dee:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d006      	beq.n	8002e08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dfa:	4a05      	ldr	r2, [pc, #20]	; (8002e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f806 	bl	8002e14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40010400 	.word	0x40010400

08002e14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e10f      	b.n	800305a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe fbe4 	bl	800161c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2224      	movs	r2, #36	; 0x24
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e6c:	f001 feb8 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 8002e70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4a7b      	ldr	r2, [pc, #492]	; (8003064 <HAL_I2C_Init+0x23c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d807      	bhi.n	8002e8c <HAL_I2C_Init+0x64>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4a7a      	ldr	r2, [pc, #488]	; (8003068 <HAL_I2C_Init+0x240>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	bf94      	ite	ls
 8002e84:	2301      	movls	r3, #1
 8002e86:	2300      	movhi	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e006      	b.n	8002e9a <HAL_I2C_Init+0x72>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a77      	ldr	r2, [pc, #476]	; (800306c <HAL_I2C_Init+0x244>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	bf94      	ite	ls
 8002e94:	2301      	movls	r3, #1
 8002e96:	2300      	movhi	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e0db      	b.n	800305a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4a72      	ldr	r2, [pc, #456]	; (8003070 <HAL_I2C_Init+0x248>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	0c9b      	lsrs	r3, r3, #18
 8002eac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4a64      	ldr	r2, [pc, #400]	; (8003064 <HAL_I2C_Init+0x23c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d802      	bhi.n	8002edc <HAL_I2C_Init+0xb4>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	e009      	b.n	8002ef0 <HAL_I2C_Init+0xc8>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	4a63      	ldr	r2, [pc, #396]	; (8003074 <HAL_I2C_Init+0x24c>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	099b      	lsrs	r3, r3, #6
 8002eee:	3301      	adds	r3, #1
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4956      	ldr	r1, [pc, #344]	; (8003064 <HAL_I2C_Init+0x23c>)
 8002f0c:	428b      	cmp	r3, r1
 8002f0e:	d80d      	bhi.n	8002f2c <HAL_I2C_Init+0x104>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1e59      	subs	r1, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	bf38      	it	cc
 8002f28:	2304      	movcc	r3, #4
 8002f2a:	e04f      	b.n	8002fcc <HAL_I2C_Init+0x1a4>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d111      	bne.n	8002f58 <HAL_I2C_Init+0x130>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1e58      	subs	r0, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	440b      	add	r3, r1
 8002f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	e012      	b.n	8002f7e <HAL_I2C_Init+0x156>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1e58      	subs	r0, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	0099      	lsls	r1, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Init+0x15e>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e022      	b.n	8002fcc <HAL_I2C_Init+0x1a4>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10e      	bne.n	8002fac <HAL_I2C_Init+0x184>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1e58      	subs	r0, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	460b      	mov	r3, r1
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	440b      	add	r3, r1
 8002f9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002faa:	e00f      	b.n	8002fcc <HAL_I2C_Init+0x1a4>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e58      	subs	r0, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	0099      	lsls	r1, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	6809      	ldr	r1, [r1, #0]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ffa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6911      	ldr	r1, [r2, #16]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68d2      	ldr	r2, [r2, #12]
 8003006:	4311      	orrs	r1, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	430b      	orrs	r3, r1
 800300e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	000186a0 	.word	0x000186a0
 8003068:	001e847f 	.word	0x001e847f
 800306c:	003d08ff 	.word	0x003d08ff
 8003070:	431bde83 	.word	0x431bde83
 8003074:	10624dd3 	.word	0x10624dd3

08003078 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	461a      	mov	r2, r3
 8003084:	460b      	mov	r3, r1
 8003086:	817b      	strh	r3, [r7, #10]
 8003088:	4613      	mov	r3, r2
 800308a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800308c:	f7fe fe68 	bl	8001d60 <HAL_GetTick>
 8003090:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b20      	cmp	r3, #32
 800309c:	f040 80e0 	bne.w	8003260 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	2319      	movs	r3, #25
 80030a6:	2201      	movs	r2, #1
 80030a8:	4970      	ldr	r1, [pc, #448]	; (800326c <HAL_I2C_Master_Transmit+0x1f4>)
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f958 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
 80030b8:	e0d3      	b.n	8003262 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_I2C_Master_Transmit+0x50>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e0cc      	b.n	8003262 <HAL_I2C_Master_Transmit+0x1ea>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d007      	beq.n	80030ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2221      	movs	r2, #33	; 0x21
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2210      	movs	r2, #16
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	893a      	ldrh	r2, [r7, #8]
 800311e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4a50      	ldr	r2, [pc, #320]	; (8003270 <HAL_I2C_Master_Transmit+0x1f8>)
 800312e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003130:	8979      	ldrh	r1, [r7, #10]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	6a3a      	ldr	r2, [r7, #32]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f89c 	bl	8003274 <I2C_MasterRequestWrite>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e08d      	b.n	8003262 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800315c:	e066      	b.n	800322c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	6a39      	ldr	r1, [r7, #32]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f9d2 	bl	800350c <I2C_WaitOnTXEFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00d      	beq.n	800318a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b04      	cmp	r3, #4
 8003174:	d107      	bne.n	8003186 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003184:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e06b      	b.n	8003262 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	781a      	ldrb	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d11b      	bne.n	8003200 <HAL_I2C_Master_Transmit+0x188>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d017      	beq.n	8003200 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	781a      	ldrb	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	6a39      	ldr	r1, [r7, #32]
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f9c2 	bl	800358e <I2C_WaitOnBTFFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00d      	beq.n	800322c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	2b04      	cmp	r3, #4
 8003216:	d107      	bne.n	8003228 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003226:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e01a      	b.n	8003262 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	2b00      	cmp	r3, #0
 8003232:	d194      	bne.n	800315e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	e000      	b.n	8003262 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003260:	2302      	movs	r3, #2
  }
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	00100002 	.word	0x00100002
 8003270:	ffff0000 	.word	0xffff0000

08003274 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	460b      	mov	r3, r1
 8003282:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d006      	beq.n	800329e <I2C_MasterRequestWrite+0x2a>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d003      	beq.n	800329e <I2C_MasterRequestWrite+0x2a>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800329c:	d108      	bne.n	80032b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e00b      	b.n	80032c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	2b12      	cmp	r3, #18
 80032b6:	d107      	bne.n	80032c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f843 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e035      	b.n	8003350 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ec:	d108      	bne.n	8003300 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ee:	897b      	ldrh	r3, [r7, #10]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032fc:	611a      	str	r2, [r3, #16]
 80032fe:	e01b      	b.n	8003338 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003300:	897b      	ldrh	r3, [r7, #10]
 8003302:	11db      	asrs	r3, r3, #7
 8003304:	b2db      	uxtb	r3, r3
 8003306:	f003 0306 	and.w	r3, r3, #6
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f063 030f 	orn	r3, r3, #15
 8003310:	b2da      	uxtb	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	490e      	ldr	r1, [pc, #56]	; (8003358 <I2C_MasterRequestWrite+0xe4>)
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f875 	bl	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e010      	b.n	8003350 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800332e:	897b      	ldrh	r3, [r7, #10]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	4907      	ldr	r1, [pc, #28]	; (800335c <I2C_MasterRequestWrite+0xe8>)
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f865 	bl	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	00010008 	.word	0x00010008
 800335c:	00010002 	.word	0x00010002

08003360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003370:	e025      	b.n	80033be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d021      	beq.n	80033be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337a:	f7fe fcf1 	bl	8001d60 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d302      	bcc.n	8003390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d116      	bne.n	80033be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e023      	b.n	8003406 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d10d      	bne.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	43da      	mvns	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4013      	ands	r3, r2
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bf0c      	ite	eq
 80033da:	2301      	moveq	r3, #1
 80033dc:	2300      	movne	r3, #0
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	e00c      	b.n	80033fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4013      	ands	r3, r2
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf0c      	ite	eq
 80033f6:	2301      	moveq	r3, #1
 80033f8:	2300      	movne	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	429a      	cmp	r2, r3
 8003402:	d0b6      	beq.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800341c:	e051      	b.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342c:	d123      	bne.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003446:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f043 0204 	orr.w	r2, r3, #4
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e046      	b.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d021      	beq.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7fe fc6f 	bl	8001d60 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d116      	bne.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e020      	b.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	0c1b      	lsrs	r3, r3, #16
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d10c      	bne.n	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4013      	ands	r3, r2
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf14      	ite	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	2300      	moveq	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	e00b      	b.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d18d      	bne.n	800341e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003518:	e02d      	b.n	8003576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f878 	bl	8003610 <I2C_IsAcknowledgeFailed>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e02d      	b.n	8003586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d021      	beq.n	8003576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fe fc15 	bl	8001d60 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d116      	bne.n	8003576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e007      	b.n	8003586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d1ca      	bne.n	800351a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800359a:	e02d      	b.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f837 	bl	8003610 <I2C_IsAcknowledgeFailed>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e02d      	b.n	8003608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d021      	beq.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b4:	f7fe fbd4 	bl	8001d60 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d302      	bcc.n	80035ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d116      	bne.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e007      	b.n	8003608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d1ca      	bne.n	800359c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003626:	d11b      	bne.n	8003660 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003630:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	f043 0204 	orr.w	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800366c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800366e:	b08b      	sub	sp, #44	; 0x2c
 8003670:	af06      	add	r7, sp, #24
 8003672:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0d3      	b.n	8003826 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f006 feea 	bl	800a46c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2203      	movs	r2, #3
 800369c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f002 ff12 	bl	80064ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	687e      	ldr	r6, [r7, #4]
 80036b2:	466d      	mov	r5, sp
 80036b4:	f106 0410 	add.w	r4, r6, #16
 80036b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	1d33      	adds	r3, r6, #4
 80036c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036c4:	6838      	ldr	r0, [r7, #0]
 80036c6:	f002 fedb 	bl	8006480 <USB_CoreInit>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0a4      	b.n	8003826 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f002 ff0f 	bl	8006506 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e8:	2300      	movs	r3, #0
 80036ea:	73fb      	strb	r3, [r7, #15]
 80036ec:	e035      	b.n	800375a <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	015b      	lsls	r3, r3, #5
 80036f4:	4413      	add	r3, r2
 80036f6:	3329      	adds	r3, #41	; 0x29
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	015b      	lsls	r3, r3, #5
 8003702:	4413      	add	r3, r2
 8003704:	3328      	adds	r3, #40	; 0x28
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	7bfa      	ldrb	r2, [r7, #15]
 800370e:	b291      	uxth	r1, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	015b      	lsls	r3, r3, #5
 8003714:	4413      	add	r3, r2
 8003716:	3336      	adds	r3, #54	; 0x36
 8003718:	460a      	mov	r2, r1
 800371a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	015b      	lsls	r3, r3, #5
 8003722:	4413      	add	r3, r2
 8003724:	332b      	adds	r3, #43	; 0x2b
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	015b      	lsls	r3, r3, #5
 8003730:	4413      	add	r3, r2
 8003732:	3338      	adds	r3, #56	; 0x38
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	015b      	lsls	r3, r3, #5
 800373e:	4413      	add	r3, r2
 8003740:	333c      	adds	r3, #60	; 0x3c
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	3302      	adds	r3, #2
 800374c:	015b      	lsls	r3, r3, #5
 800374e:	4413      	add	r3, r2
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	3301      	adds	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d3c4      	bcc.n	80036ee <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]
 8003768:	e031      	b.n	80037ce <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	015b      	lsls	r3, r3, #5
 8003770:	4413      	add	r3, r2
 8003772:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	015b      	lsls	r3, r3, #5
 8003780:	4413      	add	r3, r2
 8003782:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	015b      	lsls	r3, r3, #5
 8003790:	4413      	add	r3, r2
 8003792:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	015b      	lsls	r3, r3, #5
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	015b      	lsls	r3, r3, #5
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	330a      	adds	r3, #10
 80037c0:	015b      	lsls	r3, r3, #5
 80037c2:	4413      	add	r3, r2
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	3301      	adds	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d3c8      	bcc.n	800376a <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	687e      	ldr	r6, [r7, #4]
 80037e0:	466d      	mov	r5, sp
 80037e2:	f106 0410 	add.w	r4, r6, #16
 80037e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	602b      	str	r3, [r5, #0]
 80037ee:	1d33      	adds	r3, r6, #4
 80037f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037f2:	6838      	ldr	r0, [r7, #0]
 80037f4:	f002 fe93 	bl	800651e <USB_DevInit>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2202      	movs	r2, #2
 8003802:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e00d      	b.n	8003826 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f003 fed1 	bl	80075c6 <USB_DevDisconnect>

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800382e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_PCD_Start+0x16>
 8003840:	2302      	movs	r3, #2
 8003842:	e016      	b.n	8003872 <HAL_PCD_Start+0x44>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800384c:	2101      	movs	r1, #1
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f007 f817 	bl	800a882 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f003 feaa 	bl	80075b2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f002 fe1c 	bl	80064a0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f003 fea7 	bl	80075da <USB_ReadInterrupts>
 800388c:	4603      	mov	r3, r0
 800388e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003896:	d102      	bne.n	800389e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 faf3 	bl	8003e84 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f003 fe99 	bl	80075da <USB_ReadInterrupts>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b2:	d112      	bne.n	80038da <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c6:	b292      	uxth	r2, r2
 80038c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f006 fe42 	bl	800a556 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80038d2:	2100      	movs	r1, #0
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f8de 	bl	8003a96 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f003 fe7b 	bl	80075da <USB_ReadInterrupts>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ee:	d10b      	bne.n	8003908 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003902:	b292      	uxth	r2, r2
 8003904:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f003 fe64 	bl	80075da <USB_ReadInterrupts>
 8003912:	4603      	mov	r3, r0
 8003914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391c:	d10b      	bne.n	8003936 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003926:	b29a      	uxth	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003930:	b292      	uxth	r2, r2
 8003932:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f003 fe4d 	bl	80075da <USB_ReadInterrupts>
 8003940:	4603      	mov	r3, r0
 8003942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394a:	d126      	bne.n	800399a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003954:	b29a      	uxth	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0204 	bic.w	r2, r2, #4
 800395e:	b292      	uxth	r2, r2
 8003960:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800396c:	b29a      	uxth	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0208 	bic.w	r2, r2, #8
 8003976:	b292      	uxth	r2, r2
 8003978:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f006 fe27 	bl	800a5d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800398a:	b29a      	uxth	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003994:	b292      	uxth	r2, r2
 8003996:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 fe1b 	bl	80075da <USB_ReadInterrupts>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ae:	d13d      	bne.n	8003a2c <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0208 	orr.w	r2, r2, #8
 80039c2:	b292      	uxth	r2, r2
 80039c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039da:	b292      	uxth	r2, r2
 80039dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0204 	orr.w	r2, r2, #4
 80039f2:	b292      	uxth	r2, r2
 80039f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f003 fdec 	bl	80075da <USB_ReadInterrupts>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0c:	d10b      	bne.n	8003a26 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a20:	b292      	uxth	r2, r2
 8003a22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f006 fdb8 	bl	800a59c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f003 fdd2 	bl	80075da <USB_ReadInterrupts>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a40:	d10e      	bne.n	8003a60 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a54:	b292      	uxth	r2, r2
 8003a56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f006 fd6d 	bl	800a53a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f003 fdb8 	bl	80075da <USB_ReadInterrupts>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a74:	d10b      	bne.n	8003a8e <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a88:	b292      	uxth	r2, r2
 8003a8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_PCD_SetAddress+0x1a>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e013      	b.n	8003ad8 <HAL_PCD_SetAddress+0x42>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	78fa      	ldrb	r2, [r7, #3]
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f003 fd5f 	bl	800758c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	4608      	mov	r0, r1
 8003aea:	4611      	mov	r1, r2
 8003aec:	461a      	mov	r2, r3
 8003aee:	4603      	mov	r3, r0
 8003af0:	70fb      	strb	r3, [r7, #3]
 8003af2:	460b      	mov	r3, r1
 8003af4:	803b      	strh	r3, [r7, #0]
 8003af6:	4613      	mov	r3, r2
 8003af8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	da0b      	bge.n	8003b1e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	015b      	lsls	r3, r3, #5
 8003b0e:	3328      	adds	r3, #40	; 0x28
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	705a      	strb	r2, [r3, #1]
 8003b1c:	e00b      	b.n	8003b36 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	015b      	lsls	r3, r3, #5
 8003b26:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b42:	883a      	ldrh	r2, [r7, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	78ba      	ldrb	r2, [r7, #2]
 8003b4c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b60:	78bb      	ldrb	r3, [r7, #2]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d102      	bne.n	8003b6c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_PCD_EP_Open+0x9a>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e00e      	b.n	8003b98 <HAL_PCD_EP_Open+0xb8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68f9      	ldr	r1, [r7, #12]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f002 fced 	bl	8006568 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003b96:	7afb      	ldrb	r3, [r7, #11]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	da0b      	bge.n	8003bcc <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	015b      	lsls	r3, r3, #5
 8003bbc:	3328      	adds	r3, #40	; 0x28
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	705a      	strb	r2, [r3, #1]
 8003bca:	e00b      	b.n	8003be4 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	015b      	lsls	r3, r3, #5
 8003bd4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_PCD_EP_Close+0x5e>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e00e      	b.n	8003c1c <HAL_PCD_EP_Close+0x7c>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68f9      	ldr	r1, [r7, #12]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f002 ff99 	bl	8006b44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	460b      	mov	r3, r1
 8003c32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c34:	7afb      	ldrb	r3, [r7, #11]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	015b      	lsls	r3, r3, #5
 8003c3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2200      	movs	r2, #0
 8003c56:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5e:	7afb      	ldrb	r3, [r7, #11]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c6a:	7afb      	ldrb	r3, [r7, #11]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6979      	ldr	r1, [r7, #20]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f003 f8f8 	bl	8006e70 <USB_EPStartXfer>
 8003c80:	e005      	b.n	8003c8e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6979      	ldr	r1, [r7, #20]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f003 f8f1 	bl	8006e70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	330a      	adds	r3, #10
 8003cae:	015b      	lsls	r3, r3, #5
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	681b      	ldr	r3, [r3, #0]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd0:	7afb      	ldrb	r3, [r7, #11]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	015b      	lsls	r3, r3, #5
 8003cd8:	3328      	adds	r3, #40	; 0x28
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4413      	add	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf8:	7afb      	ldrb	r3, [r7, #11]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d04:	7afb      	ldrb	r3, [r7, #11]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6979      	ldr	r1, [r7, #20]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f003 f8ab 	bl	8006e70 <USB_EPStartXfer>
 8003d1a:	e005      	b.n	8003d28 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6979      	ldr	r1, [r7, #20]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f003 f8a4 	bl	8006e70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	f003 0207 	and.w	r2, r3, #7
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d901      	bls.n	8003d50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e046      	b.n	8003dde <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	da0b      	bge.n	8003d70 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	015b      	lsls	r3, r3, #5
 8003d60:	3328      	adds	r3, #40	; 0x28
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	705a      	strb	r2, [r3, #1]
 8003d6e:	e009      	b.n	8003d84 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	015b      	lsls	r3, r3, #5
 8003d74:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_PCD_EP_SetStall+0x72>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e01c      	b.n	8003dde <HAL_PCD_EP_SetStall+0xac>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68f9      	ldr	r1, [r7, #12]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f003 fb14 	bl	80073e0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d108      	bne.n	8003dd4 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f003 fc12 	bl	80075f8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 020f 	and.w	r2, r3, #15
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d901      	bls.n	8003e04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e03a      	b.n	8003e7a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	da0b      	bge.n	8003e24 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	015b      	lsls	r3, r3, #5
 8003e14:	3328      	adds	r3, #40	; 0x28
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	705a      	strb	r2, [r3, #1]
 8003e22:	e00b      	b.n	8003e3c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	015b      	lsls	r3, r3, #5
 8003e2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4413      	add	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_PCD_EP_ClrStall+0x76>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e00e      	b.n	8003e7a <HAL_PCD_EP_ClrStall+0x94>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68f9      	ldr	r1, [r7, #12]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f003 fafa 	bl	8007464 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b089      	sub	sp, #36	; 0x24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e8c:	e282      	b.n	8004394 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e96:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003e98:	8afb      	ldrh	r3, [r7, #22]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003ea2:	7d7b      	ldrb	r3, [r7, #21]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f040 8142 	bne.w	800412e <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003eaa:	8afb      	ldrh	r3, [r7, #22]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d151      	bne.n	8003f58 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec4:	b29c      	uxth	r4, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3328      	adds	r3, #40	; 0x28
 8003eda:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	3302      	adds	r3, #2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	441a      	add	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003f16:	2100      	movs	r1, #0
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f006 faf7 	bl	800a50c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 8234 	beq.w	8004394 <PCD_EP_ISR_Handler+0x510>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f040 822f 	bne.w	8004394 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	b292      	uxth	r2, r2
 8003f4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f56:	e21d      	b.n	8004394 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003f5e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003f68:	8a7b      	ldrh	r3, [r7, #18]
 8003f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d033      	beq.n	8003fda <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	3306      	adds	r3, #6
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f003 fb70 	bl	8007696 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	b29c      	uxth	r4, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003fce:	b292      	uxth	r2, r2
 8003fd0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f006 fa70 	bl	800a4b8 <HAL_PCD_SetupStageCallback>
 8003fd8:	e1dc      	b.n	8004394 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003fda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f280 81d8 	bge.w	8004394 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	b29c      	uxth	r4, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003ffc:	b292      	uxth	r2, r2
 8003ffe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004008:	b29b      	uxth	r3, r3
 800400a:	461a      	mov	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4413      	add	r3, r2
 8004014:	3306      	adds	r3, #6
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d019      	beq.n	8004068 <PCD_EP_ISR_Handler+0x1e4>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d015      	beq.n	8004068 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6959      	ldr	r1, [r3, #20]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800404c:	b29b      	uxth	r3, r3
 800404e:	f003 fb22 	bl	8007696 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	441a      	add	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004060:	2100      	movs	r1, #0
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f006 fa3a 	bl	800a4dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461c      	mov	r4, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004076:	b29b      	uxth	r3, r3
 8004078:	441c      	add	r4, r3
 800407a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800407e:	461c      	mov	r4, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10e      	bne.n	80040a6 <PCD_EP_ISR_Handler+0x222>
 8004088:	8823      	ldrh	r3, [r4, #0]
 800408a:	b29b      	uxth	r3, r3
 800408c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004090:	b29b      	uxth	r3, r3
 8004092:	8023      	strh	r3, [r4, #0]
 8004094:	8823      	ldrh	r3, [r4, #0]
 8004096:	b29b      	uxth	r3, r3
 8004098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800409c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	8023      	strh	r3, [r4, #0]
 80040a4:	e02d      	b.n	8004102 <PCD_EP_ISR_Handler+0x27e>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b3e      	cmp	r3, #62	; 0x3e
 80040ac:	d812      	bhi.n	80040d4 <PCD_EP_ISR_Handler+0x250>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	085b      	lsrs	r3, r3, #1
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <PCD_EP_ISR_Handler+0x244>
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	3301      	adds	r3, #1
 80040c6:	61bb      	str	r3, [r7, #24]
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	029b      	lsls	r3, r3, #10
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	8023      	strh	r3, [r4, #0]
 80040d2:	e016      	b.n	8004102 <PCD_EP_ISR_Handler+0x27e>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d102      	bne.n	80040ee <PCD_EP_ISR_Handler+0x26a>
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	029b      	lsls	r3, r3, #10
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040fe:	b29b      	uxth	r3, r3
 8004100:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	b29b      	uxth	r3, r3
 800410a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800410e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004112:	b29c      	uxth	r4, r3
 8004114:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004118:	b29c      	uxth	r4, r3
 800411a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800411e:	b29c      	uxth	r4, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4ba2      	ldr	r3, [pc, #648]	; (80043b0 <PCD_EP_ISR_Handler+0x52c>)
 8004126:	4323      	orrs	r3, r4
 8004128:	b29b      	uxth	r3, r3
 800412a:	8013      	strh	r3, [r2, #0]
 800412c:	e132      	b.n	8004394 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	7d7b      	ldrb	r3, [r7, #21]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800413e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004142:	2b00      	cmp	r3, #0
 8004144:	f280 80d1 	bge.w	80042ea <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	7d7b      	ldrb	r3, [r7, #21]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29a      	uxth	r2, r3
 8004158:	f640 738f 	movw	r3, #3983	; 0xf8f
 800415c:	4013      	ands	r3, r2
 800415e:	b29c      	uxth	r4, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	7d7b      	ldrb	r3, [r7, #21]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004170:	b292      	uxth	r2, r2
 8004172:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004174:	7d7b      	ldrb	r3, [r7, #21]
 8004176:	015b      	lsls	r3, r3, #5
 8004178:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	4413      	add	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	7b1b      	ldrb	r3, [r3, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d121      	bne.n	80041ce <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004192:	b29b      	uxth	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	3306      	adds	r3, #6
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041b2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80041b4:	8bfb      	ldrh	r3, [r7, #30]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d072      	beq.n	80042a0 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6959      	ldr	r1, [r3, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	88da      	ldrh	r2, [r3, #6]
 80041c6:	8bfb      	ldrh	r3, [r7, #30]
 80041c8:	f003 fa65 	bl	8007696 <USB_ReadPMA>
 80041cc:	e068      	b.n	80042a0 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d021      	beq.n	800422c <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4413      	add	r3, r2
 80041fc:	3302      	adds	r3, #2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004210:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004212:	8bfb      	ldrh	r3, [r7, #30]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d02a      	beq.n	800426e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6959      	ldr	r1, [r3, #20]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	891a      	ldrh	r2, [r3, #8]
 8004224:	8bfb      	ldrh	r3, [r7, #30]
 8004226:	f003 fa36 	bl	8007696 <USB_ReadPMA>
 800422a:	e020      	b.n	800426e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004234:	b29b      	uxth	r3, r3
 8004236:	461a      	mov	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4413      	add	r3, r2
 8004240:	3306      	adds	r3, #6
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004254:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004256:	8bfb      	ldrh	r3, [r7, #30]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6959      	ldr	r1, [r3, #20]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	895a      	ldrh	r2, [r3, #10]
 8004268:	8bfb      	ldrh	r3, [r7, #30]
 800426a:	f003 fa14 	bl	8007696 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004288:	b29c      	uxth	r4, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	441a      	add	r2, r3
 8004298:	4b46      	ldr	r3, [pc, #280]	; (80043b4 <PCD_EP_ISR_Handler+0x530>)
 800429a:	4323      	orrs	r3, r4
 800429c:	b29b      	uxth	r3, r3
 800429e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	8bfb      	ldrh	r3, [r7, #30]
 80042a6:	441a      	add	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	8bfb      	ldrh	r3, [r7, #30]
 80042b2:	441a      	add	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <PCD_EP_ISR_Handler+0x446>
 80042c0:	8bfa      	ldrh	r2, [r7, #30]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d206      	bcs.n	80042d8 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	4619      	mov	r1, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f006 f903 	bl	800a4dc <HAL_PCD_DataOutStageCallback>
 80042d6:	e008      	b.n	80042ea <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	7819      	ldrb	r1, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	695a      	ldr	r2, [r3, #20]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff fc9d 	bl	8003c24 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80042ea:	8a7b      	ldrh	r3, [r7, #18]
 80042ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d04f      	beq.n	8004394 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80042f4:	7d7b      	ldrb	r3, [r7, #21]
 80042f6:	015b      	lsls	r3, r3, #5
 80042f8:	3328      	adds	r3, #40	; 0x28
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	7d7b      	ldrb	r3, [r7, #21]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004318:	b29c      	uxth	r4, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	7d7b      	ldrb	r3, [r7, #21]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	441a      	add	r2, r3
 8004326:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800432a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800432e:	b29b      	uxth	r3, r3
 8004330:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433a:	b29b      	uxth	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	3302      	adds	r3, #2
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	441a      	add	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d106      	bne.n	8004382 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f006 f8c6 	bl	800a50c <HAL_PCD_DataInStageCallback>
 8004380:	e008      	b.n	8004394 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	7819      	ldrb	r1, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff fc96 	bl	8003cc0 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800439c:	b29b      	uxth	r3, r3
 800439e:	b21b      	sxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f6ff ad74 	blt.w	8003e8e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3724      	adds	r7, #36	; 0x24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd90      	pop	{r4, r7, pc}
 80043b0:	ffff8080 	.word	0xffff8080
 80043b4:	ffff80c0 	.word	0xffff80c0

080043b8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	460b      	mov	r3, r1
 80043c4:	817b      	strh	r3, [r7, #10]
 80043c6:	4613      	mov	r3, r2
 80043c8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043ca:	897b      	ldrh	r3, [r7, #10]
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d6:	897b      	ldrh	r3, [r7, #10]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	015b      	lsls	r3, r3, #5
 80043de:	3328      	adds	r3, #40	; 0x28
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	e006      	b.n	80043f6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043e8:	897b      	ldrh	r3, [r7, #10]
 80043ea:	015b      	lsls	r3, r3, #5
 80043ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043f6:	893b      	ldrh	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d107      	bne.n	800440c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2200      	movs	r2, #0
 8004400:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	b29a      	uxth	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	80da      	strh	r2, [r3, #6]
 800440a:	e00b      	b.n	8004424 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2201      	movs	r2, #1
 8004410:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	b29a      	uxth	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	b29a      	uxth	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e26c      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8087 	beq.w	800455e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004450:	4b92      	ldr	r3, [pc, #584]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 030c 	and.w	r3, r3, #12
 8004458:	2b04      	cmp	r3, #4
 800445a:	d00c      	beq.n	8004476 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800445c:	4b8f      	ldr	r3, [pc, #572]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 030c 	and.w	r3, r3, #12
 8004464:	2b08      	cmp	r3, #8
 8004466:	d112      	bne.n	800448e <HAL_RCC_OscConfig+0x5e>
 8004468:	4b8c      	ldr	r3, [pc, #560]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004474:	d10b      	bne.n	800448e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004476:	4b89      	ldr	r3, [pc, #548]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d06c      	beq.n	800455c <HAL_RCC_OscConfig+0x12c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d168      	bne.n	800455c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e246      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004496:	d106      	bne.n	80044a6 <HAL_RCC_OscConfig+0x76>
 8004498:	4b80      	ldr	r3, [pc, #512]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a7f      	ldr	r2, [pc, #508]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 800449e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	e02e      	b.n	8004504 <HAL_RCC_OscConfig+0xd4>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10c      	bne.n	80044c8 <HAL_RCC_OscConfig+0x98>
 80044ae:	4b7b      	ldr	r3, [pc, #492]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a7a      	ldr	r2, [pc, #488]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	4b78      	ldr	r3, [pc, #480]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a77      	ldr	r2, [pc, #476]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	e01d      	b.n	8004504 <HAL_RCC_OscConfig+0xd4>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044d0:	d10c      	bne.n	80044ec <HAL_RCC_OscConfig+0xbc>
 80044d2:	4b72      	ldr	r3, [pc, #456]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a71      	ldr	r2, [pc, #452]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	4b6f      	ldr	r3, [pc, #444]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a6e      	ldr	r2, [pc, #440]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	e00b      	b.n	8004504 <HAL_RCC_OscConfig+0xd4>
 80044ec:	4b6b      	ldr	r3, [pc, #428]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a6a      	ldr	r2, [pc, #424]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	4b68      	ldr	r3, [pc, #416]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a67      	ldr	r2, [pc, #412]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004502:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d013      	beq.n	8004534 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fd fc28 	bl	8001d60 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004514:	f7fd fc24 	bl	8001d60 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1fa      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004526:	4b5d      	ldr	r3, [pc, #372]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0xe4>
 8004532:	e014      	b.n	800455e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004534:	f7fd fc14 	bl	8001d60 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800453c:	f7fd fc10 	bl	8001d60 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	; 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e1e6      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454e:	4b53      	ldr	r3, [pc, #332]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x10c>
 800455a:	e000      	b.n	800455e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d063      	beq.n	8004632 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800456a:	4b4c      	ldr	r3, [pc, #304]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00b      	beq.n	800458e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004576:	4b49      	ldr	r3, [pc, #292]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b08      	cmp	r3, #8
 8004580:	d11c      	bne.n	80045bc <HAL_RCC_OscConfig+0x18c>
 8004582:	4b46      	ldr	r3, [pc, #280]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d116      	bne.n	80045bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458e:	4b43      	ldr	r3, [pc, #268]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_RCC_OscConfig+0x176>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d001      	beq.n	80045a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e1ba      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a6:	4b3d      	ldr	r3, [pc, #244]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	4939      	ldr	r1, [pc, #228]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ba:	e03a      	b.n	8004632 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d020      	beq.n	8004606 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c4:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <HAL_RCC_OscConfig+0x270>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ca:	f7fd fbc9 	bl	8001d60 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d2:	f7fd fbc5 	bl	8001d60 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e19b      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e4:	4b2d      	ldr	r3, [pc, #180]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f0:	4b2a      	ldr	r3, [pc, #168]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4927      	ldr	r1, [pc, #156]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]
 8004604:	e015      	b.n	8004632 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004606:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <HAL_RCC_OscConfig+0x270>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fd fba8 	bl	8001d60 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004614:	f7fd fba4 	bl	8001d60 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e17a      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004626:	4b1d      	ldr	r3, [pc, #116]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d03a      	beq.n	80046b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d019      	beq.n	800467a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004646:	4b17      	ldr	r3, [pc, #92]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004648:	2201      	movs	r2, #1
 800464a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800464c:	f7fd fb88 	bl	8001d60 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004654:	f7fd fb84 	bl	8001d60 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e15a      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004672:	2001      	movs	r0, #1
 8004674:	f000 fb0c 	bl	8004c90 <RCC_Delay>
 8004678:	e01c      	b.n	80046b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800467a:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004680:	f7fd fb6e 	bl	8001d60 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004686:	e00f      	b.n	80046a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004688:	f7fd fb6a 	bl	8001d60 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d908      	bls.n	80046a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e140      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	42420000 	.word	0x42420000
 80046a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a8:	4b9e      	ldr	r3, [pc, #632]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e9      	bne.n	8004688 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80a6 	beq.w	800480e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c6:	4b97      	ldr	r3, [pc, #604]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10d      	bne.n	80046ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	4b94      	ldr	r3, [pc, #592]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	4a93      	ldr	r2, [pc, #588]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 80046d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046dc:	61d3      	str	r3, [r2, #28]
 80046de:	4b91      	ldr	r3, [pc, #580]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ea:	2301      	movs	r3, #1
 80046ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ee:	4b8e      	ldr	r3, [pc, #568]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d118      	bne.n	800472c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fa:	4b8b      	ldr	r3, [pc, #556]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a8a      	ldr	r2, [pc, #552]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 8004700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004706:	f7fd fb2b 	bl	8001d60 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470e:	f7fd fb27 	bl	8001d60 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b64      	cmp	r3, #100	; 0x64
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e0fd      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004720:	4b81      	ldr	r3, [pc, #516]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d106      	bne.n	8004742 <HAL_RCC_OscConfig+0x312>
 8004734:	4b7b      	ldr	r3, [pc, #492]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	4a7a      	ldr	r2, [pc, #488]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	6213      	str	r3, [r2, #32]
 8004740:	e02d      	b.n	800479e <HAL_RCC_OscConfig+0x36e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0x334>
 800474a:	4b76      	ldr	r3, [pc, #472]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	4a75      	ldr	r2, [pc, #468]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	6213      	str	r3, [r2, #32]
 8004756:	4b73      	ldr	r3, [pc, #460]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	4a72      	ldr	r2, [pc, #456]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 800475c:	f023 0304 	bic.w	r3, r3, #4
 8004760:	6213      	str	r3, [r2, #32]
 8004762:	e01c      	b.n	800479e <HAL_RCC_OscConfig+0x36e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b05      	cmp	r3, #5
 800476a:	d10c      	bne.n	8004786 <HAL_RCC_OscConfig+0x356>
 800476c:	4b6d      	ldr	r3, [pc, #436]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4a6c      	ldr	r2, [pc, #432]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 8004772:	f043 0304 	orr.w	r3, r3, #4
 8004776:	6213      	str	r3, [r2, #32]
 8004778:	4b6a      	ldr	r3, [pc, #424]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	4a69      	ldr	r2, [pc, #420]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6213      	str	r3, [r2, #32]
 8004784:	e00b      	b.n	800479e <HAL_RCC_OscConfig+0x36e>
 8004786:	4b67      	ldr	r3, [pc, #412]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	4a66      	ldr	r2, [pc, #408]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	6213      	str	r3, [r2, #32]
 8004792:	4b64      	ldr	r3, [pc, #400]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	4a63      	ldr	r2, [pc, #396]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 8004798:	f023 0304 	bic.w	r3, r3, #4
 800479c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d015      	beq.n	80047d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a6:	f7fd fadb 	bl	8001d60 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ac:	e00a      	b.n	80047c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ae:	f7fd fad7 	bl	8001d60 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047bc:	4293      	cmp	r3, r2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e0ab      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c4:	4b57      	ldr	r3, [pc, #348]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0ee      	beq.n	80047ae <HAL_RCC_OscConfig+0x37e>
 80047d0:	e014      	b.n	80047fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d2:	f7fd fac5 	bl	8001d60 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d8:	e00a      	b.n	80047f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047da:	f7fd fac1 	bl	8001d60 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e095      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f0:	4b4c      	ldr	r3, [pc, #304]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ee      	bne.n	80047da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d105      	bne.n	800480e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004802:	4b48      	ldr	r3, [pc, #288]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	4a47      	ldr	r2, [pc, #284]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 8004808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800480c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8081 	beq.w	800491a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004818:	4b42      	ldr	r3, [pc, #264]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 030c 	and.w	r3, r3, #12
 8004820:	2b08      	cmp	r3, #8
 8004822:	d061      	beq.n	80048e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	2b02      	cmp	r3, #2
 800482a:	d146      	bne.n	80048ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482c:	4b3f      	ldr	r3, [pc, #252]	; (800492c <HAL_RCC_OscConfig+0x4fc>)
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004832:	f7fd fa95 	bl	8001d60 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800483a:	f7fd fa91 	bl	8001d60 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e067      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800484c:	4b35      	ldr	r3, [pc, #212]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f0      	bne.n	800483a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004860:	d108      	bne.n	8004874 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004862:	4b30      	ldr	r3, [pc, #192]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	492d      	ldr	r1, [pc, #180]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004874:	4b2b      	ldr	r3, [pc, #172]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a19      	ldr	r1, [r3, #32]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	430b      	orrs	r3, r1
 8004886:	4927      	ldr	r1, [pc, #156]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800488c:	4b27      	ldr	r3, [pc, #156]	; (800492c <HAL_RCC_OscConfig+0x4fc>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004892:	f7fd fa65 	bl	8001d60 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489a:	f7fd fa61 	bl	8001d60 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e037      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048ac:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x46a>
 80048b8:	e02f      	b.n	800491a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ba:	4b1c      	ldr	r3, [pc, #112]	; (800492c <HAL_RCC_OscConfig+0x4fc>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7fd fa4e 	bl	8001d60 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fd fa4a 	bl	8001d60 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e020      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048da:	4b12      	ldr	r3, [pc, #72]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x498>
 80048e6:	e018      	b.n	800491a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e013      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <HAL_RCC_OscConfig+0x4f4>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	429a      	cmp	r2, r3
 8004906:	d106      	bne.n	8004916 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d001      	beq.n	800491a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40021000 	.word	0x40021000
 8004928:	40007000 	.word	0x40007000
 800492c:	42420060 	.word	0x42420060

08004930 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e0d0      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004944:	4b6a      	ldr	r3, [pc, #424]	; (8004af0 <HAL_RCC_ClockConfig+0x1c0>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d910      	bls.n	8004974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b67      	ldr	r3, [pc, #412]	; (8004af0 <HAL_RCC_ClockConfig+0x1c0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f023 0207 	bic.w	r2, r3, #7
 800495a:	4965      	ldr	r1, [pc, #404]	; (8004af0 <HAL_RCC_ClockConfig+0x1c0>)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	4313      	orrs	r3, r2
 8004960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b63      	ldr	r3, [pc, #396]	; (8004af0 <HAL_RCC_ClockConfig+0x1c0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0b8      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d020      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800498c:	4b59      	ldr	r3, [pc, #356]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	4a58      	ldr	r2, [pc, #352]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 8004992:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004996:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049a4:	4b53      	ldr	r3, [pc, #332]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	4a52      	ldr	r2, [pc, #328]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 80049aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b0:	4b50      	ldr	r3, [pc, #320]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	494d      	ldr	r1, [pc, #308]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d040      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d107      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d6:	4b47      	ldr	r3, [pc, #284]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d115      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e07f      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d107      	bne.n	80049fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ee:	4b41      	ldr	r3, [pc, #260]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d109      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e073      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fe:	4b3d      	ldr	r3, [pc, #244]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e06b      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a0e:	4b39      	ldr	r3, [pc, #228]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f023 0203 	bic.w	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	4936      	ldr	r1, [pc, #216]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a20:	f7fd f99e 	bl	8001d60 <HAL_GetTick>
 8004a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a28:	f7fd f99a 	bl	8001d60 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e053      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3e:	4b2d      	ldr	r3, [pc, #180]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f003 020c 	and.w	r2, r3, #12
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d1eb      	bne.n	8004a28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a50:	4b27      	ldr	r3, [pc, #156]	; (8004af0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d210      	bcs.n	8004a80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5e:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 0207 	bic.w	r2, r3, #7
 8004a66:	4922      	ldr	r1, [pc, #136]	; (8004af0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b20      	ldr	r3, [pc, #128]	; (8004af0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e032      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a8c:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4916      	ldr	r1, [pc, #88]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d009      	beq.n	8004abe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	490e      	ldr	r1, [pc, #56]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004abe:	f000 f821 	bl	8004b04 <HAL_RCC_GetSysClockFreq>
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	4a0a      	ldr	r2, [pc, #40]	; (8004af8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad0:	5cd3      	ldrb	r3, [r2, r3]
 8004ad2:	fa21 f303 	lsr.w	r3, r1, r3
 8004ad6:	4a09      	ldr	r2, [pc, #36]	; (8004afc <HAL_RCC_ClockConfig+0x1cc>)
 8004ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ada:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <HAL_RCC_ClockConfig+0x1d0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fc ffd8 	bl	8001a94 <HAL_InitTick>

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40022000 	.word	0x40022000
 8004af4:	40021000 	.word	0x40021000
 8004af8:	0800aa74 	.word	0x0800aa74
 8004afc:	200000c0 	.word	0x200000c0
 8004b00:	200000c4 	.word	0x200000c4

08004b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b04:	b490      	push	{r4, r7}
 8004b06:	b08a      	sub	sp, #40	; 0x28
 8004b08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b0a:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b0c:	1d3c      	adds	r4, r7, #4
 8004b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b14:	4b28      	ldr	r3, [pc, #160]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	2300      	movs	r3, #0
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b2e:	4b23      	ldr	r3, [pc, #140]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d002      	beq.n	8004b44 <HAL_RCC_GetSysClockFreq+0x40>
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d003      	beq.n	8004b4a <HAL_RCC_GetSysClockFreq+0x46>
 8004b42:	e02d      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b44:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b46:	623b      	str	r3, [r7, #32]
      break;
 8004b48:	e02d      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	0c9b      	lsrs	r3, r3, #18
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b56:	4413      	add	r3, r2
 8004b58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d013      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b68:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	0c5b      	lsrs	r3, r3, #17
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b76:	4413      	add	r3, r2
 8004b78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	4a0f      	ldr	r2, [pc, #60]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b82:	fb02 f203 	mul.w	r2, r2, r3
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8e:	e004      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	4a0c      	ldr	r2, [pc, #48]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b94:	fb02 f303 	mul.w	r3, r2, r3
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	623b      	str	r3, [r7, #32]
      break;
 8004b9e:	e002      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ba2:	623b      	str	r3, [r7, #32]
      break;
 8004ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3728      	adds	r7, #40	; 0x28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc90      	pop	{r4, r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	0800aa18 	.word	0x0800aa18
 8004bb8:	0800aa28 	.word	0x0800aa28
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	00f42400 	.word	0x00f42400
 8004bc4:	003d0900 	.word	0x003d0900
 8004bc8:	007a1200 	.word	0x007a1200

08004bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd0:	4b02      	ldr	r3, [pc, #8]	; (8004bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	200000c0 	.word	0x200000c0

08004be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004be4:	f7ff fff2 	bl	8004bcc <HAL_RCC_GetHCLKFreq>
 8004be8:	4601      	mov	r1, r0
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	4a03      	ldr	r2, [pc, #12]	; (8004c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bf6:	5cd3      	ldrb	r3, [r2, r3]
 8004bf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40021000 	.word	0x40021000
 8004c04:	0800aa84 	.word	0x0800aa84

08004c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c0c:	f7ff ffde 	bl	8004bcc <HAL_RCC_GetHCLKFreq>
 8004c10:	4601      	mov	r1, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	0adb      	lsrs	r3, r3, #11
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4a03      	ldr	r2, [pc, #12]	; (8004c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c1e:	5cd3      	ldrb	r3, [r2, r3]
 8004c20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	0800aa84 	.word	0x0800aa84

08004c30 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	220f      	movs	r2, #15
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c40:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <HAL_RCC_GetClockConfig+0x58>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 0203 	and.w	r2, r3, #3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c4c:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <HAL_RCC_GetClockConfig+0x58>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <HAL_RCC_GetClockConfig+0x58>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004c64:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <HAL_RCC_GetClockConfig+0x58>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	08db      	lsrs	r3, r3, #3
 8004c6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c72:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <HAL_RCC_GetClockConfig+0x5c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0207 	and.w	r2, r3, #7
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	40022000 	.word	0x40022000

08004c90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <RCC_Delay+0x34>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <RCC_Delay+0x38>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	0a5b      	lsrs	r3, r3, #9
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	fb02 f303 	mul.w	r3, r2, r3
 8004caa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cac:	bf00      	nop
  }
  while (Delay --);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1e5a      	subs	r2, r3, #1
 8004cb2:	60fa      	str	r2, [r7, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f9      	bne.n	8004cac <RCC_Delay+0x1c>
}
 8004cb8:	bf00      	nop
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	200000c0 	.word	0x200000c0
 8004cc8:	10624dd3 	.word	0x10624dd3

08004ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d07d      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cec:	4b4f      	ldr	r3, [pc, #316]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10d      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf8:	4b4c      	ldr	r3, [pc, #304]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	4a4b      	ldr	r2, [pc, #300]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d02:	61d3      	str	r3, [r2, #28]
 8004d04:	4b49      	ldr	r3, [pc, #292]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d10:	2301      	movs	r3, #1
 8004d12:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d14:	4b46      	ldr	r3, [pc, #280]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d118      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d20:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a42      	ldr	r2, [pc, #264]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d2c:	f7fd f818 	bl	8001d60 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d32:	e008      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d34:	f7fd f814 	bl	8001d60 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b64      	cmp	r3, #100	; 0x64
 8004d40:	d901      	bls.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e06d      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d46:	4b3a      	ldr	r3, [pc, #232]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d52:	4b36      	ldr	r3, [pc, #216]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d02e      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d027      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d70:	4b2e      	ldr	r3, [pc, #184]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d7a:	4b2e      	ldr	r3, [pc, #184]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d80:	4b2c      	ldr	r3, [pc, #176]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d86:	4a29      	ldr	r2, [pc, #164]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d014      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d96:	f7fc ffe3 	bl	8001d60 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9c:	e00a      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9e:	f7fc ffdf 	bl	8001d60 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e036      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db4:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0ee      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dc0:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	4917      	ldr	r1, [pc, #92]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd8:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	4a13      	ldr	r2, [pc, #76]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d008      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004df0:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	490b      	ldr	r1, [pc, #44]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d008      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e0e:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	4904      	ldr	r1, [pc, #16]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40007000 	.word	0x40007000
 8004e34:	42420440 	.word	0x42420440

08004e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e01d      	b.n	8004e86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fc fc1a 	bl	8001698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3304      	adds	r3, #4
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f000 fb40 	bl	80054fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0201 	orr.w	r2, r2, #1
 8004ea4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b06      	cmp	r3, #6
 8004eb6:	d007      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e01d      	b.n	8004f22 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fc fbfc 	bl	80016f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f000 faf2 	bl	80054fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fd98 	bl	8005a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a15      	ldr	r2, [pc, #84]	; (8004fa0 <HAL_TIM_PWM_Start+0x74>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d004      	beq.n	8004f58 <HAL_TIM_PWM_Start+0x2c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <HAL_TIM_PWM_Start+0x78>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d101      	bne.n	8004f5c <HAL_TIM_PWM_Start+0x30>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <HAL_TIM_PWM_Start+0x32>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b06      	cmp	r3, #6
 8004f82:	d007      	beq.n	8004f94 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40013400 	.word	0x40013400

08004fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d122      	bne.n	8005004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d11b      	bne.n	8005004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0202 	mvn.w	r2, #2
 8004fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fa6a 	bl	80054c4 <HAL_TIM_IC_CaptureCallback>
 8004ff0:	e005      	b.n	8004ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fa5d 	bl	80054b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fa6c 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b04      	cmp	r3, #4
 8005010:	d122      	bne.n	8005058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b04      	cmp	r3, #4
 800501e:	d11b      	bne.n	8005058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0204 	mvn.w	r2, #4
 8005028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fa40 	bl	80054c4 <HAL_TIM_IC_CaptureCallback>
 8005044:	e005      	b.n	8005052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fa33 	bl	80054b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fa42 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b08      	cmp	r3, #8
 8005064:	d122      	bne.n	80050ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b08      	cmp	r3, #8
 8005072:	d11b      	bne.n	80050ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0208 	mvn.w	r2, #8
 800507c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2204      	movs	r2, #4
 8005082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fa16 	bl	80054c4 <HAL_TIM_IC_CaptureCallback>
 8005098:	e005      	b.n	80050a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fa09 	bl	80054b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fa18 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d122      	bne.n	8005100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d11b      	bne.n	8005100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0210 	mvn.w	r2, #16
 80050d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2208      	movs	r2, #8
 80050d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f9ec 	bl	80054c4 <HAL_TIM_IC_CaptureCallback>
 80050ec:	e005      	b.n	80050fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f9df 	bl	80054b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f9ee 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b01      	cmp	r3, #1
 800510c:	d10e      	bne.n	800512c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b01      	cmp	r3, #1
 800511a:	d107      	bne.n	800512c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0201 	mvn.w	r2, #1
 8005124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fc f960 	bl	80013ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	2b80      	cmp	r3, #128	; 0x80
 8005138:	d10e      	bne.n	8005158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b80      	cmp	r3, #128	; 0x80
 8005146:	d107      	bne.n	8005158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fcff 	bl	8005b56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005162:	2b40      	cmp	r3, #64	; 0x40
 8005164:	d10e      	bne.n	8005184 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005170:	2b40      	cmp	r3, #64	; 0x40
 8005172:	d107      	bne.n	8005184 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800517c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f9b2 	bl	80054e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b20      	cmp	r3, #32
 8005190:	d10e      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b20      	cmp	r3, #32
 800519e:	d107      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0220 	mvn.w	r2, #32
 80051a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fcca 	bl	8005b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e0b4      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x184>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2202      	movs	r2, #2
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b0c      	cmp	r3, #12
 80051e6:	f200 809f 	bhi.w	8005328 <HAL_TIM_PWM_ConfigChannel+0x170>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005225 	.word	0x08005225
 80051f4:	08005329 	.word	0x08005329
 80051f8:	08005329 	.word	0x08005329
 80051fc:	08005329 	.word	0x08005329
 8005200:	08005265 	.word	0x08005265
 8005204:	08005329 	.word	0x08005329
 8005208:	08005329 	.word	0x08005329
 800520c:	08005329 	.word	0x08005329
 8005210:	080052a7 	.word	0x080052a7
 8005214:	08005329 	.word	0x08005329
 8005218:	08005329 	.word	0x08005329
 800521c:	08005329 	.word	0x08005329
 8005220:	080052e7 	.word	0x080052e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 f9e0 	bl	80055f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0208 	orr.w	r2, r2, #8
 800523e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0204 	bic.w	r2, r2, #4
 800524e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6999      	ldr	r1, [r3, #24]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	619a      	str	r2, [r3, #24]
      break;
 8005262:	e062      	b.n	800532a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fa30 	bl	80056d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800527e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6999      	ldr	r1, [r3, #24]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	021a      	lsls	r2, r3, #8
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	619a      	str	r2, [r3, #24]
      break;
 80052a4:	e041      	b.n	800532a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fa83 	bl	80057b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0208 	orr.w	r2, r2, #8
 80052c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0204 	bic.w	r2, r2, #4
 80052d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69d9      	ldr	r1, [r3, #28]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	61da      	str	r2, [r3, #28]
      break;
 80052e4:	e021      	b.n	800532a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fad7 	bl	80058a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69da      	ldr	r2, [r3, #28]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69d9      	ldr	r1, [r3, #28]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	021a      	lsls	r2, r3, #8
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	61da      	str	r2, [r3, #28]
      break;
 8005326:	e000      	b.n	800532a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005328:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIM_ConfigClockSource+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e0a6      	b.n	80054aa <HAL_TIM_ConfigClockSource+0x166>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800537a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005382:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d067      	beq.n	8005464 <HAL_TIM_ConfigClockSource+0x120>
 8005394:	2b40      	cmp	r3, #64	; 0x40
 8005396:	d80b      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x6c>
 8005398:	2b10      	cmp	r3, #16
 800539a:	d073      	beq.n	8005484 <HAL_TIM_ConfigClockSource+0x140>
 800539c:	2b10      	cmp	r3, #16
 800539e:	d802      	bhi.n	80053a6 <HAL_TIM_ConfigClockSource+0x62>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d06f      	beq.n	8005484 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80053a4:	e078      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d06c      	beq.n	8005484 <HAL_TIM_ConfigClockSource+0x140>
 80053aa:	2b30      	cmp	r3, #48	; 0x30
 80053ac:	d06a      	beq.n	8005484 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80053ae:	e073      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053b0:	2b70      	cmp	r3, #112	; 0x70
 80053b2:	d00d      	beq.n	80053d0 <HAL_TIM_ConfigClockSource+0x8c>
 80053b4:	2b70      	cmp	r3, #112	; 0x70
 80053b6:	d804      	bhi.n	80053c2 <HAL_TIM_ConfigClockSource+0x7e>
 80053b8:	2b50      	cmp	r3, #80	; 0x50
 80053ba:	d033      	beq.n	8005424 <HAL_TIM_ConfigClockSource+0xe0>
 80053bc:	2b60      	cmp	r3, #96	; 0x60
 80053be:	d041      	beq.n	8005444 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80053c0:	e06a      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c6:	d066      	beq.n	8005496 <HAL_TIM_ConfigClockSource+0x152>
 80053c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053cc:	d017      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80053ce:	e063      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	6899      	ldr	r1, [r3, #8]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f000 fb29 	bl	8005a36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	609a      	str	r2, [r3, #8]
      break;
 80053fc:	e04c      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6899      	ldr	r1, [r3, #8]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f000 fb12 	bl	8005a36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005420:	609a      	str	r2, [r3, #8]
      break;
 8005422:	e039      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	461a      	mov	r2, r3
 8005432:	f000 fa89 	bl	8005948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2150      	movs	r1, #80	; 0x50
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fae0 	bl	8005a02 <TIM_ITRx_SetConfig>
      break;
 8005442:	e029      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	6859      	ldr	r1, [r3, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	461a      	mov	r2, r3
 8005452:	f000 faa7 	bl	80059a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2160      	movs	r1, #96	; 0x60
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fad0 	bl	8005a02 <TIM_ITRx_SetConfig>
      break;
 8005462:	e019      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	6859      	ldr	r1, [r3, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	461a      	mov	r2, r3
 8005472:	f000 fa69 	bl	8005948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2140      	movs	r1, #64	; 0x40
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fac0 	bl	8005a02 <TIM_ITRx_SetConfig>
      break;
 8005482:	e009      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4619      	mov	r1, r3
 800548e:	4610      	mov	r0, r2
 8005490:	f000 fab7 	bl	8005a02 <TIM_ITRx_SetConfig>
      break;
 8005494:	e000      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr

080054e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr
	...

080054fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a33      	ldr	r2, [pc, #204]	; (80055dc <TIM_Base_SetConfig+0xe0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a32      	ldr	r2, [pc, #200]	; (80055e0 <TIM_Base_SetConfig+0xe4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00f      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005522:	d00b      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a2f      	ldr	r2, [pc, #188]	; (80055e4 <TIM_Base_SetConfig+0xe8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d007      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a2e      	ldr	r2, [pc, #184]	; (80055e8 <TIM_Base_SetConfig+0xec>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d003      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a2d      	ldr	r2, [pc, #180]	; (80055ec <TIM_Base_SetConfig+0xf0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d108      	bne.n	800554e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a22      	ldr	r2, [pc, #136]	; (80055dc <TIM_Base_SetConfig+0xe0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d013      	beq.n	800557e <TIM_Base_SetConfig+0x82>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a21      	ldr	r2, [pc, #132]	; (80055e0 <TIM_Base_SetConfig+0xe4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00f      	beq.n	800557e <TIM_Base_SetConfig+0x82>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005564:	d00b      	beq.n	800557e <TIM_Base_SetConfig+0x82>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a1e      	ldr	r2, [pc, #120]	; (80055e4 <TIM_Base_SetConfig+0xe8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d007      	beq.n	800557e <TIM_Base_SetConfig+0x82>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a1d      	ldr	r2, [pc, #116]	; (80055e8 <TIM_Base_SetConfig+0xec>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_Base_SetConfig+0x82>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a1c      	ldr	r2, [pc, #112]	; (80055ec <TIM_Base_SetConfig+0xf0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d108      	bne.n	8005590 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a09      	ldr	r2, [pc, #36]	; (80055dc <TIM_Base_SetConfig+0xe0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d003      	beq.n	80055c4 <TIM_Base_SetConfig+0xc8>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a08      	ldr	r2, [pc, #32]	; (80055e0 <TIM_Base_SetConfig+0xe4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d103      	bne.n	80055cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	615a      	str	r2, [r3, #20]
}
 80055d2:	bf00      	nop
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40013400 	.word	0x40013400
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800
 80055ec:	40000c00 	.word	0x40000c00

080055f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f023 0201 	bic.w	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0303 	bic.w	r3, r3, #3
 8005626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f023 0302 	bic.w	r3, r3, #2
 8005638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a20      	ldr	r2, [pc, #128]	; (80056c8 <TIM_OC1_SetConfig+0xd8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_OC1_SetConfig+0x64>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a1f      	ldr	r2, [pc, #124]	; (80056cc <TIM_OC1_SetConfig+0xdc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d10c      	bne.n	800566e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f023 0308 	bic.w	r3, r3, #8
 800565a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f023 0304 	bic.w	r3, r3, #4
 800566c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a15      	ldr	r2, [pc, #84]	; (80056c8 <TIM_OC1_SetConfig+0xd8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d003      	beq.n	800567e <TIM_OC1_SetConfig+0x8e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a14      	ldr	r2, [pc, #80]	; (80056cc <TIM_OC1_SetConfig+0xdc>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d111      	bne.n	80056a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800568c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	621a      	str	r2, [r3, #32]
}
 80056bc:	bf00      	nop
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bc80      	pop	{r7}
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40012c00 	.word	0x40012c00
 80056cc:	40013400 	.word	0x40013400

080056d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f023 0210 	bic.w	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	021b      	lsls	r3, r3, #8
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4313      	orrs	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f023 0320 	bic.w	r3, r3, #32
 800571a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a21      	ldr	r2, [pc, #132]	; (80057b0 <TIM_OC2_SetConfig+0xe0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_OC2_SetConfig+0x68>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a20      	ldr	r2, [pc, #128]	; (80057b4 <TIM_OC2_SetConfig+0xe4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d10d      	bne.n	8005754 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800573e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a16      	ldr	r2, [pc, #88]	; (80057b0 <TIM_OC2_SetConfig+0xe0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d003      	beq.n	8005764 <TIM_OC2_SetConfig+0x94>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <TIM_OC2_SetConfig+0xe4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d113      	bne.n	800578c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800576a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr
 80057b0:	40012c00 	.word	0x40012c00
 80057b4:	40013400 	.word	0x40013400

080057b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0303 	bic.w	r3, r3, #3
 80057ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a21      	ldr	r2, [pc, #132]	; (8005898 <TIM_OC3_SetConfig+0xe0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d003      	beq.n	800581e <TIM_OC3_SetConfig+0x66>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a20      	ldr	r2, [pc, #128]	; (800589c <TIM_OC3_SetConfig+0xe4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d10d      	bne.n	800583a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a16      	ldr	r2, [pc, #88]	; (8005898 <TIM_OC3_SetConfig+0xe0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <TIM_OC3_SetConfig+0x92>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a15      	ldr	r2, [pc, #84]	; (800589c <TIM_OC3_SetConfig+0xe4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d113      	bne.n	8005872 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	621a      	str	r2, [r3, #32]
}
 800588c:	bf00      	nop
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	bc80      	pop	{r7}
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40013400 	.word	0x40013400

080058a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	031b      	lsls	r3, r3, #12
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a11      	ldr	r2, [pc, #68]	; (8005940 <TIM_OC4_SetConfig+0xa0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d003      	beq.n	8005908 <TIM_OC4_SetConfig+0x68>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a10      	ldr	r2, [pc, #64]	; (8005944 <TIM_OC4_SetConfig+0xa4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d109      	bne.n	800591c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800590e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	019b      	lsls	r3, r3, #6
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	621a      	str	r2, [r3, #32]
}
 8005936:	bf00      	nop
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40013400 	.word	0x40013400

08005948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f023 0201 	bic.w	r2, r3, #1
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f023 030a 	bic.w	r3, r3, #10
 8005984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	621a      	str	r2, [r3, #32]
}
 800599a:	bf00      	nop
 800599c:	371c      	adds	r7, #28
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr

080059a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f023 0210 	bic.w	r2, r3, #16
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	031b      	lsls	r3, r3, #12
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	621a      	str	r2, [r3, #32]
}
 80059f8:	bf00      	nop
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr

08005a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f043 0307 	orr.w	r3, r3, #7
 8005a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	609a      	str	r2, [r3, #8]
}
 8005a2c:	bf00      	nop
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bc80      	pop	{r7}
 8005a34:	4770      	bx	lr

08005a36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b087      	sub	sp, #28
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
 8005a42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	021a      	lsls	r2, r3, #8
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	609a      	str	r2, [r3, #8]
}
 8005a6a:	bf00      	nop
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bc80      	pop	{r7}
 8005a72:	4770      	bx	lr

08005a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	2201      	movs	r2, #1
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a1a      	ldr	r2, [r3, #32]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	43db      	mvns	r3, r3
 8005a96:	401a      	ands	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a1a      	ldr	r2, [r3, #32]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aac:	431a      	orrs	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	621a      	str	r2, [r3, #32]
}
 8005ab2:	bf00      	nop
 8005ab4:	371c      	adds	r7, #28
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc80      	pop	{r7}
 8005aba:	4770      	bx	lr

08005abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e032      	b.n	8005b3a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b0c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr

08005b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bc80      	pop	{r7}
 8005b54:	4770      	bx	lr

08005b56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e03f      	b.n	8005bfa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fb fe86 	bl	80018a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2224      	movs	r2, #36	; 0x24
 8005b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fb8d 	bl	80062cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695a      	ldr	r2, [r3, #20]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b088      	sub	sp, #32
 8005c06:	af02      	add	r7, sp, #8
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	f040 8083 	bne.w	8005d2a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_UART_Transmit+0x2e>
 8005c2a:	88fb      	ldrh	r3, [r7, #6]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e07b      	b.n	8005d2c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_UART_Transmit+0x40>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e074      	b.n	8005d2c <HAL_UART_Transmit+0x12a>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2221      	movs	r2, #33	; 0x21
 8005c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005c58:	f7fc f882 	bl	8001d60 <HAL_GetTick>
 8005c5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	88fa      	ldrh	r2, [r7, #6]
 8005c62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	88fa      	ldrh	r2, [r7, #6]
 8005c68:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c6a:	e042      	b.n	8005cf2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c82:	d122      	bne.n	8005cca <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2180      	movs	r1, #128	; 0x80
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 f9b2 	bl	8005ff8 <UART_WaitOnFlagUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e046      	b.n	8005d2c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cb0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d103      	bne.n	8005cc2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	60bb      	str	r3, [r7, #8]
 8005cc0:	e017      	b.n	8005cf2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60bb      	str	r3, [r7, #8]
 8005cc8:	e013      	b.n	8005cf2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2180      	movs	r1, #128	; 0x80
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 f98f 	bl	8005ff8 <UART_WaitOnFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e023      	b.n	8005d2c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	60ba      	str	r2, [r7, #8]
 8005cea:	781a      	ldrb	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1b7      	bne.n	8005c6c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2200      	movs	r2, #0
 8005d04:	2140      	movs	r1, #64	; 0x40
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f976 	bl	8005ff8 <UART_WaitOnFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e00a      	b.n	8005d2c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e000      	b.n	8005d2c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005d2a:	2302      	movs	r3, #2
  }
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d140      	bne.n	8005dd0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <HAL_UART_Receive_IT+0x26>
 8005d54:	88fb      	ldrh	r3, [r7, #6]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e039      	b.n	8005dd2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_UART_Receive_IT+0x38>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e032      	b.n	8005dd2 <HAL_UART_Receive_IT+0x9e>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	88fa      	ldrh	r2, [r7, #6]
 8005d7e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	88fa      	ldrh	r2, [r7, #6]
 8005d84:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2222      	movs	r2, #34	; 0x22
 8005d90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005daa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695a      	ldr	r2, [r3, #20]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0220 	orr.w	r2, r2, #32
 8005dca:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e000      	b.n	8005dd2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005dd0:	2302      	movs	r3, #2
  }
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr

08005ddc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10d      	bne.n	8005e2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d008      	beq.n	8005e2e <HAL_UART_IRQHandler+0x52>
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f9ce 	bl	80061c8 <UART_Receive_IT>
      return;
 8005e2c:	e0cc      	b.n	8005fc8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80ab 	beq.w	8005f8c <HAL_UART_IRQHandler+0x1b0>
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d105      	bne.n	8005e4c <HAL_UART_IRQHandler+0x70>
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 80a0 	beq.w	8005f8c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <HAL_UART_IRQHandler+0x90>
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e64:	f043 0201 	orr.w	r2, r3, #1
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <HAL_UART_IRQHandler+0xb0>
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e84:	f043 0202 	orr.w	r2, r3, #2
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <HAL_UART_IRQHandler+0xd0>
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea4:	f043 0204 	orr.w	r2, r3, #4
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <HAL_UART_IRQHandler+0xf0>
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec4:	f043 0208 	orr.w	r2, r3, #8
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d078      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d007      	beq.n	8005eee <HAL_UART_IRQHandler+0x112>
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f96d 	bl	80061c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bf14      	ite	ne
 8005efc:	2301      	movne	r3, #1
 8005efe:	2300      	moveq	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <HAL_UART_IRQHandler+0x13a>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d031      	beq.n	8005f7a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f8b8 	bl	800608c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d023      	beq.n	8005f72 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	695a      	ldr	r2, [r3, #20]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f38:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d013      	beq.n	8005f6a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f46:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <HAL_UART_IRQHandler+0x1f4>)
 8005f48:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fc fa82 	bl	8002458 <HAL_DMA_Abort_IT>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d016      	beq.n	8005f88 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f64:	4610      	mov	r0, r2
 8005f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f68:	e00e      	b.n	8005f88 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f83b 	bl	8005fe6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	e00a      	b.n	8005f88 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f837 	bl	8005fe6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f78:	e006      	b.n	8005f88 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f833 	bl	8005fe6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005f86:	e01e      	b.n	8005fc6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f88:	bf00      	nop
    return;
 8005f8a:	e01c      	b.n	8005fc6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d008      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x1cc>
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f8a4 	bl	80060ee <UART_Transmit_IT>
    return;
 8005fa6:	e00f      	b.n	8005fc8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <HAL_UART_IRQHandler+0x1ec>
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d005      	beq.n	8005fc8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f8eb 	bl	8006198 <UART_EndTransmit_IT>
    return;
 8005fc2:	bf00      	nop
 8005fc4:	e000      	b.n	8005fc8 <HAL_UART_IRQHandler+0x1ec>
    return;
 8005fc6:	bf00      	nop
  }
}
 8005fc8:	3720      	adds	r7, #32
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	080060c7 	.word	0x080060c7

08005fd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr

08005ff8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006008:	e02c      	b.n	8006064 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d028      	beq.n	8006064 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d007      	beq.n	8006028 <UART_WaitOnFlagUntilTimeout+0x30>
 8006018:	f7fb fea2 	bl	8001d60 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	429a      	cmp	r2, r3
 8006026:	d21d      	bcs.n	8006064 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006036:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695a      	ldr	r2, [r3, #20]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0201 	bic.w	r2, r2, #1
 8006046:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e00f      	b.n	8006084 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	4013      	ands	r3, r2
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	429a      	cmp	r2, r3
 8006072:	bf0c      	ite	eq
 8006074:	2301      	moveq	r3, #1
 8006076:	2300      	movne	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	461a      	mov	r2, r3
 800607c:	79fb      	ldrb	r3, [r7, #7]
 800607e:	429a      	cmp	r2, r3
 8006080:	d0c3      	beq.n	800600a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	695a      	ldr	r2, [r3, #20]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0201 	bic.w	r2, r2, #1
 80060b2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bc80      	pop	{r7}
 80060c4:	4770      	bx	lr

080060c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f7ff ff80 	bl	8005fe6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060e6:	bf00      	nop
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b21      	cmp	r3, #33	; 0x21
 8006100:	d144      	bne.n	800618c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610a:	d11a      	bne.n	8006142 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006120:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d105      	bne.n	8006136 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	1c9a      	adds	r2, r3, #2
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	621a      	str	r2, [r3, #32]
 8006134:	e00e      	b.n	8006154 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	621a      	str	r2, [r3, #32]
 8006140:	e008      	b.n	8006154 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	1c59      	adds	r1, r3, #1
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6211      	str	r1, [r2, #32]
 800614c:	781a      	ldrb	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29b      	uxth	r3, r3
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4619      	mov	r1, r3
 8006162:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10f      	bne.n	8006188 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006176:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006186:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	e000      	b.n	800618e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800618c:	2302      	movs	r3, #2
  }
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr

08006198 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff ff0b 	bl	8005fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b22      	cmp	r3, #34	; 0x22
 80061da:	d171      	bne.n	80062c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e4:	d123      	bne.n	800622e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10e      	bne.n	8006212 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	1c9a      	adds	r2, r3, #2
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	629a      	str	r2, [r3, #40]	; 0x28
 8006210:	e029      	b.n	8006266 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	b29b      	uxth	r3, r3
 800621a:	b2db      	uxtb	r3, r3
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	629a      	str	r2, [r3, #40]	; 0x28
 800622c:	e01b      	b.n	8006266 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6858      	ldr	r0, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	1c59      	adds	r1, r3, #1
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6291      	str	r1, [r2, #40]	; 0x28
 8006246:	b2c2      	uxtb	r2, r0
 8006248:	701a      	strb	r2, [r3, #0]
 800624a:	e00c      	b.n	8006266 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	b2da      	uxtb	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	1c58      	adds	r0, r3, #1
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	6288      	str	r0, [r1, #40]	; 0x28
 800625e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006262:	b2d2      	uxtb	r2, r2
 8006264:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800626a:	b29b      	uxth	r3, r3
 800626c:	3b01      	subs	r3, #1
 800626e:	b29b      	uxth	r3, r3
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	4619      	mov	r1, r3
 8006274:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006276:	2b00      	cmp	r3, #0
 8006278:	d120      	bne.n	80062bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0220 	bic.w	r2, r2, #32
 8006288:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68da      	ldr	r2, [r3, #12]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006298:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695a      	ldr	r2, [r3, #20]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0201 	bic.w	r2, r2, #1
 80062a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fa fb20 	bl	80008f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e002      	b.n	80062c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	e000      	b.n	80062c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80062c0:	2302      	movs	r3, #2
  }
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006306:	f023 030c 	bic.w	r3, r3, #12
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	68f9      	ldr	r1, [r7, #12]
 8006310:	430b      	orrs	r3, r1
 8006312:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a52      	ldr	r2, [pc, #328]	; (8006478 <UART_SetConfig+0x1ac>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d14e      	bne.n	80063d2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006334:	f7fe fc68 	bl	8004c08 <HAL_RCC_GetPCLK2Freq>
 8006338:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	009a      	lsls	r2, r3, #2
 8006344:	441a      	add	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006350:	4a4a      	ldr	r2, [pc, #296]	; (800647c <UART_SetConfig+0x1b0>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	0119      	lsls	r1, r3, #4
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	4613      	mov	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	009a      	lsls	r2, r3, #2
 8006364:	441a      	add	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006370:	4b42      	ldr	r3, [pc, #264]	; (800647c <UART_SetConfig+0x1b0>)
 8006372:	fba3 0302 	umull	r0, r3, r3, r2
 8006376:	095b      	lsrs	r3, r3, #5
 8006378:	2064      	movs	r0, #100	; 0x64
 800637a:	fb00 f303 	mul.w	r3, r0, r3
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	3332      	adds	r3, #50	; 0x32
 8006384:	4a3d      	ldr	r2, [pc, #244]	; (800647c <UART_SetConfig+0x1b0>)
 8006386:	fba2 2303 	umull	r2, r3, r2, r3
 800638a:	095b      	lsrs	r3, r3, #5
 800638c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006390:	4419      	add	r1, r3
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009a      	lsls	r2, r3, #2
 800639c:	441a      	add	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063a8:	4b34      	ldr	r3, [pc, #208]	; (800647c <UART_SetConfig+0x1b0>)
 80063aa:	fba3 0302 	umull	r0, r3, r3, r2
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	2064      	movs	r0, #100	; 0x64
 80063b2:	fb00 f303 	mul.w	r3, r0, r3
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	3332      	adds	r3, #50	; 0x32
 80063bc:	4a2f      	ldr	r2, [pc, #188]	; (800647c <UART_SetConfig+0x1b0>)
 80063be:	fba2 2303 	umull	r2, r3, r2, r3
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	f003 020f 	and.w	r2, r3, #15
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	440a      	add	r2, r1
 80063ce:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80063d0:	e04d      	b.n	800646e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80063d2:	f7fe fc05 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 80063d6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009a      	lsls	r2, r3, #2
 80063e2:	441a      	add	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ee:	4a23      	ldr	r2, [pc, #140]	; (800647c <UART_SetConfig+0x1b0>)
 80063f0:	fba2 2303 	umull	r2, r3, r2, r3
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	0119      	lsls	r1, r3, #4
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	4613      	mov	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	009a      	lsls	r2, r3, #2
 8006402:	441a      	add	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	fbb2 f2f3 	udiv	r2, r2, r3
 800640e:	4b1b      	ldr	r3, [pc, #108]	; (800647c <UART_SetConfig+0x1b0>)
 8006410:	fba3 0302 	umull	r0, r3, r3, r2
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	2064      	movs	r0, #100	; 0x64
 8006418:	fb00 f303 	mul.w	r3, r0, r3
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	3332      	adds	r3, #50	; 0x32
 8006422:	4a16      	ldr	r2, [pc, #88]	; (800647c <UART_SetConfig+0x1b0>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800642e:	4419      	add	r1, r3
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	4613      	mov	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	009a      	lsls	r2, r3, #2
 800643a:	441a      	add	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	fbb2 f2f3 	udiv	r2, r2, r3
 8006446:	4b0d      	ldr	r3, [pc, #52]	; (800647c <UART_SetConfig+0x1b0>)
 8006448:	fba3 0302 	umull	r0, r3, r3, r2
 800644c:	095b      	lsrs	r3, r3, #5
 800644e:	2064      	movs	r0, #100	; 0x64
 8006450:	fb00 f303 	mul.w	r3, r0, r3
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	3332      	adds	r3, #50	; 0x32
 800645a:	4a08      	ldr	r2, [pc, #32]	; (800647c <UART_SetConfig+0x1b0>)
 800645c:	fba2 2303 	umull	r2, r3, r2, r3
 8006460:	095b      	lsrs	r3, r3, #5
 8006462:	f003 020f 	and.w	r2, r3, #15
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	440a      	add	r2, r1
 800646c:	609a      	str	r2, [r3, #8]
}
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	40013800 	.word	0x40013800
 800647c:	51eb851f 	.word	0x51eb851f

08006480 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006480:	b084      	sub	sp, #16
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	f107 0014 	add.w	r0, r7, #20
 800648e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	bc80      	pop	{r7}
 800649c:	b004      	add	sp, #16
 800649e:	4770      	bx	lr

080064a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064a8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80064ac:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	89fb      	ldrh	r3, [r7, #14]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bc80      	pop	{r7}
 80064cc:	4770      	bx	lr

080064ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b085      	sub	sp, #20
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064d6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80064da:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	b21a      	sxth	r2, r3
 80064e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80064ea:	43db      	mvns	r3, r3
 80064ec:	b21b      	sxth	r3, r3
 80064ee:	4013      	ands	r3, r2
 80064f0:	b21b      	sxth	r3, r3
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr

08006506 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	460b      	mov	r3, r1
 8006510:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	bc80      	pop	{r7}
 800651c:	4770      	bx	lr

0800651e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800651e:	b084      	sub	sp, #16
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	f107 0014 	add.w	r0, r7, #20
 800652c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff ffa5 	bl	80064a0 <USB_EnableGlobalInt>

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006562:	b004      	add	sp, #16
 8006564:	4770      	bx	lr
	...

08006568 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006568:	b490      	push	{r4, r7}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	78db      	ldrb	r3, [r3, #3]
 8006592:	2b03      	cmp	r3, #3
 8006594:	d819      	bhi.n	80065ca <USB_ActivateEndpoint+0x62>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <USB_ActivateEndpoint+0x34>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065ad 	.word	0x080065ad
 80065a0:	080065c1 	.word	0x080065c1
 80065a4:	080065d1 	.word	0x080065d1
 80065a8:	080065b7 	.word	0x080065b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80065ac:	89bb      	ldrh	r3, [r7, #12]
 80065ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065b2:	81bb      	strh	r3, [r7, #12]
      break;
 80065b4:	e00d      	b.n	80065d2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80065b6:	89bb      	ldrh	r3, [r7, #12]
 80065b8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80065bc:	81bb      	strh	r3, [r7, #12]
      break;
 80065be:	e008      	b.n	80065d2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80065c0:	89bb      	ldrh	r3, [r7, #12]
 80065c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065c6:	81bb      	strh	r3, [r7, #12]
      break;
 80065c8:	e003      	b.n	80065d2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	73fb      	strb	r3, [r7, #15]
      break;
 80065ce:	e000      	b.n	80065d2 <USB_ActivateEndpoint+0x6a>
      break;
 80065d0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	441a      	add	r2, r3
 80065dc:	89bb      	ldrh	r3, [r7, #12]
 80065de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006608:	b29a      	uxth	r2, r3
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	4313      	orrs	r3, r2
 8006612:	b29c      	uxth	r4, r3
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	441a      	add	r2, r3
 800661e:	4b8a      	ldr	r3, [pc, #552]	; (8006848 <USB_ActivateEndpoint+0x2e0>)
 8006620:	4323      	orrs	r3, r4
 8006622:	b29b      	uxth	r3, r3
 8006624:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	7b1b      	ldrb	r3, [r3, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f040 8112 	bne.w	8006854 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	785b      	ldrb	r3, [r3, #1]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d067      	beq.n	8006708 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006638:	687c      	ldr	r4, [r7, #4]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006640:	b29b      	uxth	r3, r3
 8006642:	441c      	add	r4, r3
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	4423      	add	r3, r4
 800664c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006650:	461c      	mov	r4, r3
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	88db      	ldrh	r3, [r3, #6]
 8006656:	085b      	lsrs	r3, r3, #1
 8006658:	b29b      	uxth	r3, r3
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	b29b      	uxth	r3, r3
 800665e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29c      	uxth	r4, r3
 800666e:	4623      	mov	r3, r4
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d014      	beq.n	80066a2 <USB_ActivateEndpoint+0x13a>
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800668a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668e:	b29c      	uxth	r4, r3
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	441a      	add	r2, r3
 800669a:	4b6c      	ldr	r3, [pc, #432]	; (800684c <USB_ActivateEndpoint+0x2e4>)
 800669c:	4323      	orrs	r3, r4
 800669e:	b29b      	uxth	r3, r3
 80066a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	78db      	ldrb	r3, [r3, #3]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d018      	beq.n	80066dc <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066c0:	b29c      	uxth	r4, r3
 80066c2:	f084 0320 	eor.w	r3, r4, #32
 80066c6:	b29c      	uxth	r4, r3
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	4b5d      	ldr	r3, [pc, #372]	; (8006848 <USB_ActivateEndpoint+0x2e0>)
 80066d4:	4323      	orrs	r3, r4
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	8013      	strh	r3, [r2, #0]
 80066da:	e22b      	b.n	8006b34 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f2:	b29c      	uxth	r4, r3
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	441a      	add	r2, r3
 80066fe:	4b52      	ldr	r3, [pc, #328]	; (8006848 <USB_ActivateEndpoint+0x2e0>)
 8006700:	4323      	orrs	r3, r4
 8006702:	b29b      	uxth	r3, r3
 8006704:	8013      	strh	r3, [r2, #0]
 8006706:	e215      	b.n	8006b34 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006708:	687c      	ldr	r4, [r7, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006710:	b29b      	uxth	r3, r3
 8006712:	441c      	add	r4, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	4423      	add	r3, r4
 800671c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006720:	461c      	mov	r4, r3
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	88db      	ldrh	r3, [r3, #6]
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	b29b      	uxth	r3, r3
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	b29b      	uxth	r3, r3
 800672e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006730:	687c      	ldr	r4, [r7, #4]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006738:	b29b      	uxth	r3, r3
 800673a:	441c      	add	r4, r3
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	4423      	add	r3, r4
 8006744:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006748:	461c      	mov	r4, r3
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10e      	bne.n	8006770 <USB_ActivateEndpoint+0x208>
 8006752:	8823      	ldrh	r3, [r4, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800675a:	b29b      	uxth	r3, r3
 800675c:	8023      	strh	r3, [r4, #0]
 800675e:	8823      	ldrh	r3, [r4, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800676a:	b29b      	uxth	r3, r3
 800676c:	8023      	strh	r3, [r4, #0]
 800676e:	e02d      	b.n	80067cc <USB_ActivateEndpoint+0x264>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2b3e      	cmp	r3, #62	; 0x3e
 8006776:	d812      	bhi.n	800679e <USB_ActivateEndpoint+0x236>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	60bb      	str	r3, [r7, #8]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <USB_ActivateEndpoint+0x22a>
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	3301      	adds	r3, #1
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	b29b      	uxth	r3, r3
 8006796:	029b      	lsls	r3, r3, #10
 8006798:	b29b      	uxth	r3, r3
 800679a:	8023      	strh	r3, [r4, #0]
 800679c:	e016      	b.n	80067cc <USB_ActivateEndpoint+0x264>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	095b      	lsrs	r3, r3, #5
 80067a4:	60bb      	str	r3, [r7, #8]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 031f 	and.w	r3, r3, #31
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d102      	bne.n	80067b8 <USB_ActivateEndpoint+0x250>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	60bb      	str	r3, [r7, #8]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	029b      	lsls	r3, r3, #10
 80067be:	b29b      	uxth	r3, r3
 80067c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	b29c      	uxth	r4, r3
 80067da:	4623      	mov	r3, r4
 80067dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d014      	beq.n	800680e <USB_ActivateEndpoint+0x2a6>
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fa:	b29c      	uxth	r4, r3
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	441a      	add	r2, r3
 8006806:	4b12      	ldr	r3, [pc, #72]	; (8006850 <USB_ActivateEndpoint+0x2e8>)
 8006808:	4323      	orrs	r3, r4
 800680a:	b29b      	uxth	r3, r3
 800680c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29b      	uxth	r3, r3
 800681c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006824:	b29c      	uxth	r4, r3
 8006826:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800682a:	b29c      	uxth	r4, r3
 800682c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006830:	b29c      	uxth	r4, r3
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	441a      	add	r2, r3
 800683c:	4b02      	ldr	r3, [pc, #8]	; (8006848 <USB_ActivateEndpoint+0x2e0>)
 800683e:	4323      	orrs	r3, r4
 8006840:	b29b      	uxth	r3, r3
 8006842:	8013      	strh	r3, [r2, #0]
 8006844:	e176      	b.n	8006b34 <USB_ActivateEndpoint+0x5cc>
 8006846:	bf00      	nop
 8006848:	ffff8080 	.word	0xffff8080
 800684c:	ffff80c0 	.word	0xffff80c0
 8006850:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b29b      	uxth	r3, r3
 8006862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686a:	b29c      	uxth	r4, r3
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	441a      	add	r2, r3
 8006876:	4b96      	ldr	r3, [pc, #600]	; (8006ad0 <USB_ActivateEndpoint+0x568>)
 8006878:	4323      	orrs	r3, r4
 800687a:	b29b      	uxth	r3, r3
 800687c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800687e:	687c      	ldr	r4, [r7, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006886:	b29b      	uxth	r3, r3
 8006888:	441c      	add	r4, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	4423      	add	r3, r4
 8006892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006896:	461c      	mov	r4, r3
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	891b      	ldrh	r3, [r3, #8]
 800689c:	085b      	lsrs	r3, r3, #1
 800689e:	b29b      	uxth	r3, r3
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	8023      	strh	r3, [r4, #0]
 80068a6:	687c      	ldr	r4, [r7, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	441c      	add	r4, r3
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	4423      	add	r3, r4
 80068ba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80068be:	461c      	mov	r4, r3
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	895b      	ldrh	r3, [r3, #10]
 80068c4:	085b      	lsrs	r3, r3, #1
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	785b      	ldrb	r3, [r3, #1]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f040 8088 	bne.w	80069e8 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b29c      	uxth	r4, r3
 80068e6:	4623      	mov	r3, r4
 80068e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d014      	beq.n	800691a <USB_ActivateEndpoint+0x3b2>
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006906:	b29c      	uxth	r4, r3
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	441a      	add	r2, r3
 8006912:	4b70      	ldr	r3, [pc, #448]	; (8006ad4 <USB_ActivateEndpoint+0x56c>)
 8006914:	4323      	orrs	r3, r4
 8006916:	b29b      	uxth	r3, r3
 8006918:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29c      	uxth	r4, r3
 8006928:	4623      	mov	r3, r4
 800692a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	d014      	beq.n	800695c <USB_ActivateEndpoint+0x3f4>
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006948:	b29c      	uxth	r4, r3
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	441a      	add	r2, r3
 8006954:	4b60      	ldr	r3, [pc, #384]	; (8006ad8 <USB_ActivateEndpoint+0x570>)
 8006956:	4323      	orrs	r3, r4
 8006958:	b29b      	uxth	r3, r3
 800695a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	b29c      	uxth	r4, r3
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	441a      	add	r2, r3
 800697e:	4b56      	ldr	r3, [pc, #344]	; (8006ad8 <USB_ActivateEndpoint+0x570>)
 8006980:	4323      	orrs	r3, r4
 8006982:	b29b      	uxth	r3, r3
 8006984:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699c:	b29c      	uxth	r4, r3
 800699e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80069a2:	b29c      	uxth	r4, r3
 80069a4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80069a8:	b29c      	uxth	r4, r3
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	441a      	add	r2, r3
 80069b4:	4b49      	ldr	r3, [pc, #292]	; (8006adc <USB_ActivateEndpoint+0x574>)
 80069b6:	4323      	orrs	r3, r4
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d2:	b29c      	uxth	r4, r3
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	441a      	add	r2, r3
 80069de:	4b3f      	ldr	r3, [pc, #252]	; (8006adc <USB_ActivateEndpoint+0x574>)
 80069e0:	4323      	orrs	r3, r4
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	8013      	strh	r3, [r2, #0]
 80069e6:	e0a5      	b.n	8006b34 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29c      	uxth	r4, r3
 80069f6:	4623      	mov	r3, r4
 80069f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d014      	beq.n	8006a2a <USB_ActivateEndpoint+0x4c2>
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a16:	b29c      	uxth	r4, r3
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	441a      	add	r2, r3
 8006a22:	4b2c      	ldr	r3, [pc, #176]	; (8006ad4 <USB_ActivateEndpoint+0x56c>)
 8006a24:	4323      	orrs	r3, r4
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29c      	uxth	r4, r3
 8006a38:	4623      	mov	r3, r4
 8006a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d014      	beq.n	8006a6c <USB_ActivateEndpoint+0x504>
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a58:	b29c      	uxth	r4, r3
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	441a      	add	r2, r3
 8006a64:	4b1c      	ldr	r3, [pc, #112]	; (8006ad8 <USB_ActivateEndpoint+0x570>)
 8006a66:	4323      	orrs	r3, r4
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a82:	b29c      	uxth	r4, r3
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	4b11      	ldr	r3, [pc, #68]	; (8006ad4 <USB_ActivateEndpoint+0x56c>)
 8006a90:	4323      	orrs	r3, r4
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	78db      	ldrb	r3, [r3, #3]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d020      	beq.n	8006ae0 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab4:	b29c      	uxth	r4, r3
 8006ab6:	f084 0320 	eor.w	r3, r4, #32
 8006aba:	b29c      	uxth	r4, r3
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	441a      	add	r2, r3
 8006ac6:	4b05      	ldr	r3, [pc, #20]	; (8006adc <USB_ActivateEndpoint+0x574>)
 8006ac8:	4323      	orrs	r3, r4
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	8013      	strh	r3, [r2, #0]
 8006ace:	e01c      	b.n	8006b0a <USB_ActivateEndpoint+0x5a2>
 8006ad0:	ffff8180 	.word	0xffff8180
 8006ad4:	ffffc080 	.word	0xffffc080
 8006ad8:	ffff80c0 	.word	0xffff80c0
 8006adc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af6:	b29c      	uxth	r4, r3
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	441a      	add	r2, r3
 8006b02:	4b0f      	ldr	r3, [pc, #60]	; (8006b40 <USB_ActivateEndpoint+0x5d8>)
 8006b04:	4323      	orrs	r3, r4
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b20:	b29c      	uxth	r4, r3
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	441a      	add	r2, r3
 8006b2c:	4b04      	ldr	r3, [pc, #16]	; (8006b40 <USB_ActivateEndpoint+0x5d8>)
 8006b2e:	4323      	orrs	r3, r4
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bc90      	pop	{r4, r7}
 8006b3e:	4770      	bx	lr
 8006b40:	ffff8080 	.word	0xffff8080

08006b44 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b44:	b490      	push	{r4, r7}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	7b1b      	ldrb	r3, [r3, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d171      	bne.n	8006c3a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	785b      	ldrb	r3, [r3, #1]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d036      	beq.n	8006bcc <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	b29c      	uxth	r4, r3
 8006b6c:	4623      	mov	r3, r4
 8006b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d014      	beq.n	8006ba0 <USB_DeactivateEndpoint+0x5c>
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8c:	b29c      	uxth	r4, r3
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	441a      	add	r2, r3
 8006b98:	4b6b      	ldr	r3, [pc, #428]	; (8006d48 <USB_DeactivateEndpoint+0x204>)
 8006b9a:	4323      	orrs	r3, r4
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb6:	b29c      	uxth	r4, r3
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	441a      	add	r2, r3
 8006bc2:	4b62      	ldr	r3, [pc, #392]	; (8006d4c <USB_DeactivateEndpoint+0x208>)
 8006bc4:	4323      	orrs	r3, r4
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	8013      	strh	r3, [r2, #0]
 8006bca:	e144      	b.n	8006e56 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29c      	uxth	r4, r3
 8006bda:	4623      	mov	r3, r4
 8006bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d014      	beq.n	8006c0e <USB_DeactivateEndpoint+0xca>
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfa:	b29c      	uxth	r4, r3
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	441a      	add	r2, r3
 8006c06:	4b52      	ldr	r3, [pc, #328]	; (8006d50 <USB_DeactivateEndpoint+0x20c>)
 8006c08:	4323      	orrs	r3, r4
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c24:	b29c      	uxth	r4, r3
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	441a      	add	r2, r3
 8006c30:	4b46      	ldr	r3, [pc, #280]	; (8006d4c <USB_DeactivateEndpoint+0x208>)
 8006c32:	4323      	orrs	r3, r4
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	8013      	strh	r3, [r2, #0]
 8006c38:	e10d      	b.n	8006e56 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	785b      	ldrb	r3, [r3, #1]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f040 8088 	bne.w	8006d54 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29c      	uxth	r4, r3
 8006c52:	4623      	mov	r3, r4
 8006c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d014      	beq.n	8006c86 <USB_DeactivateEndpoint+0x142>
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c72:	b29c      	uxth	r4, r3
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	441a      	add	r2, r3
 8006c7e:	4b34      	ldr	r3, [pc, #208]	; (8006d50 <USB_DeactivateEndpoint+0x20c>)
 8006c80:	4323      	orrs	r3, r4
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	b29c      	uxth	r4, r3
 8006c94:	4623      	mov	r3, r4
 8006c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d014      	beq.n	8006cc8 <USB_DeactivateEndpoint+0x184>
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb4:	b29c      	uxth	r4, r3
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	441a      	add	r2, r3
 8006cc0:	4b21      	ldr	r3, [pc, #132]	; (8006d48 <USB_DeactivateEndpoint+0x204>)
 8006cc2:	4323      	orrs	r3, r4
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cde:	b29c      	uxth	r4, r3
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	441a      	add	r2, r3
 8006cea:	4b17      	ldr	r3, [pc, #92]	; (8006d48 <USB_DeactivateEndpoint+0x204>)
 8006cec:	4323      	orrs	r3, r4
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d08:	b29c      	uxth	r4, r3
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	441a      	add	r2, r3
 8006d14:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <USB_DeactivateEndpoint+0x208>)
 8006d16:	4323      	orrs	r3, r4
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d32:	b29c      	uxth	r4, r3
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	441a      	add	r2, r3
 8006d3e:	4b03      	ldr	r3, [pc, #12]	; (8006d4c <USB_DeactivateEndpoint+0x208>)
 8006d40:	4323      	orrs	r3, r4
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
 8006d46:	e086      	b.n	8006e56 <USB_DeactivateEndpoint+0x312>
 8006d48:	ffff80c0 	.word	0xffff80c0
 8006d4c:	ffff8080 	.word	0xffff8080
 8006d50:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	b29c      	uxth	r4, r3
 8006d62:	4623      	mov	r3, r4
 8006d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d014      	beq.n	8006d96 <USB_DeactivateEndpoint+0x252>
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	b29c      	uxth	r4, r3
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	441a      	add	r2, r3
 8006d8e:	4b35      	ldr	r3, [pc, #212]	; (8006e64 <USB_DeactivateEndpoint+0x320>)
 8006d90:	4323      	orrs	r3, r4
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29c      	uxth	r4, r3
 8006da4:	4623      	mov	r3, r4
 8006da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d014      	beq.n	8006dd8 <USB_DeactivateEndpoint+0x294>
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc4:	b29c      	uxth	r4, r3
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	441a      	add	r2, r3
 8006dd0:	4b25      	ldr	r3, [pc, #148]	; (8006e68 <USB_DeactivateEndpoint+0x324>)
 8006dd2:	4323      	orrs	r3, r4
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dee:	b29c      	uxth	r4, r3
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	4b1a      	ldr	r3, [pc, #104]	; (8006e64 <USB_DeactivateEndpoint+0x320>)
 8006dfc:	4323      	orrs	r3, r4
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e18:	b29c      	uxth	r4, r3
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <USB_DeactivateEndpoint+0x328>)
 8006e26:	4323      	orrs	r3, r4
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e42:	b29c      	uxth	r4, r3
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	441a      	add	r2, r3
 8006e4e:	4b07      	ldr	r3, [pc, #28]	; (8006e6c <USB_DeactivateEndpoint+0x328>)
 8006e50:	4323      	orrs	r3, r4
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bc90      	pop	{r4, r7}
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	ffffc080 	.word	0xffffc080
 8006e68:	ffff80c0 	.word	0xffff80c0
 8006e6c:	ffff8080 	.word	0xffff8080

08006e70 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e70:	b590      	push	{r4, r7, lr}
 8006e72:	b08d      	sub	sp, #52	; 0x34
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	785b      	ldrb	r3, [r3, #1]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	f040 8160 	bne.w	8007144 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	699a      	ldr	r2, [r3, #24]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d909      	bls.n	8006ea4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	699a      	ldr	r2, [r3, #24]
 8006e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9c:	1ad2      	subs	r2, r2, r3
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	619a      	str	r2, [r3, #24]
 8006ea2:	e005      	b.n	8006eb0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2200      	movs	r2, #0
 8006eae:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	7b1b      	ldrb	r3, [r3, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d119      	bne.n	8006eec <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	6959      	ldr	r1, [r3, #20]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	88da      	ldrh	r2, [r3, #6]
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fba2 	bl	800760e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006eca:	687c      	ldr	r4, [r7, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	441c      	add	r4, r3
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	4423      	add	r3, r4
 8006ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ee2:	461c      	mov	r4, r3
 8006ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	8023      	strh	r3, [r4, #0]
 8006eea:	e10f      	b.n	800710c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d065      	beq.n	8006fce <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f02:	687c      	ldr	r4, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	785b      	ldrb	r3, [r3, #1]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d148      	bne.n	8006f9e <USB_EPStartXfer+0x12e>
 8006f0c:	687c      	ldr	r4, [r7, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	441c      	add	r4, r3
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	011b      	lsls	r3, r3, #4
 8006f1e:	4423      	add	r3, r4
 8006f20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f24:	461c      	mov	r4, r3
 8006f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10e      	bne.n	8006f4a <USB_EPStartXfer+0xda>
 8006f2c:	8823      	ldrh	r3, [r4, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	8023      	strh	r3, [r4, #0]
 8006f38:	8823      	ldrh	r3, [r4, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	8023      	strh	r3, [r4, #0]
 8006f48:	e03d      	b.n	8006fc6 <USB_EPStartXfer+0x156>
 8006f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f4e:	d810      	bhi.n	8006f72 <USB_EPStartXfer+0x102>
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24
 8006f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <USB_EPStartXfer+0xf6>
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	3301      	adds	r3, #1
 8006f64:	627b      	str	r3, [r7, #36]	; 0x24
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	029b      	lsls	r3, r3, #10
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	8023      	strh	r3, [r4, #0]
 8006f70:	e029      	b.n	8006fc6 <USB_EPStartXfer+0x156>
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	095b      	lsrs	r3, r3, #5
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	f003 031f 	and.w	r3, r3, #31
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d102      	bne.n	8006f88 <USB_EPStartXfer+0x118>
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	3b01      	subs	r3, #1
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	029b      	lsls	r3, r3, #10
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	8023      	strh	r3, [r4, #0]
 8006f9c:	e013      	b.n	8006fc6 <USB_EPStartXfer+0x156>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	785b      	ldrb	r3, [r3, #1]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d10f      	bne.n	8006fc6 <USB_EPStartXfer+0x156>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	441c      	add	r4, r3
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	4423      	add	r3, r4
 8006fb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	895b      	ldrh	r3, [r3, #10]
 8006fca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006fcc:	e063      	b.n	8007096 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	785b      	ldrb	r3, [r3, #1]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d148      	bne.n	8007068 <USB_EPStartXfer+0x1f8>
 8006fd6:	687c      	ldr	r4, [r7, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	441c      	add	r4, r3
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	4423      	add	r3, r4
 8006fea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fee:	461c      	mov	r4, r3
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10e      	bne.n	8007014 <USB_EPStartXfer+0x1a4>
 8006ff6:	8823      	ldrh	r3, [r4, #0]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	8023      	strh	r3, [r4, #0]
 8007002:	8823      	ldrh	r3, [r4, #0]
 8007004:	b29b      	uxth	r3, r3
 8007006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800700a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800700e:	b29b      	uxth	r3, r3
 8007010:	8023      	strh	r3, [r4, #0]
 8007012:	e03d      	b.n	8007090 <USB_EPStartXfer+0x220>
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	2b3e      	cmp	r3, #62	; 0x3e
 8007018:	d810      	bhi.n	800703c <USB_EPStartXfer+0x1cc>
 800701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701c:	085b      	lsrs	r3, r3, #1
 800701e:	623b      	str	r3, [r7, #32]
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <USB_EPStartXfer+0x1c0>
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	3301      	adds	r3, #1
 800702e:	623b      	str	r3, [r7, #32]
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	b29b      	uxth	r3, r3
 8007034:	029b      	lsls	r3, r3, #10
 8007036:	b29b      	uxth	r3, r3
 8007038:	8023      	strh	r3, [r4, #0]
 800703a:	e029      	b.n	8007090 <USB_EPStartXfer+0x220>
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	095b      	lsrs	r3, r3, #5
 8007040:	623b      	str	r3, [r7, #32]
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	f003 031f 	and.w	r3, r3, #31
 8007048:	2b00      	cmp	r3, #0
 800704a:	d102      	bne.n	8007052 <USB_EPStartXfer+0x1e2>
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	3b01      	subs	r3, #1
 8007050:	623b      	str	r3, [r7, #32]
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	b29b      	uxth	r3, r3
 8007056:	029b      	lsls	r3, r3, #10
 8007058:	b29b      	uxth	r3, r3
 800705a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007062:	b29b      	uxth	r3, r3
 8007064:	8023      	strh	r3, [r4, #0]
 8007066:	e013      	b.n	8007090 <USB_EPStartXfer+0x220>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d10f      	bne.n	8007090 <USB_EPStartXfer+0x220>
 8007070:	687c      	ldr	r4, [r7, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007078:	b29b      	uxth	r3, r3
 800707a:	441c      	add	r4, r3
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	011b      	lsls	r3, r3, #4
 8007082:	4423      	add	r3, r4
 8007084:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007088:	461c      	mov	r4, r3
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	b29b      	uxth	r3, r3
 800708e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	891b      	ldrh	r3, [r3, #8]
 8007094:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6959      	ldr	r1, [r3, #20]
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	b29b      	uxth	r3, r3
 800709e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fab4 	bl	800760e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	785b      	ldrb	r3, [r3, #1]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d115      	bne.n	80070da <USB_EPStartXfer+0x26a>
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c4:	b29c      	uxth	r4, r3
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	441a      	add	r2, r3
 80070d0:	4b9a      	ldr	r3, [pc, #616]	; (800733c <USB_EPStartXfer+0x4cc>)
 80070d2:	4323      	orrs	r3, r4
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	8013      	strh	r3, [r2, #0]
 80070d8:	e018      	b.n	800710c <USB_EPStartXfer+0x29c>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	785b      	ldrb	r3, [r3, #1]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d114      	bne.n	800710c <USB_EPStartXfer+0x29c>
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f8:	b29c      	uxth	r4, r3
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	441a      	add	r2, r3
 8007104:	4b8e      	ldr	r3, [pc, #568]	; (8007340 <USB_EPStartXfer+0x4d0>)
 8007106:	4323      	orrs	r3, r4
 8007108:	b29b      	uxth	r3, r3
 800710a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	b29b      	uxth	r3, r3
 800711a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800711e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007122:	b29c      	uxth	r4, r3
 8007124:	f084 0310 	eor.w	r3, r4, #16
 8007128:	b29c      	uxth	r4, r3
 800712a:	f084 0320 	eor.w	r3, r4, #32
 800712e:	b29c      	uxth	r4, r3
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	441a      	add	r2, r3
 800713a:	4b82      	ldr	r3, [pc, #520]	; (8007344 <USB_EPStartXfer+0x4d4>)
 800713c:	4323      	orrs	r3, r4
 800713e:	b29b      	uxth	r3, r3
 8007140:	8013      	strh	r3, [r2, #0]
 8007142:	e146      	b.n	80073d2 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	699a      	ldr	r2, [r3, #24]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	429a      	cmp	r2, r3
 800714e:	d909      	bls.n	8007164 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	699a      	ldr	r2, [r3, #24]
 800715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715c:	1ad2      	subs	r2, r2, r3
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	619a      	str	r2, [r3, #24]
 8007162:	e005      	b.n	8007170 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2200      	movs	r2, #0
 800716e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	7b1b      	ldrb	r3, [r3, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d148      	bne.n	800720a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007178:	687c      	ldr	r4, [r7, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007180:	b29b      	uxth	r3, r3
 8007182:	441c      	add	r4, r3
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	4423      	add	r3, r4
 800718c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007190:	461c      	mov	r4, r3
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10e      	bne.n	80071b6 <USB_EPStartXfer+0x346>
 8007198:	8823      	ldrh	r3, [r4, #0]
 800719a:	b29b      	uxth	r3, r3
 800719c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	8023      	strh	r3, [r4, #0]
 80071a4:	8823      	ldrh	r3, [r4, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	8023      	strh	r3, [r4, #0]
 80071b4:	e0f2      	b.n	800739c <USB_EPStartXfer+0x52c>
 80071b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b8:	2b3e      	cmp	r3, #62	; 0x3e
 80071ba:	d810      	bhi.n	80071de <USB_EPStartXfer+0x36e>
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	085b      	lsrs	r3, r3, #1
 80071c0:	61fb      	str	r3, [r7, #28]
 80071c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <USB_EPStartXfer+0x362>
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	3301      	adds	r3, #1
 80071d0:	61fb      	str	r3, [r7, #28]
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	029b      	lsls	r3, r3, #10
 80071d8:	b29b      	uxth	r3, r3
 80071da:	8023      	strh	r3, [r4, #0]
 80071dc:	e0de      	b.n	800739c <USB_EPStartXfer+0x52c>
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	095b      	lsrs	r3, r3, #5
 80071e2:	61fb      	str	r3, [r7, #28]
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	f003 031f 	and.w	r3, r3, #31
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d102      	bne.n	80071f4 <USB_EPStartXfer+0x384>
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	61fb      	str	r3, [r7, #28]
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	029b      	lsls	r3, r3, #10
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007204:	b29b      	uxth	r3, r3
 8007206:	8023      	strh	r3, [r4, #0]
 8007208:	e0c8      	b.n	800739c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	785b      	ldrb	r3, [r3, #1]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d148      	bne.n	80072a4 <USB_EPStartXfer+0x434>
 8007212:	687c      	ldr	r4, [r7, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800721a:	b29b      	uxth	r3, r3
 800721c:	441c      	add	r4, r3
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	4423      	add	r3, r4
 8007226:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800722a:	461c      	mov	r4, r3
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10e      	bne.n	8007250 <USB_EPStartXfer+0x3e0>
 8007232:	8823      	ldrh	r3, [r4, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800723a:	b29b      	uxth	r3, r3
 800723c:	8023      	strh	r3, [r4, #0]
 800723e:	8823      	ldrh	r3, [r4, #0]
 8007240:	b29b      	uxth	r3, r3
 8007242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800724a:	b29b      	uxth	r3, r3
 800724c:	8023      	strh	r3, [r4, #0]
 800724e:	e03d      	b.n	80072cc <USB_EPStartXfer+0x45c>
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	2b3e      	cmp	r3, #62	; 0x3e
 8007254:	d810      	bhi.n	8007278 <USB_EPStartXfer+0x408>
 8007256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007258:	085b      	lsrs	r3, r3, #1
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <USB_EPStartXfer+0x3fc>
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	3301      	adds	r3, #1
 800726a:	61bb      	str	r3, [r7, #24]
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	b29b      	uxth	r3, r3
 8007270:	029b      	lsls	r3, r3, #10
 8007272:	b29b      	uxth	r3, r3
 8007274:	8023      	strh	r3, [r4, #0]
 8007276:	e029      	b.n	80072cc <USB_EPStartXfer+0x45c>
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007280:	f003 031f 	and.w	r3, r3, #31
 8007284:	2b00      	cmp	r3, #0
 8007286:	d102      	bne.n	800728e <USB_EPStartXfer+0x41e>
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	3b01      	subs	r3, #1
 800728c:	61bb      	str	r3, [r7, #24]
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	b29b      	uxth	r3, r3
 8007292:	029b      	lsls	r3, r3, #10
 8007294:	b29b      	uxth	r3, r3
 8007296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800729a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800729e:	b29b      	uxth	r3, r3
 80072a0:	8023      	strh	r3, [r4, #0]
 80072a2:	e013      	b.n	80072cc <USB_EPStartXfer+0x45c>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	785b      	ldrb	r3, [r3, #1]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d10f      	bne.n	80072cc <USB_EPStartXfer+0x45c>
 80072ac:	687c      	ldr	r4, [r7, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	441c      	add	r4, r3
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	4423      	add	r3, r4
 80072c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072c4:	461c      	mov	r4, r3
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	8023      	strh	r3, [r4, #0]
 80072cc:	687c      	ldr	r4, [r7, #4]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	785b      	ldrb	r3, [r3, #1]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d14e      	bne.n	8007374 <USB_EPStartXfer+0x504>
 80072d6:	687c      	ldr	r4, [r7, #4]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072de:	b29b      	uxth	r3, r3
 80072e0:	441c      	add	r4, r3
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	011b      	lsls	r3, r3, #4
 80072e8:	4423      	add	r3, r4
 80072ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072ee:	461c      	mov	r4, r3
 80072f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10e      	bne.n	8007314 <USB_EPStartXfer+0x4a4>
 80072f6:	8823      	ldrh	r3, [r4, #0]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072fe:	b29b      	uxth	r3, r3
 8007300:	8023      	strh	r3, [r4, #0]
 8007302:	8823      	ldrh	r3, [r4, #0]
 8007304:	b29b      	uxth	r3, r3
 8007306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730e:	b29b      	uxth	r3, r3
 8007310:	8023      	strh	r3, [r4, #0]
 8007312:	e043      	b.n	800739c <USB_EPStartXfer+0x52c>
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	2b3e      	cmp	r3, #62	; 0x3e
 8007318:	d816      	bhi.n	8007348 <USB_EPStartXfer+0x4d8>
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	085b      	lsrs	r3, r3, #1
 800731e:	617b      	str	r3, [r7, #20]
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <USB_EPStartXfer+0x4c0>
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	3301      	adds	r3, #1
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	b29b      	uxth	r3, r3
 8007334:	029b      	lsls	r3, r3, #10
 8007336:	b29b      	uxth	r3, r3
 8007338:	8023      	strh	r3, [r4, #0]
 800733a:	e02f      	b.n	800739c <USB_EPStartXfer+0x52c>
 800733c:	ffff80c0 	.word	0xffff80c0
 8007340:	ffffc080 	.word	0xffffc080
 8007344:	ffff8080 	.word	0xffff8080
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	f003 031f 	and.w	r3, r3, #31
 8007354:	2b00      	cmp	r3, #0
 8007356:	d102      	bne.n	800735e <USB_EPStartXfer+0x4ee>
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	3b01      	subs	r3, #1
 800735c:	617b      	str	r3, [r7, #20]
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	b29b      	uxth	r3, r3
 8007362:	029b      	lsls	r3, r3, #10
 8007364:	b29b      	uxth	r3, r3
 8007366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800736e:	b29b      	uxth	r3, r3
 8007370:	8023      	strh	r3, [r4, #0]
 8007372:	e013      	b.n	800739c <USB_EPStartXfer+0x52c>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	785b      	ldrb	r3, [r3, #1]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d10f      	bne.n	800739c <USB_EPStartXfer+0x52c>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007382:	b29b      	uxth	r3, r3
 8007384:	441c      	add	r4, r3
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	011b      	lsls	r3, r3, #4
 800738c:	4423      	add	r3, r4
 800738e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007392:	613b      	str	r3, [r7, #16]
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	b29a      	uxth	r2, r3
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b2:	b29c      	uxth	r4, r3
 80073b4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80073b8:	b29c      	uxth	r4, r3
 80073ba:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80073be:	b29c      	uxth	r4, r3
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	441a      	add	r2, r3
 80073ca:	4b04      	ldr	r3, [pc, #16]	; (80073dc <USB_EPStartXfer+0x56c>)
 80073cc:	4323      	orrs	r3, r4
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3734      	adds	r7, #52	; 0x34
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd90      	pop	{r4, r7, pc}
 80073dc:	ffff8080 	.word	0xffff8080

080073e0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073e0:	b490      	push	{r4, r7}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d018      	beq.n	8007424 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007408:	b29c      	uxth	r4, r3
 800740a:	f084 0310 	eor.w	r3, r4, #16
 800740e:	b29c      	uxth	r4, r3
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	441a      	add	r2, r3
 800741a:	4b11      	ldr	r3, [pc, #68]	; (8007460 <USB_EPSetStall+0x80>)
 800741c:	4323      	orrs	r3, r4
 800741e:	b29b      	uxth	r3, r3
 8007420:	8013      	strh	r3, [r2, #0]
 8007422:	e017      	b.n	8007454 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743a:	b29c      	uxth	r4, r3
 800743c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007440:	b29c      	uxth	r4, r3
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	441a      	add	r2, r3
 800744c:	4b04      	ldr	r3, [pc, #16]	; (8007460 <USB_EPSetStall+0x80>)
 800744e:	4323      	orrs	r3, r4
 8007450:	b29b      	uxth	r3, r3
 8007452:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bc90      	pop	{r4, r7}
 800745e:	4770      	bx	lr
 8007460:	ffff8080 	.word	0xffff8080

08007464 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007464:	b490      	push	{r4, r7}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	7b1b      	ldrb	r3, [r3, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d17d      	bne.n	8007572 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	785b      	ldrb	r3, [r3, #1]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d03d      	beq.n	80074fa <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b29c      	uxth	r4, r3
 800748c:	4623      	mov	r3, r4
 800748e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	d014      	beq.n	80074c0 <USB_EPClearStall+0x5c>
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ac:	b29c      	uxth	r4, r3
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	441a      	add	r2, r3
 80074b8:	4b31      	ldr	r3, [pc, #196]	; (8007580 <USB_EPClearStall+0x11c>)
 80074ba:	4323      	orrs	r3, r4
 80074bc:	b29b      	uxth	r3, r3
 80074be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	78db      	ldrb	r3, [r3, #3]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d054      	beq.n	8007572 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074de:	b29c      	uxth	r4, r3
 80074e0:	f084 0320 	eor.w	r3, r4, #32
 80074e4:	b29c      	uxth	r4, r3
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	441a      	add	r2, r3
 80074f0:	4b24      	ldr	r3, [pc, #144]	; (8007584 <USB_EPClearStall+0x120>)
 80074f2:	4323      	orrs	r3, r4
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	8013      	strh	r3, [r2, #0]
 80074f8:	e03b      	b.n	8007572 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	b29c      	uxth	r4, r3
 8007508:	4623      	mov	r3, r4
 800750a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d014      	beq.n	800753c <USB_EPClearStall+0xd8>
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007528:	b29c      	uxth	r4, r3
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	441a      	add	r2, r3
 8007534:	4b14      	ldr	r3, [pc, #80]	; (8007588 <USB_EPClearStall+0x124>)
 8007536:	4323      	orrs	r3, r4
 8007538:	b29b      	uxth	r3, r3
 800753a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	b29b      	uxth	r3, r3
 800754a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800754e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007552:	b29c      	uxth	r4, r3
 8007554:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007558:	b29c      	uxth	r4, r3
 800755a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800755e:	b29c      	uxth	r4, r3
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	441a      	add	r2, r3
 800756a:	4b06      	ldr	r3, [pc, #24]	; (8007584 <USB_EPClearStall+0x120>)
 800756c:	4323      	orrs	r3, r4
 800756e:	b29b      	uxth	r3, r3
 8007570:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bc90      	pop	{r4, r7}
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	ffff80c0 	.word	0xffff80c0
 8007584:	ffff8080 	.word	0xffff8080
 8007588:	ffffc080 	.word	0xffffc080

0800758c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007598:	78fb      	ldrb	r3, [r7, #3]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d103      	bne.n	80075a6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2280      	movs	r2, #128	; 0x80
 80075a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bc80      	pop	{r7}
 80075b0:	4770      	bx	lr

080075b2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bc80      	pop	{r7}
 80075c4:	4770      	bx	lr

080075c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bc80      	pop	{r7}
 80075d8:	4770      	bx	lr

080075da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80075ec:	68fb      	ldr	r3, [r7, #12]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bc80      	pop	{r7}
 80075f6:	4770      	bx	lr

080075f8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	bc80      	pop	{r7}
 800760c:	4770      	bx	lr

0800760e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800760e:	b480      	push	{r7}
 8007610:	b08d      	sub	sp, #52	; 0x34
 8007612:	af00      	add	r7, sp, #0
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	60b9      	str	r1, [r7, #8]
 8007618:	4611      	mov	r1, r2
 800761a:	461a      	mov	r2, r3
 800761c:	460b      	mov	r3, r1
 800761e:	80fb      	strh	r3, [r7, #6]
 8007620:	4613      	mov	r3, r2
 8007622:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007624:	88bb      	ldrh	r3, [r7, #4]
 8007626:	3301      	adds	r3, #1
 8007628:	085b      	lsrs	r3, r3, #1
 800762a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007634:	88fb      	ldrh	r3, [r7, #6]
 8007636:	005a      	lsls	r2, r3, #1
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007640:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007646:	e01e      	b.n	8007686 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	3301      	adds	r3, #1
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	021b      	lsls	r3, r3, #8
 800765c:	b29b      	uxth	r3, r3
 800765e:	461a      	mov	r2, r3
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	4313      	orrs	r3, r2
 8007664:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	b29a      	uxth	r2, r3
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	3302      	adds	r3, #2
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007676:	3302      	adds	r3, #2
 8007678:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	3301      	adds	r3, #1
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007682:	3b01      	subs	r3, #1
 8007684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1dd      	bne.n	8007648 <USB_WritePMA+0x3a>
  }
}
 800768c:	bf00      	nop
 800768e:	3734      	adds	r7, #52	; 0x34
 8007690:	46bd      	mov	sp, r7
 8007692:	bc80      	pop	{r7}
 8007694:	4770      	bx	lr

08007696 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007696:	b480      	push	{r7}
 8007698:	b08b      	sub	sp, #44	; 0x2c
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	4611      	mov	r1, r2
 80076a2:	461a      	mov	r2, r3
 80076a4:	460b      	mov	r3, r1
 80076a6:	80fb      	strh	r3, [r7, #6]
 80076a8:	4613      	mov	r3, r2
 80076aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80076ac:	88bb      	ldrh	r3, [r7, #4]
 80076ae:	085b      	lsrs	r3, r3, #1
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076bc:	88fb      	ldrh	r3, [r7, #6]
 80076be:	005a      	lsls	r2, r3, #1
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076c8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
 80076ce:	e01b      	b.n	8007708 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	3302      	adds	r3, #2
 80076dc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	3301      	adds	r3, #1
 80076ea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	0a1b      	lsrs	r3, r3, #8
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	3301      	adds	r3, #1
 80076fa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	3302      	adds	r3, #2
 8007700:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	3b01      	subs	r3, #1
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1e0      	bne.n	80076d0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800770e:	88bb      	ldrh	r3, [r7, #4]
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d007      	beq.n	800772a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	b29b      	uxth	r3, r3
 8007720:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	b2da      	uxtb	r2, r3
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	701a      	strb	r2, [r3, #0]
  }
}
 800772a:	bf00      	nop
 800772c:	372c      	adds	r7, #44	; 0x2c
 800772e:	46bd      	mov	sp, r7
 8007730:	bc80      	pop	{r7}
 8007732:	4770      	bx	lr

08007734 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007746:	2b84      	cmp	r3, #132	; 0x84
 8007748:	d005      	beq.n	8007756 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800774a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4413      	add	r3, r2
 8007752:	3303      	adds	r3, #3
 8007754:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007756:	68fb      	ldr	r3, [r7, #12]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	bc80      	pop	{r7}
 8007760:	4770      	bx	lr

08007762 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007768:	f3ef 8305 	mrs	r3, IPSR
 800776c:	607b      	str	r3, [r7, #4]
  return(result);
 800776e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007770:	2b00      	cmp	r3, #0
 8007772:	bf14      	ite	ne
 8007774:	2301      	movne	r3, #1
 8007776:	2300      	moveq	r3, #0
 8007778:	b2db      	uxtb	r3, r3
}
 800777a:	4618      	mov	r0, r3
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	bc80      	pop	{r7}
 8007782:	4770      	bx	lr

08007784 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007788:	f000 fe12 	bl	80083b0 <vTaskStartScheduler>
  
  return osOK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	bd80      	pop	{r7, pc}

08007792 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007796:	f7ff ffe4 	bl	8007762 <inHandlerMode>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80077a0:	f000 ff1c 	bl	80085dc <xTaskGetTickCountFromISR>
 80077a4:	4603      	mov	r3, r0
 80077a6:	e002      	b.n	80077ae <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80077a8:	f000 ff0a 	bl	80085c0 <xTaskGetTickCount>
 80077ac:	4603      	mov	r3, r0
  }
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80077b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077b4:	b089      	sub	sp, #36	; 0x24
 80077b6:	af04      	add	r7, sp, #16
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d020      	beq.n	8007806 <osThreadCreate+0x54>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01c      	beq.n	8007806 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685c      	ldr	r4, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681d      	ldr	r5, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691e      	ldr	r6, [r3, #16]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff ffa8 	bl	8007734 <makeFreeRtosPriority>
 80077e4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077ee:	9202      	str	r2, [sp, #8]
 80077f0:	9301      	str	r3, [sp, #4]
 80077f2:	9100      	str	r1, [sp, #0]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	4632      	mov	r2, r6
 80077f8:	4629      	mov	r1, r5
 80077fa:	4620      	mov	r0, r4
 80077fc:	f000 fc52 	bl	80080a4 <xTaskCreateStatic>
 8007800:	4603      	mov	r3, r0
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	e01c      	b.n	8007840 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685c      	ldr	r4, [r3, #4]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007812:	b29e      	uxth	r6, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800781a:	4618      	mov	r0, r3
 800781c:	f7ff ff8a 	bl	8007734 <makeFreeRtosPriority>
 8007820:	4602      	mov	r2, r0
 8007822:	f107 030c 	add.w	r3, r7, #12
 8007826:	9301      	str	r3, [sp, #4]
 8007828:	9200      	str	r2, [sp, #0]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	4632      	mov	r2, r6
 800782e:	4629      	mov	r1, r5
 8007830:	4620      	mov	r0, r4
 8007832:	f000 fc90 	bl	8008156 <xTaskCreate>
 8007836:	4603      	mov	r3, r0
 8007838:	2b01      	cmp	r3, #1
 800783a:	d001      	beq.n	8007840 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800783c:	2300      	movs	r3, #0
 800783e:	e000      	b.n	8007842 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007840:	68fb      	ldr	r3, [r7, #12]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800784c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b08a      	sub	sp, #40	; 0x28
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007854:	2300      	movs	r3, #0
 8007856:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007858:	f000 fe08 	bl	800846c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800785c:	4b57      	ldr	r3, [pc, #348]	; (80079bc <pvPortMalloc+0x170>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007864:	f000 f90c 	bl	8007a80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007868:	4b55      	ldr	r3, [pc, #340]	; (80079c0 <pvPortMalloc+0x174>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4013      	ands	r3, r2
 8007870:	2b00      	cmp	r3, #0
 8007872:	f040 808c 	bne.w	800798e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01c      	beq.n	80078b6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800787c:	2208      	movs	r2, #8
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4413      	add	r3, r2
 8007882:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	2b00      	cmp	r3, #0
 800788c:	d013      	beq.n	80078b6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f023 0307 	bic.w	r3, r3, #7
 8007894:	3308      	adds	r3, #8
 8007896:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d009      	beq.n	80078b6 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	e7fe      	b.n	80078b4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d068      	beq.n	800798e <pvPortMalloc+0x142>
 80078bc:	4b41      	ldr	r3, [pc, #260]	; (80079c4 <pvPortMalloc+0x178>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d863      	bhi.n	800798e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078c6:	4b40      	ldr	r3, [pc, #256]	; (80079c8 <pvPortMalloc+0x17c>)
 80078c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078ca:	4b3f      	ldr	r3, [pc, #252]	; (80079c8 <pvPortMalloc+0x17c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078d0:	e004      	b.n	80078dc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d903      	bls.n	80078ee <pvPortMalloc+0xa2>
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1f1      	bne.n	80078d2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078ee:	4b33      	ldr	r3, [pc, #204]	; (80079bc <pvPortMalloc+0x170>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d04a      	beq.n	800798e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2208      	movs	r2, #8
 80078fe:	4413      	add	r3, r2
 8007900:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	1ad2      	subs	r2, r2, r3
 8007912:	2308      	movs	r3, #8
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	429a      	cmp	r2, r3
 8007918:	d91e      	bls.n	8007958 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800791a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4413      	add	r3, r2
 8007920:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	2b00      	cmp	r3, #0
 800792a:	d009      	beq.n	8007940 <pvPortMalloc+0xf4>
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	613b      	str	r3, [r7, #16]
 800793e:	e7fe      	b.n	800793e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	1ad2      	subs	r2, r2, r3
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007952:	69b8      	ldr	r0, [r7, #24]
 8007954:	f000 f8f6 	bl	8007b44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007958:	4b1a      	ldr	r3, [pc, #104]	; (80079c4 <pvPortMalloc+0x178>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	4a18      	ldr	r2, [pc, #96]	; (80079c4 <pvPortMalloc+0x178>)
 8007964:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007966:	4b17      	ldr	r3, [pc, #92]	; (80079c4 <pvPortMalloc+0x178>)
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	4b18      	ldr	r3, [pc, #96]	; (80079cc <pvPortMalloc+0x180>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	429a      	cmp	r2, r3
 8007970:	d203      	bcs.n	800797a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007972:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <pvPortMalloc+0x178>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a15      	ldr	r2, [pc, #84]	; (80079cc <pvPortMalloc+0x180>)
 8007978:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	4b10      	ldr	r3, [pc, #64]	; (80079c0 <pvPortMalloc+0x174>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	431a      	orrs	r2, r3
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800798e:	f000 fd7b 	bl	8008488 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	f003 0307 	and.w	r3, r3, #7
 8007998:	2b00      	cmp	r3, #0
 800799a:	d009      	beq.n	80079b0 <pvPortMalloc+0x164>
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	e7fe      	b.n	80079ae <pvPortMalloc+0x162>
	return pvReturn;
 80079b0:	69fb      	ldr	r3, [r7, #28]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3728      	adds	r7, #40	; 0x28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20001d34 	.word	0x20001d34
 80079c0:	20001d40 	.word	0x20001d40
 80079c4:	20001d38 	.word	0x20001d38
 80079c8:	20001d2c 	.word	0x20001d2c
 80079cc:	20001d3c 	.word	0x20001d3c

080079d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d046      	beq.n	8007a70 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079e2:	2308      	movs	r3, #8
 80079e4:	425b      	negs	r3, r3
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	4413      	add	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	4b20      	ldr	r3, [pc, #128]	; (8007a78 <vPortFree+0xa8>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4013      	ands	r3, r2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d109      	bne.n	8007a12 <vPortFree+0x42>
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	e7fe      	b.n	8007a10 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <vPortFree+0x5e>
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	60bb      	str	r3, [r7, #8]
 8007a2c:	e7fe      	b.n	8007a2c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	4b11      	ldr	r3, [pc, #68]	; (8007a78 <vPortFree+0xa8>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4013      	ands	r3, r2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d019      	beq.n	8007a70 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d115      	bne.n	8007a70 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <vPortFree+0xa8>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	401a      	ands	r2, r3
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a54:	f000 fd0a 	bl	800846c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	4b07      	ldr	r3, [pc, #28]	; (8007a7c <vPortFree+0xac>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4413      	add	r3, r2
 8007a62:	4a06      	ldr	r2, [pc, #24]	; (8007a7c <vPortFree+0xac>)
 8007a64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a66:	6938      	ldr	r0, [r7, #16]
 8007a68:	f000 f86c 	bl	8007b44 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a6c:	f000 fd0c 	bl	8008488 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a70:	bf00      	nop
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	20001d40 	.word	0x20001d40
 8007a7c:	20001d38 	.word	0x20001d38

08007a80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007a8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a8c:	4b27      	ldr	r3, [pc, #156]	; (8007b2c <prvHeapInit+0xac>)
 8007a8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00c      	beq.n	8007ab4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3307      	adds	r3, #7
 8007a9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f023 0307 	bic.w	r3, r3, #7
 8007aa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	4a1f      	ldr	r2, [pc, #124]	; (8007b2c <prvHeapInit+0xac>)
 8007ab0:	4413      	add	r3, r2
 8007ab2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ab8:	4a1d      	ldr	r2, [pc, #116]	; (8007b30 <prvHeapInit+0xb0>)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007abe:	4b1c      	ldr	r3, [pc, #112]	; (8007b30 <prvHeapInit+0xb0>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	4413      	add	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007acc:	2208      	movs	r2, #8
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	1a9b      	subs	r3, r3, r2
 8007ad2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 0307 	bic.w	r3, r3, #7
 8007ada:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4a15      	ldr	r2, [pc, #84]	; (8007b34 <prvHeapInit+0xb4>)
 8007ae0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ae2:	4b14      	ldr	r3, [pc, #80]	; (8007b34 <prvHeapInit+0xb4>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007aea:	4b12      	ldr	r3, [pc, #72]	; (8007b34 <prvHeapInit+0xb4>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	1ad2      	subs	r2, r2, r3
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b00:	4b0c      	ldr	r3, [pc, #48]	; (8007b34 <prvHeapInit+0xb4>)
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	4a0a      	ldr	r2, [pc, #40]	; (8007b38 <prvHeapInit+0xb8>)
 8007b0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	4a09      	ldr	r2, [pc, #36]	; (8007b3c <prvHeapInit+0xbc>)
 8007b16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b18:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <prvHeapInit+0xc0>)
 8007b1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b1e:	601a      	str	r2, [r3, #0]
}
 8007b20:	bf00      	nop
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bc80      	pop	{r7}
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	2000112c 	.word	0x2000112c
 8007b30:	20001d2c 	.word	0x20001d2c
 8007b34:	20001d34 	.word	0x20001d34
 8007b38:	20001d3c 	.word	0x20001d3c
 8007b3c:	20001d38 	.word	0x20001d38
 8007b40:	20001d40 	.word	0x20001d40

08007b44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b4c:	4b27      	ldr	r3, [pc, #156]	; (8007bec <prvInsertBlockIntoFreeList+0xa8>)
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	e002      	b.n	8007b58 <prvInsertBlockIntoFreeList+0x14>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d8f7      	bhi.n	8007b52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d108      	bne.n	8007b86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	441a      	add	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	441a      	add	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d118      	bne.n	8007bcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	4b14      	ldr	r3, [pc, #80]	; (8007bf0 <prvInsertBlockIntoFreeList+0xac>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d00d      	beq.n	8007bc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	441a      	add	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	601a      	str	r2, [r3, #0]
 8007bc0:	e008      	b.n	8007bd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bc2:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <prvInsertBlockIntoFreeList+0xac>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	e003      	b.n	8007bd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d002      	beq.n	8007be2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007be2:	bf00      	nop
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr
 8007bec:	20001d2c 	.word	0x20001d2c
 8007bf0:	20001d34 	.word	0x20001d34

08007bf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f103 0208 	add.w	r2, r3, #8
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f103 0208 	add.w	r2, r3, #8
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f103 0208 	add.w	r2, r3, #8
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bc80      	pop	{r7}
 8007c30:	4770      	bx	lr

08007c32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr

08007c4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b085      	sub	sp, #20
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	601a      	str	r2, [r3, #0]
}
 8007c86:	bf00      	nop
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bc80      	pop	{r7}
 8007c8e:	4770      	bx	lr

08007c90 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6892      	ldr	r2, [r2, #8]
 8007ca6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6852      	ldr	r2, [r2, #4]
 8007cb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d103      	bne.n	8007cc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	1e5a      	subs	r2, r3, #1
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bc80      	pop	{r7}
 8007ce0:	4770      	bx	lr
	...

08007ce4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3b04      	subs	r3, #4
 8007cf4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3b04      	subs	r3, #4
 8007d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f023 0201 	bic.w	r2, r3, #1
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3b04      	subs	r3, #4
 8007d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d14:	4a08      	ldr	r2, [pc, #32]	; (8007d38 <pxPortInitialiseStack+0x54>)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3b14      	subs	r3, #20
 8007d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3b20      	subs	r3, #32
 8007d2a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bc80      	pop	{r7}
 8007d36:	4770      	bx	lr
 8007d38:	08007d3d 	.word	0x08007d3d

08007d3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d46:	4b10      	ldr	r3, [pc, #64]	; (8007d88 <prvTaskExitError+0x4c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4e:	d009      	beq.n	8007d64 <prvTaskExitError+0x28>
 8007d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	e7fe      	b.n	8007d62 <prvTaskExitError+0x26>
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d76:	bf00      	nop
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0fc      	beq.n	8007d78 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d7e:	bf00      	nop
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr
 8007d88:	200000cc 	.word	0x200000cc
 8007d8c:	00000000 	.word	0x00000000

08007d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d90:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <pxCurrentTCBConst2>)
 8007d92:	6819      	ldr	r1, [r3, #0]
 8007d94:	6808      	ldr	r0, [r1, #0]
 8007d96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d9a:	f380 8809 	msr	PSP, r0
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f04f 0000 	mov.w	r0, #0
 8007da6:	f380 8811 	msr	BASEPRI, r0
 8007daa:	f04e 0e0d 	orr.w	lr, lr, #13
 8007dae:	4770      	bx	lr

08007db0 <pxCurrentTCBConst2>:
 8007db0:	20001d4c 	.word	0x20001d4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop

08007db8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007db8:	4806      	ldr	r0, [pc, #24]	; (8007dd4 <prvPortStartFirstTask+0x1c>)
 8007dba:	6800      	ldr	r0, [r0, #0]
 8007dbc:	6800      	ldr	r0, [r0, #0]
 8007dbe:	f380 8808 	msr	MSP, r0
 8007dc2:	b662      	cpsie	i
 8007dc4:	b661      	cpsie	f
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	df00      	svc	0
 8007dd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dd2:	bf00      	nop
 8007dd4:	e000ed08 	.word	0xe000ed08

08007dd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007dde:	4b31      	ldr	r3, [pc, #196]	; (8007ea4 <xPortStartScheduler+0xcc>)
 8007de0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	22ff      	movs	r2, #255	; 0xff
 8007dee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007df8:	78fb      	ldrb	r3, [r7, #3]
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	4b29      	ldr	r3, [pc, #164]	; (8007ea8 <xPortStartScheduler+0xd0>)
 8007e04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e06:	4b29      	ldr	r3, [pc, #164]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e08:	2207      	movs	r2, #7
 8007e0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e0c:	e009      	b.n	8007e22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e0e:	4b27      	ldr	r3, [pc, #156]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	4a25      	ldr	r2, [pc, #148]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e22:	78fb      	ldrb	r3, [r7, #3]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2a:	2b80      	cmp	r3, #128	; 0x80
 8007e2c:	d0ef      	beq.n	8007e0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e2e:	4b1f      	ldr	r3, [pc, #124]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f1c3 0307 	rsb	r3, r3, #7
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	d009      	beq.n	8007e4e <xPortStartScheduler+0x76>
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	60bb      	str	r3, [r7, #8]
 8007e4c:	e7fe      	b.n	8007e4c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e4e:	4b17      	ldr	r3, [pc, #92]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	4a15      	ldr	r2, [pc, #84]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e58:	4b14      	ldr	r3, [pc, #80]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e60:	4a12      	ldr	r2, [pc, #72]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e6c:	4b10      	ldr	r3, [pc, #64]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a0f      	ldr	r2, [pc, #60]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e78:	4b0d      	ldr	r3, [pc, #52]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a0c      	ldr	r2, [pc, #48]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e7e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e84:	f000 f8b0 	bl	8007fe8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e88:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <xPortStartScheduler+0xdc>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e8e:	f7ff ff93 	bl	8007db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e92:	f000 fc71 	bl	8008778 <vTaskSwitchContext>
	prvTaskExitError();
 8007e96:	f7ff ff51 	bl	8007d3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	e000e400 	.word	0xe000e400
 8007ea8:	20001d44 	.word	0x20001d44
 8007eac:	20001d48 	.word	0x20001d48
 8007eb0:	e000ed20 	.word	0xe000ed20
 8007eb4:	200000cc 	.word	0x200000cc

08007eb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ed0:	4b0e      	ldr	r3, [pc, #56]	; (8007f0c <vPortEnterCritical+0x54>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	4a0d      	ldr	r2, [pc, #52]	; (8007f0c <vPortEnterCritical+0x54>)
 8007ed8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007eda:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <vPortEnterCritical+0x54>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d10e      	bne.n	8007f00 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ee2:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <vPortEnterCritical+0x58>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d009      	beq.n	8007f00 <vPortEnterCritical+0x48>
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	603b      	str	r3, [r7, #0]
 8007efe:	e7fe      	b.n	8007efe <vPortEnterCritical+0x46>
	}
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc80      	pop	{r7}
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	200000cc 	.word	0x200000cc
 8007f10:	e000ed04 	.word	0xe000ed04

08007f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f1a:	4b10      	ldr	r3, [pc, #64]	; (8007f5c <vPortExitCritical+0x48>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d109      	bne.n	8007f36 <vPortExitCritical+0x22>
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	607b      	str	r3, [r7, #4]
 8007f34:	e7fe      	b.n	8007f34 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007f36:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <vPortExitCritical+0x48>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	4a07      	ldr	r2, [pc, #28]	; (8007f5c <vPortExitCritical+0x48>)
 8007f3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f40:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <vPortExitCritical+0x48>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d104      	bne.n	8007f52 <vPortExitCritical+0x3e>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bc80      	pop	{r7}
 8007f5a:	4770      	bx	lr
 8007f5c:	200000cc 	.word	0x200000cc

08007f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f60:	f3ef 8009 	mrs	r0, PSP
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	4b0d      	ldr	r3, [pc, #52]	; (8007fa0 <pxCurrentTCBConst>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f70:	6010      	str	r0, [r2, #0]
 8007f72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007f76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f7a:	f380 8811 	msr	BASEPRI, r0
 8007f7e:	f000 fbfb 	bl	8008778 <vTaskSwitchContext>
 8007f82:	f04f 0000 	mov.w	r0, #0
 8007f86:	f380 8811 	msr	BASEPRI, r0
 8007f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007f8e:	6819      	ldr	r1, [r3, #0]
 8007f90:	6808      	ldr	r0, [r1, #0]
 8007f92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f96:	f380 8809 	msr	PSP, r0
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	4770      	bx	lr

08007fa0 <pxCurrentTCBConst>:
 8007fa0:	20001d4c 	.word	0x20001d4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop

08007fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007fc0:	f000 fb1e 	bl	8008600 <xTaskIncrementTick>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fca:	4b06      	ldr	r3, [pc, #24]	; (8007fe4 <SysTick_Handler+0x3c>)
 8007fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	e000ed04 	.word	0xe000ed04

08007fe8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007fec:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <vPortSetupTimerInterrupt+0x30>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ff2:	4b0a      	ldr	r3, [pc, #40]	; (800801c <vPortSetupTimerInterrupt+0x34>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ff8:	4b09      	ldr	r3, [pc, #36]	; (8008020 <vPortSetupTimerInterrupt+0x38>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a09      	ldr	r2, [pc, #36]	; (8008024 <vPortSetupTimerInterrupt+0x3c>)
 8007ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8008002:	099b      	lsrs	r3, r3, #6
 8008004:	4a08      	ldr	r2, [pc, #32]	; (8008028 <vPortSetupTimerInterrupt+0x40>)
 8008006:	3b01      	subs	r3, #1
 8008008:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800800a:	4b03      	ldr	r3, [pc, #12]	; (8008018 <vPortSetupTimerInterrupt+0x30>)
 800800c:	2207      	movs	r2, #7
 800800e:	601a      	str	r2, [r3, #0]
}
 8008010:	bf00      	nop
 8008012:	46bd      	mov	sp, r7
 8008014:	bc80      	pop	{r7}
 8008016:	4770      	bx	lr
 8008018:	e000e010 	.word	0xe000e010
 800801c:	e000e018 	.word	0xe000e018
 8008020:	200000c0 	.word	0x200000c0
 8008024:	10624dd3 	.word	0x10624dd3
 8008028:	e000e014 	.word	0xe000e014

0800802c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008032:	f3ef 8305 	mrs	r3, IPSR
 8008036:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b0f      	cmp	r3, #15
 800803c:	d913      	bls.n	8008066 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800803e:	4a15      	ldr	r2, [pc, #84]	; (8008094 <vPortValidateInterruptPriority+0x68>)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008048:	4b13      	ldr	r3, [pc, #76]	; (8008098 <vPortValidateInterruptPriority+0x6c>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	7afa      	ldrb	r2, [r7, #11]
 800804e:	429a      	cmp	r2, r3
 8008050:	d209      	bcs.n	8008066 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	607b      	str	r3, [r7, #4]
 8008064:	e7fe      	b.n	8008064 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008066:	4b0d      	ldr	r3, [pc, #52]	; (800809c <vPortValidateInterruptPriority+0x70>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800806e:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <vPortValidateInterruptPriority+0x74>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	429a      	cmp	r2, r3
 8008074:	d909      	bls.n	800808a <vPortValidateInterruptPriority+0x5e>
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	e7fe      	b.n	8008088 <vPortValidateInterruptPriority+0x5c>
	}
 800808a:	bf00      	nop
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr
 8008094:	e000e3f0 	.word	0xe000e3f0
 8008098:	20001d44 	.word	0x20001d44
 800809c:	e000ed0c 	.word	0xe000ed0c
 80080a0:	20001d48 	.word	0x20001d48

080080a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08e      	sub	sp, #56	; 0x38
 80080a8:	af04      	add	r7, sp, #16
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
 80080b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d109      	bne.n	80080cc <xTaskCreateStatic+0x28>
 80080b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	623b      	str	r3, [r7, #32]
 80080ca:	e7fe      	b.n	80080ca <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80080cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d109      	bne.n	80080e6 <xTaskCreateStatic+0x42>
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	61fb      	str	r3, [r7, #28]
 80080e4:	e7fe      	b.n	80080e4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080e6:	2354      	movs	r3, #84	; 0x54
 80080e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	2b54      	cmp	r3, #84	; 0x54
 80080ee:	d009      	beq.n	8008104 <xTaskCreateStatic+0x60>
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	61bb      	str	r3, [r7, #24]
 8008102:	e7fe      	b.n	8008102 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	2b00      	cmp	r3, #0
 8008108:	d01e      	beq.n	8008148 <xTaskCreateStatic+0xa4>
 800810a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810c:	2b00      	cmp	r3, #0
 800810e:	d01b      	beq.n	8008148 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008118:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	2202      	movs	r2, #2
 800811e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008122:	2300      	movs	r3, #0
 8008124:	9303      	str	r3, [sp, #12]
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	9302      	str	r3, [sp, #8]
 800812a:	f107 0314 	add.w	r3, r7, #20
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	68b9      	ldr	r1, [r7, #8]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 f850 	bl	80081e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008142:	f000 f8cb 	bl	80082dc <prvAddNewTaskToReadyList>
 8008146:	e001      	b.n	800814c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008148:	2300      	movs	r3, #0
 800814a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800814c:	697b      	ldr	r3, [r7, #20]
	}
 800814e:	4618      	mov	r0, r3
 8008150:	3728      	adds	r7, #40	; 0x28
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008156:	b580      	push	{r7, lr}
 8008158:	b08c      	sub	sp, #48	; 0x30
 800815a:	af04      	add	r7, sp, #16
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	603b      	str	r3, [r7, #0]
 8008162:	4613      	mov	r3, r2
 8008164:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008166:	88fb      	ldrh	r3, [r7, #6]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff fb6e 	bl	800784c <pvPortMalloc>
 8008170:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00e      	beq.n	8008196 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008178:	2054      	movs	r0, #84	; 0x54
 800817a:	f7ff fb67 	bl	800784c <pvPortMalloc>
 800817e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	631a      	str	r2, [r3, #48]	; 0x30
 800818c:	e005      	b.n	800819a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800818e:	6978      	ldr	r0, [r7, #20]
 8008190:	f7ff fc1e 	bl	80079d0 <vPortFree>
 8008194:	e001      	b.n	800819a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008196:	2300      	movs	r3, #0
 8008198:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d017      	beq.n	80081d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081a8:	88fa      	ldrh	r2, [r7, #6]
 80081aa:	2300      	movs	r3, #0
 80081ac:	9303      	str	r3, [sp, #12]
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	9302      	str	r3, [sp, #8]
 80081b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68b9      	ldr	r1, [r7, #8]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 f80e 	bl	80081e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081c4:	69f8      	ldr	r0, [r7, #28]
 80081c6:	f000 f889 	bl	80082dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081ca:	2301      	movs	r3, #1
 80081cc:	61bb      	str	r3, [r7, #24]
 80081ce:	e002      	b.n	80081d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081d0:	f04f 33ff 	mov.w	r3, #4294967295
 80081d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081d6:	69bb      	ldr	r3, [r7, #24]
	}
 80081d8:	4618      	mov	r0, r3
 80081da:	3720      	adds	r7, #32
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081f8:	3b01      	subs	r3, #1
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	f023 0307 	bic.w	r3, r3, #7
 8008206:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	f003 0307 	and.w	r3, r3, #7
 800820e:	2b00      	cmp	r3, #0
 8008210:	d009      	beq.n	8008226 <prvInitialiseNewTask+0x46>
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	e7fe      	b.n	8008224 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008226:	2300      	movs	r3, #0
 8008228:	61fb      	str	r3, [r7, #28]
 800822a:	e012      	b.n	8008252 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	4413      	add	r3, r2
 8008232:	7819      	ldrb	r1, [r3, #0]
 8008234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	4413      	add	r3, r2
 800823a:	3334      	adds	r3, #52	; 0x34
 800823c:	460a      	mov	r2, r1
 800823e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	4413      	add	r3, r2
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d006      	beq.n	800825a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	3301      	adds	r3, #1
 8008250:	61fb      	str	r3, [r7, #28]
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	2b0f      	cmp	r3, #15
 8008256:	d9e9      	bls.n	800822c <prvInitialiseNewTask+0x4c>
 8008258:	e000      	b.n	800825c <prvInitialiseNewTask+0x7c>
		{
			break;
 800825a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	2b06      	cmp	r3, #6
 8008268:	d901      	bls.n	800826e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800826a:	2306      	movs	r3, #6
 800826c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008272:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008278:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	2200      	movs	r2, #0
 800827e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	3304      	adds	r3, #4
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff fcd4 	bl	8007c32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	3318      	adds	r3, #24
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff fccf 	bl	8007c32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008298:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	f1c3 0207 	rsb	r2, r3, #7
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	2200      	movs	r2, #0
 80082ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	68f9      	ldr	r1, [r7, #12]
 80082bc:	69b8      	ldr	r0, [r7, #24]
 80082be:	f7ff fd11 	bl	8007ce4 <pxPortInitialiseStack>
 80082c2:	4602      	mov	r2, r0
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d002      	beq.n	80082d4 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082d4:	bf00      	nop
 80082d6:	3720      	adds	r7, #32
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082e4:	f7ff fde8 	bl	8007eb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082e8:	4b2a      	ldr	r3, [pc, #168]	; (8008394 <prvAddNewTaskToReadyList+0xb8>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3301      	adds	r3, #1
 80082ee:	4a29      	ldr	r2, [pc, #164]	; (8008394 <prvAddNewTaskToReadyList+0xb8>)
 80082f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082f2:	4b29      	ldr	r3, [pc, #164]	; (8008398 <prvAddNewTaskToReadyList+0xbc>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d109      	bne.n	800830e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082fa:	4a27      	ldr	r2, [pc, #156]	; (8008398 <prvAddNewTaskToReadyList+0xbc>)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008300:	4b24      	ldr	r3, [pc, #144]	; (8008394 <prvAddNewTaskToReadyList+0xb8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d110      	bne.n	800832a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008308:	f000 faa8 	bl	800885c <prvInitialiseTaskLists>
 800830c:	e00d      	b.n	800832a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800830e:	4b23      	ldr	r3, [pc, #140]	; (800839c <prvAddNewTaskToReadyList+0xc0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008316:	4b20      	ldr	r3, [pc, #128]	; (8008398 <prvAddNewTaskToReadyList+0xbc>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	429a      	cmp	r2, r3
 8008322:	d802      	bhi.n	800832a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008324:	4a1c      	ldr	r2, [pc, #112]	; (8008398 <prvAddNewTaskToReadyList+0xbc>)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800832a:	4b1d      	ldr	r3, [pc, #116]	; (80083a0 <prvAddNewTaskToReadyList+0xc4>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3301      	adds	r3, #1
 8008330:	4a1b      	ldr	r2, [pc, #108]	; (80083a0 <prvAddNewTaskToReadyList+0xc4>)
 8008332:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008338:	2201      	movs	r2, #1
 800833a:	409a      	lsls	r2, r3
 800833c:	4b19      	ldr	r3, [pc, #100]	; (80083a4 <prvAddNewTaskToReadyList+0xc8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4313      	orrs	r3, r2
 8008342:	4a18      	ldr	r2, [pc, #96]	; (80083a4 <prvAddNewTaskToReadyList+0xc8>)
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834a:	4613      	mov	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4a15      	ldr	r2, [pc, #84]	; (80083a8 <prvAddNewTaskToReadyList+0xcc>)
 8008354:	441a      	add	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3304      	adds	r3, #4
 800835a:	4619      	mov	r1, r3
 800835c:	4610      	mov	r0, r2
 800835e:	f7ff fc74 	bl	8007c4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008362:	f7ff fdd7 	bl	8007f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008366:	4b0d      	ldr	r3, [pc, #52]	; (800839c <prvAddNewTaskToReadyList+0xc0>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00e      	beq.n	800838c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800836e:	4b0a      	ldr	r3, [pc, #40]	; (8008398 <prvAddNewTaskToReadyList+0xbc>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	429a      	cmp	r2, r3
 800837a:	d207      	bcs.n	800838c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800837c:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <prvAddNewTaskToReadyList+0xd0>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800838c:	bf00      	nop
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20001e4c 	.word	0x20001e4c
 8008398:	20001d4c 	.word	0x20001d4c
 800839c:	20001e58 	.word	0x20001e58
 80083a0:	20001e68 	.word	0x20001e68
 80083a4:	20001e54 	.word	0x20001e54
 80083a8:	20001d50 	.word	0x20001d50
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08a      	sub	sp, #40	; 0x28
 80083b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80083ba:	2300      	movs	r3, #0
 80083bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80083be:	463a      	mov	r2, r7
 80083c0:	1d39      	adds	r1, r7, #4
 80083c2:	f107 0308 	add.w	r3, r7, #8
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7f8 fa50 	bl	800086c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	9202      	str	r2, [sp, #8]
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	2300      	movs	r3, #0
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	2300      	movs	r3, #0
 80083dc:	460a      	mov	r2, r1
 80083de:	491d      	ldr	r1, [pc, #116]	; (8008454 <vTaskStartScheduler+0xa4>)
 80083e0:	481d      	ldr	r0, [pc, #116]	; (8008458 <vTaskStartScheduler+0xa8>)
 80083e2:	f7ff fe5f 	bl	80080a4 <xTaskCreateStatic>
 80083e6:	4602      	mov	r2, r0
 80083e8:	4b1c      	ldr	r3, [pc, #112]	; (800845c <vTaskStartScheduler+0xac>)
 80083ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083ec:	4b1b      	ldr	r3, [pc, #108]	; (800845c <vTaskStartScheduler+0xac>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083f4:	2301      	movs	r3, #1
 80083f6:	617b      	str	r3, [r7, #20]
 80083f8:	e001      	b.n	80083fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d115      	bne.n	8008430 <vTaskStartScheduler+0x80>
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008416:	4b12      	ldr	r3, [pc, #72]	; (8008460 <vTaskStartScheduler+0xb0>)
 8008418:	f04f 32ff 	mov.w	r2, #4294967295
 800841c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800841e:	4b11      	ldr	r3, [pc, #68]	; (8008464 <vTaskStartScheduler+0xb4>)
 8008420:	2201      	movs	r2, #1
 8008422:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008424:	4b10      	ldr	r3, [pc, #64]	; (8008468 <vTaskStartScheduler+0xb8>)
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800842a:	f7ff fcd5 	bl	8007dd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800842e:	e00d      	b.n	800844c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008436:	d109      	bne.n	800844c <vTaskStartScheduler+0x9c>
 8008438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	e7fe      	b.n	800844a <vTaskStartScheduler+0x9a>
}
 800844c:	bf00      	nop
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	0800aa2c 	.word	0x0800aa2c
 8008458:	0800882d 	.word	0x0800882d
 800845c:	20001e70 	.word	0x20001e70
 8008460:	20001e6c 	.word	0x20001e6c
 8008464:	20001e58 	.word	0x20001e58
 8008468:	20001e50 	.word	0x20001e50

0800846c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800846c:	b480      	push	{r7}
 800846e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008470:	4b04      	ldr	r3, [pc, #16]	; (8008484 <vTaskSuspendAll+0x18>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3301      	adds	r3, #1
 8008476:	4a03      	ldr	r2, [pc, #12]	; (8008484 <vTaskSuspendAll+0x18>)
 8008478:	6013      	str	r3, [r2, #0]
}
 800847a:	bf00      	nop
 800847c:	46bd      	mov	sp, r7
 800847e:	bc80      	pop	{r7}
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	20001e74 	.word	0x20001e74

08008488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008492:	2300      	movs	r3, #0
 8008494:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008496:	4b41      	ldr	r3, [pc, #260]	; (800859c <xTaskResumeAll+0x114>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d109      	bne.n	80084b2 <xTaskResumeAll+0x2a>
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	603b      	str	r3, [r7, #0]
 80084b0:	e7fe      	b.n	80084b0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80084b2:	f7ff fd01 	bl	8007eb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80084b6:	4b39      	ldr	r3, [pc, #228]	; (800859c <xTaskResumeAll+0x114>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	4a37      	ldr	r2, [pc, #220]	; (800859c <xTaskResumeAll+0x114>)
 80084be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084c0:	4b36      	ldr	r3, [pc, #216]	; (800859c <xTaskResumeAll+0x114>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d161      	bne.n	800858c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80084c8:	4b35      	ldr	r3, [pc, #212]	; (80085a0 <xTaskResumeAll+0x118>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d05d      	beq.n	800858c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084d0:	e02e      	b.n	8008530 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80084d2:	4b34      	ldr	r3, [pc, #208]	; (80085a4 <xTaskResumeAll+0x11c>)
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3318      	adds	r3, #24
 80084de:	4618      	mov	r0, r3
 80084e0:	f7ff fbd6 	bl	8007c90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3304      	adds	r3, #4
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff fbd1 	bl	8007c90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f2:	2201      	movs	r2, #1
 80084f4:	409a      	lsls	r2, r3
 80084f6:	4b2c      	ldr	r3, [pc, #176]	; (80085a8 <xTaskResumeAll+0x120>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	4a2a      	ldr	r2, [pc, #168]	; (80085a8 <xTaskResumeAll+0x120>)
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008504:	4613      	mov	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4a27      	ldr	r2, [pc, #156]	; (80085ac <xTaskResumeAll+0x124>)
 800850e:	441a      	add	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3304      	adds	r3, #4
 8008514:	4619      	mov	r1, r3
 8008516:	4610      	mov	r0, r2
 8008518:	f7ff fb97 	bl	8007c4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008520:	4b23      	ldr	r3, [pc, #140]	; (80085b0 <xTaskResumeAll+0x128>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008526:	429a      	cmp	r2, r3
 8008528:	d302      	bcc.n	8008530 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800852a:	4b22      	ldr	r3, [pc, #136]	; (80085b4 <xTaskResumeAll+0x12c>)
 800852c:	2201      	movs	r2, #1
 800852e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008530:	4b1c      	ldr	r3, [pc, #112]	; (80085a4 <xTaskResumeAll+0x11c>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1cc      	bne.n	80084d2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800853e:	f000 fa27 	bl	8008990 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008542:	4b1d      	ldr	r3, [pc, #116]	; (80085b8 <xTaskResumeAll+0x130>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d010      	beq.n	8008570 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800854e:	f000 f857 	bl	8008600 <xTaskIncrementTick>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008558:	4b16      	ldr	r3, [pc, #88]	; (80085b4 <xTaskResumeAll+0x12c>)
 800855a:	2201      	movs	r2, #1
 800855c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3b01      	subs	r3, #1
 8008562:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1f1      	bne.n	800854e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800856a:	4b13      	ldr	r3, [pc, #76]	; (80085b8 <xTaskResumeAll+0x130>)
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008570:	4b10      	ldr	r3, [pc, #64]	; (80085b4 <xTaskResumeAll+0x12c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d009      	beq.n	800858c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008578:	2301      	movs	r3, #1
 800857a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800857c:	4b0f      	ldr	r3, [pc, #60]	; (80085bc <xTaskResumeAll+0x134>)
 800857e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800858c:	f7ff fcc2 	bl	8007f14 <vPortExitCritical>

	return xAlreadyYielded;
 8008590:	68bb      	ldr	r3, [r7, #8]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20001e74 	.word	0x20001e74
 80085a0:	20001e4c 	.word	0x20001e4c
 80085a4:	20001e0c 	.word	0x20001e0c
 80085a8:	20001e54 	.word	0x20001e54
 80085ac:	20001d50 	.word	0x20001d50
 80085b0:	20001d4c 	.word	0x20001d4c
 80085b4:	20001e60 	.word	0x20001e60
 80085b8:	20001e5c 	.word	0x20001e5c
 80085bc:	e000ed04 	.word	0xe000ed04

080085c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80085c6:	4b04      	ldr	r3, [pc, #16]	; (80085d8 <xTaskGetTickCount+0x18>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80085cc:	687b      	ldr	r3, [r7, #4]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bc80      	pop	{r7}
 80085d6:	4770      	bx	lr
 80085d8:	20001e50 	.word	0x20001e50

080085dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085e2:	f7ff fd23 	bl	800802c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80085e6:	2300      	movs	r3, #0
 80085e8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80085ea:	4b04      	ldr	r3, [pc, #16]	; (80085fc <xTaskGetTickCountFromISR+0x20>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085f0:	683b      	ldr	r3, [r7, #0]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20001e50 	.word	0x20001e50

08008600 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800860a:	4b50      	ldr	r3, [pc, #320]	; (800874c <xTaskIncrementTick+0x14c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f040 808c 	bne.w	800872c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008614:	4b4e      	ldr	r3, [pc, #312]	; (8008750 <xTaskIncrementTick+0x150>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3301      	adds	r3, #1
 800861a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800861c:	4a4c      	ldr	r2, [pc, #304]	; (8008750 <xTaskIncrementTick+0x150>)
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d11f      	bne.n	8008668 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008628:	4b4a      	ldr	r3, [pc, #296]	; (8008754 <xTaskIncrementTick+0x154>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d009      	beq.n	8008646 <xTaskIncrementTick+0x46>
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	603b      	str	r3, [r7, #0]
 8008644:	e7fe      	b.n	8008644 <xTaskIncrementTick+0x44>
 8008646:	4b43      	ldr	r3, [pc, #268]	; (8008754 <xTaskIncrementTick+0x154>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	4b42      	ldr	r3, [pc, #264]	; (8008758 <xTaskIncrementTick+0x158>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a40      	ldr	r2, [pc, #256]	; (8008754 <xTaskIncrementTick+0x154>)
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	4a40      	ldr	r2, [pc, #256]	; (8008758 <xTaskIncrementTick+0x158>)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	4b40      	ldr	r3, [pc, #256]	; (800875c <xTaskIncrementTick+0x15c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3301      	adds	r3, #1
 8008660:	4a3e      	ldr	r2, [pc, #248]	; (800875c <xTaskIncrementTick+0x15c>)
 8008662:	6013      	str	r3, [r2, #0]
 8008664:	f000 f994 	bl	8008990 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008668:	4b3d      	ldr	r3, [pc, #244]	; (8008760 <xTaskIncrementTick+0x160>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	429a      	cmp	r2, r3
 8008670:	d34d      	bcc.n	800870e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008672:	4b38      	ldr	r3, [pc, #224]	; (8008754 <xTaskIncrementTick+0x154>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <xTaskIncrementTick+0x80>
 800867c:	2301      	movs	r3, #1
 800867e:	e000      	b.n	8008682 <xTaskIncrementTick+0x82>
 8008680:	2300      	movs	r3, #0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d004      	beq.n	8008690 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008686:	4b36      	ldr	r3, [pc, #216]	; (8008760 <xTaskIncrementTick+0x160>)
 8008688:	f04f 32ff 	mov.w	r2, #4294967295
 800868c:	601a      	str	r2, [r3, #0]
					break;
 800868e:	e03e      	b.n	800870e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008690:	4b30      	ldr	r3, [pc, #192]	; (8008754 <xTaskIncrementTick+0x154>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d203      	bcs.n	80086b0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80086a8:	4a2d      	ldr	r2, [pc, #180]	; (8008760 <xTaskIncrementTick+0x160>)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6013      	str	r3, [r2, #0]
						break;
 80086ae:	e02e      	b.n	800870e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	3304      	adds	r3, #4
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff faeb 	bl	8007c90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d004      	beq.n	80086cc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	3318      	adds	r3, #24
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7ff fae2 	bl	8007c90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d0:	2201      	movs	r2, #1
 80086d2:	409a      	lsls	r2, r3
 80086d4:	4b23      	ldr	r3, [pc, #140]	; (8008764 <xTaskIncrementTick+0x164>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4313      	orrs	r3, r2
 80086da:	4a22      	ldr	r2, [pc, #136]	; (8008764 <xTaskIncrementTick+0x164>)
 80086dc:	6013      	str	r3, [r2, #0]
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4a1f      	ldr	r2, [pc, #124]	; (8008768 <xTaskIncrementTick+0x168>)
 80086ec:	441a      	add	r2, r3
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	3304      	adds	r3, #4
 80086f2:	4619      	mov	r1, r3
 80086f4:	4610      	mov	r0, r2
 80086f6:	f7ff faa8 	bl	8007c4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fe:	4b1b      	ldr	r3, [pc, #108]	; (800876c <xTaskIncrementTick+0x16c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	429a      	cmp	r2, r3
 8008706:	d3b4      	bcc.n	8008672 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008708:	2301      	movs	r3, #1
 800870a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800870c:	e7b1      	b.n	8008672 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800870e:	4b17      	ldr	r3, [pc, #92]	; (800876c <xTaskIncrementTick+0x16c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008714:	4914      	ldr	r1, [pc, #80]	; (8008768 <xTaskIncrementTick+0x168>)
 8008716:	4613      	mov	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	440b      	add	r3, r1
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d907      	bls.n	8008736 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008726:	2301      	movs	r3, #1
 8008728:	617b      	str	r3, [r7, #20]
 800872a:	e004      	b.n	8008736 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800872c:	4b10      	ldr	r3, [pc, #64]	; (8008770 <xTaskIncrementTick+0x170>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3301      	adds	r3, #1
 8008732:	4a0f      	ldr	r2, [pc, #60]	; (8008770 <xTaskIncrementTick+0x170>)
 8008734:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008736:	4b0f      	ldr	r3, [pc, #60]	; (8008774 <xTaskIncrementTick+0x174>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800873e:	2301      	movs	r3, #1
 8008740:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008742:	697b      	ldr	r3, [r7, #20]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	20001e74 	.word	0x20001e74
 8008750:	20001e50 	.word	0x20001e50
 8008754:	20001e04 	.word	0x20001e04
 8008758:	20001e08 	.word	0x20001e08
 800875c:	20001e64 	.word	0x20001e64
 8008760:	20001e6c 	.word	0x20001e6c
 8008764:	20001e54 	.word	0x20001e54
 8008768:	20001d50 	.word	0x20001d50
 800876c:	20001d4c 	.word	0x20001d4c
 8008770:	20001e5c 	.word	0x20001e5c
 8008774:	20001e60 	.word	0x20001e60

08008778 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800877e:	4b26      	ldr	r3, [pc, #152]	; (8008818 <vTaskSwitchContext+0xa0>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008786:	4b25      	ldr	r3, [pc, #148]	; (800881c <vTaskSwitchContext+0xa4>)
 8008788:	2201      	movs	r2, #1
 800878a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800878c:	e03e      	b.n	800880c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800878e:	4b23      	ldr	r3, [pc, #140]	; (800881c <vTaskSwitchContext+0xa4>)
 8008790:	2200      	movs	r2, #0
 8008792:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008794:	4b22      	ldr	r3, [pc, #136]	; (8008820 <vTaskSwitchContext+0xa8>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	fab3 f383 	clz	r3, r3
 80087a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	f1c3 031f 	rsb	r3, r3, #31
 80087a8:	617b      	str	r3, [r7, #20]
 80087aa:	491e      	ldr	r1, [pc, #120]	; (8008824 <vTaskSwitchContext+0xac>)
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	440b      	add	r3, r1
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d109      	bne.n	80087d2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	607b      	str	r3, [r7, #4]
 80087d0:	e7fe      	b.n	80087d0 <vTaskSwitchContext+0x58>
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	4613      	mov	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4a11      	ldr	r2, [pc, #68]	; (8008824 <vTaskSwitchContext+0xac>)
 80087de:	4413      	add	r3, r2
 80087e0:	613b      	str	r3, [r7, #16]
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	605a      	str	r2, [r3, #4]
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	3308      	adds	r3, #8
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d104      	bne.n	8008802 <vTaskSwitchContext+0x8a>
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	605a      	str	r2, [r3, #4]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	4a07      	ldr	r2, [pc, #28]	; (8008828 <vTaskSwitchContext+0xb0>)
 800880a:	6013      	str	r3, [r2, #0]
}
 800880c:	bf00      	nop
 800880e:	371c      	adds	r7, #28
 8008810:	46bd      	mov	sp, r7
 8008812:	bc80      	pop	{r7}
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	20001e74 	.word	0x20001e74
 800881c:	20001e60 	.word	0x20001e60
 8008820:	20001e54 	.word	0x20001e54
 8008824:	20001d50 	.word	0x20001d50
 8008828:	20001d4c 	.word	0x20001d4c

0800882c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008834:	f000 f852 	bl	80088dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008838:	4b06      	ldr	r3, [pc, #24]	; (8008854 <prvIdleTask+0x28>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d9f9      	bls.n	8008834 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008840:	4b05      	ldr	r3, [pc, #20]	; (8008858 <prvIdleTask+0x2c>)
 8008842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008850:	e7f0      	b.n	8008834 <prvIdleTask+0x8>
 8008852:	bf00      	nop
 8008854:	20001d50 	.word	0x20001d50
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008862:	2300      	movs	r3, #0
 8008864:	607b      	str	r3, [r7, #4]
 8008866:	e00c      	b.n	8008882 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	4613      	mov	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4a12      	ldr	r2, [pc, #72]	; (80088bc <prvInitialiseTaskLists+0x60>)
 8008874:	4413      	add	r3, r2
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff f9bc 	bl	8007bf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3301      	adds	r3, #1
 8008880:	607b      	str	r3, [r7, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b06      	cmp	r3, #6
 8008886:	d9ef      	bls.n	8008868 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008888:	480d      	ldr	r0, [pc, #52]	; (80088c0 <prvInitialiseTaskLists+0x64>)
 800888a:	f7ff f9b3 	bl	8007bf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800888e:	480d      	ldr	r0, [pc, #52]	; (80088c4 <prvInitialiseTaskLists+0x68>)
 8008890:	f7ff f9b0 	bl	8007bf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008894:	480c      	ldr	r0, [pc, #48]	; (80088c8 <prvInitialiseTaskLists+0x6c>)
 8008896:	f7ff f9ad 	bl	8007bf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800889a:	480c      	ldr	r0, [pc, #48]	; (80088cc <prvInitialiseTaskLists+0x70>)
 800889c:	f7ff f9aa 	bl	8007bf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088a0:	480b      	ldr	r0, [pc, #44]	; (80088d0 <prvInitialiseTaskLists+0x74>)
 80088a2:	f7ff f9a7 	bl	8007bf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088a6:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <prvInitialiseTaskLists+0x78>)
 80088a8:	4a05      	ldr	r2, [pc, #20]	; (80088c0 <prvInitialiseTaskLists+0x64>)
 80088aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <prvInitialiseTaskLists+0x7c>)
 80088ae:	4a05      	ldr	r2, [pc, #20]	; (80088c4 <prvInitialiseTaskLists+0x68>)
 80088b0:	601a      	str	r2, [r3, #0]
}
 80088b2:	bf00      	nop
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	20001d50 	.word	0x20001d50
 80088c0:	20001ddc 	.word	0x20001ddc
 80088c4:	20001df0 	.word	0x20001df0
 80088c8:	20001e0c 	.word	0x20001e0c
 80088cc:	20001e20 	.word	0x20001e20
 80088d0:	20001e38 	.word	0x20001e38
 80088d4:	20001e04 	.word	0x20001e04
 80088d8:	20001e08 	.word	0x20001e08

080088dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088e2:	e019      	b.n	8008918 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088e4:	f7ff fae8 	bl	8007eb8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80088e8:	4b0f      	ldr	r3, [pc, #60]	; (8008928 <prvCheckTasksWaitingTermination+0x4c>)
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3304      	adds	r3, #4
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7ff f9cb 	bl	8007c90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088fa:	4b0c      	ldr	r3, [pc, #48]	; (800892c <prvCheckTasksWaitingTermination+0x50>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3b01      	subs	r3, #1
 8008900:	4a0a      	ldr	r2, [pc, #40]	; (800892c <prvCheckTasksWaitingTermination+0x50>)
 8008902:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008904:	4b0a      	ldr	r3, [pc, #40]	; (8008930 <prvCheckTasksWaitingTermination+0x54>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3b01      	subs	r3, #1
 800890a:	4a09      	ldr	r2, [pc, #36]	; (8008930 <prvCheckTasksWaitingTermination+0x54>)
 800890c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800890e:	f7ff fb01 	bl	8007f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f80e 	bl	8008934 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008918:	4b05      	ldr	r3, [pc, #20]	; (8008930 <prvCheckTasksWaitingTermination+0x54>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1e1      	bne.n	80088e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	20001e20 	.word	0x20001e20
 800892c:	20001e4c 	.word	0x20001e4c
 8008930:	20001e34 	.word	0x20001e34

08008934 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008942:	2b00      	cmp	r3, #0
 8008944:	d108      	bne.n	8008958 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff f840 	bl	80079d0 <vPortFree>
				vPortFree( pxTCB );
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7ff f83d 	bl	80079d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008956:	e017      	b.n	8008988 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800895e:	2b01      	cmp	r3, #1
 8008960:	d103      	bne.n	800896a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff f834 	bl	80079d0 <vPortFree>
	}
 8008968:	e00e      	b.n	8008988 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008970:	2b02      	cmp	r3, #2
 8008972:	d009      	beq.n	8008988 <prvDeleteTCB+0x54>
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	e7fe      	b.n	8008986 <prvDeleteTCB+0x52>
	}
 8008988:	bf00      	nop
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008996:	4b0e      	ldr	r3, [pc, #56]	; (80089d0 <prvResetNextTaskUnblockTime+0x40>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <prvResetNextTaskUnblockTime+0x14>
 80089a0:	2301      	movs	r3, #1
 80089a2:	e000      	b.n	80089a6 <prvResetNextTaskUnblockTime+0x16>
 80089a4:	2300      	movs	r3, #0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d004      	beq.n	80089b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089aa:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <prvResetNextTaskUnblockTime+0x44>)
 80089ac:	f04f 32ff 	mov.w	r2, #4294967295
 80089b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089b2:	e008      	b.n	80089c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80089b4:	4b06      	ldr	r3, [pc, #24]	; (80089d0 <prvResetNextTaskUnblockTime+0x40>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	4a04      	ldr	r2, [pc, #16]	; (80089d4 <prvResetNextTaskUnblockTime+0x44>)
 80089c4:	6013      	str	r3, [r2, #0]
}
 80089c6:	bf00      	nop
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bc80      	pop	{r7}
 80089ce:	4770      	bx	lr
 80089d0:	20001e04 	.word	0x20001e04
 80089d4:	20001e6c 	.word	0x20001e6c

080089d8 <midiEventQueueInitialize>:
/// @brief Initializes MIDI event queue
/// @param in_event_queue Event queue state descriptor
/// @param in_buffer Queue storage for events
/// @param in_buffer_size Queue buffer size in number of events
void midiEventQueueInitialize(midiEventQueueInfo* in_event_queue, USBMIDIEventPacket* in_buffer, uint16_t in_buffer_size)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	4613      	mov	r3, r2
 80089e4:	80fb      	strh	r3, [r7, #6]
	sysMemZero(in_event_queue, sizeof(midiEventQueueInfo));
 80089e6:	210c      	movs	r1, #12
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 fa2b 	bl	8008e44 <sysMemZero>
	
	in_event_queue->EventQueue = in_buffer;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	601a      	str	r2, [r3, #0]
	in_event_queue->EventQueueSize = in_buffer_size;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	88fa      	ldrh	r2, [r7, #6]
 80089f8:	809a      	strh	r2, [r3, #4]
}
 80089fa:	bf00      	nop
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <midiEventQueueIsEmpty>:

///////////////////////////////////////////////////////////////////////////////
/// @brief Returns the state (empty/non empty) of the MIDI buffer
/// @param in_event_queue Event queue state descriptor
bool midiEventQueueIsEmpty(midiEventQueueInfo* in_event_queue)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
	return (in_event_queue->PushIndex == in_event_queue->PopIndex);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	88db      	ldrh	r3, [r3, #6]
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	891b      	ldrh	r3, [r3, #8]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	429a      	cmp	r2, r3
 8008a18:	bf0c      	ite	eq
 8008a1a:	2301      	moveq	r3, #1
 8008a1c:	2300      	movne	r3, #0
 8008a1e:	b2db      	uxtb	r3, r3
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bc80      	pop	{r7}
 8008a28:	4770      	bx	lr

08008a2a <midiEventQueueClear>:

///////////////////////////////////////////////////////////////////////////////
/// @brief Clears MIDI event queue
/// @param in_event_queue Event queue state descriptor
void midiEventQueueClear(midiEventQueueInfo* in_event_queue)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
	in_event_queue->PushIndex = 0;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	80da      	strh	r2, [r3, #6]
	in_event_queue->PopIndex = 0;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	811a      	strh	r2, [r3, #8]
}
 8008a3e:	bf00      	nop
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bc80      	pop	{r7}
 8008a46:	4770      	bx	lr

08008a48 <midiEventQueuePush>:
/// @brief Pushes MIDI event into the MIDI output queue
/// @param in_event_queue Event queue state descriptor
/// @param in_event MIDI event to push
/// @return true if event was pushed or false is there is no space in the buffer
bool midiEventQueuePush(midiEventQueueInfo* in_event_queue, USBMIDIEventPacket in_event)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
	uint16_t new_push_index;
	
	// generate new push pointer
	new_push_index = in_event_queue->PushIndex + 1;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	88db      	ldrh	r3, [r3, #6]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	3301      	adds	r3, #1
 8008a5a:	81fb      	strh	r3, [r7, #14]
	if (new_push_index >= in_event_queue->EventQueueSize)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	889b      	ldrh	r3, [r3, #4]
 8008a60:	89fa      	ldrh	r2, [r7, #14]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d301      	bcc.n	8008a6a <midiEventQueuePush+0x22>
		new_push_index = 0;
 8008a66:	2300      	movs	r3, #0
 8008a68:	81fb      	strh	r3, [r7, #14]
	
	// check for free space in the buffer
	if (new_push_index == in_event_queue->PopIndex)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	891b      	ldrh	r3, [r3, #8]
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	89fa      	ldrh	r2, [r7, #14]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d101      	bne.n	8008a7a <midiEventQueuePush+0x32>
		return false;
 8008a76:	2300      	movs	r3, #0
 8008a78:	e00a      	b.n	8008a90 <midiEventQueuePush+0x48>
	
	// store event in the buffer
	in_event_queue->EventQueue[new_push_index].EventData = in_event.EventData;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	89fb      	ldrh	r3, [r7, #14]
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	601a      	str	r2, [r3, #0]
	
	in_event_queue->PushIndex = new_push_index;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	89fa      	ldrh	r2, [r7, #14]
 8008a8c:	80da      	strh	r2, [r3, #6]
	
	return true;
 8008a8e:	2301      	movs	r3, #1
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bc80      	pop	{r7}
 8008a98:	4770      	bx	lr

08008a9a <midiEventQueuePop>:
///////////////////////////////////////////////////////////////////////////////
/// @brief Pops MIDI event from the queue.
/// @param in_event_queue Event queue state descriptor
/// @return MIDI event, invalidated of there is no event in the queue
USBMIDIEventPacket midiEventQueuePop(midiEventQueueInfo* in_event_queue)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b087      	sub	sp, #28
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
	USBMIDIEventPacket retval;
	uint16_t new_pop_pointer;
	
	retval.EventData = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60fb      	str	r3, [r7, #12]
	
	// check if buffer contains event
	if (in_event_queue->PopIndex  != in_event_queue->PushIndex)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	891b      	ldrh	r3, [r3, #8]
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	88db      	ldrh	r3, [r3, #6]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d015      	beq.n	8008ae2 <midiEventQueuePop+0x48>
	{
		// increment pop pointer
		new_pop_pointer = in_event_queue->PopIndex + 1;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	891b      	ldrh	r3, [r3, #8]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	3301      	adds	r3, #1
 8008abe:	82fb      	strh	r3, [r7, #22]
		if (new_pop_pointer >= in_event_queue->EventQueueSize)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	889b      	ldrh	r3, [r3, #4]
 8008ac4:	8afa      	ldrh	r2, [r7, #22]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d301      	bcc.n	8008ace <midiEventQueuePop+0x34>
			new_pop_pointer = 0;		
 8008aca:	2300      	movs	r3, #0
 8008acc:	82fb      	strh	r3, [r7, #22]
		
		retval.EventData = in_event_queue->EventQueue[new_pop_pointer].EventData;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	8afb      	ldrh	r3, [r7, #22]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	60fb      	str	r3, [r7, #12]
		
		in_event_queue->PopIndex = new_pop_pointer;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	8afa      	ldrh	r2, [r7, #22]
 8008ae0:	811a      	strh	r2, [r3, #8]
	}
	
	return retval;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	613b      	str	r3, [r7, #16]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	7c3a      	ldrb	r2, [r7, #16]
 8008aea:	f362 0307 	bfi	r3, r2, #0, #8
 8008aee:	7c7a      	ldrb	r2, [r7, #17]
 8008af0:	f362 230f 	bfi	r3, r2, #8, #8
 8008af4:	7cba      	ldrb	r2, [r7, #18]
 8008af6:	f362 4317 	bfi	r3, r2, #16, #8
 8008afa:	7cfa      	ldrb	r2, [r7, #19]
 8008afc:	f362 631f 	bfi	r3, r2, #24, #8
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	371c      	adds	r7, #28
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bc80      	pop	{r7}
 8008b08:	4770      	bx	lr
	...

08008b0c <midiInputClear>:
}

///////////////////////////////////////////////////////////////////////////////
/// @brief Clears MIDI input queue
void midiInputClear(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
	midiEventQueueClear(&l_midi_input_queue);
 8008b10:	4802      	ldr	r0, [pc, #8]	; (8008b1c <midiInputClear+0x10>)
 8008b12:	f7ff ff8a 	bl	8008a2a <midiEventQueueClear>
}
 8008b16:	bf00      	nop
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20001e78 	.word	0x20001e78

08008b20 <midiInputIsEmpty>:

///////////////////////////////////////////////////////////////////////////////
/// @Brief Returns the state of the MIDI In buffer
/// @return true if MIDI In queue is empty
bool midiInputIsEmpty(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
	return midiEventQueueIsEmpty(&l_midi_input_queue);
 8008b24:	4802      	ldr	r0, [pc, #8]	; (8008b30 <midiInputIsEmpty+0x10>)
 8008b26:	f7ff ff6c 	bl	8008a02 <midiEventQueueIsEmpty>
 8008b2a:	4603      	mov	r3, r0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	20001e78 	.word	0x20001e78

08008b34 <midiInputEventPopAndStore>:
/// @brief Pops MIDI event from the queue and copies to the given buffer
/// @param in_buffer A buffer to receive MIDI events
/// @param in_buffer_length Size of the MIDI event buffer in bytes
/// @retval Number of bytes copied to the buffer
uint16_t midiInputEventPopAndStore(uint8_t* in_buffer, uint16_t in_buffer_length)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	807b      	strh	r3, [r7, #2]
	USBMIDIEventPacket* buffer = (USBMIDIEventPacket*)in_buffer;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	613b      	str	r3, [r7, #16]
	uint16_t buffer_event_size = in_buffer_length / sizeof(USBMIDIEventPacket);
 8008b44:	887b      	ldrh	r3, [r7, #2]
 8008b46:	089b      	lsrs	r3, r3, #2
 8008b48:	81fb      	strh	r3, [r7, #14]
	uint16_t event_index;
	USBMIDIEventPacket event;
	
	// pop and copy events from the queue 
	event_index = 0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	82fb      	strh	r3, [r7, #22]
	do
	{
		event = midiEventQueuePop(&l_midi_input_queue);
 8008b4e:	480f      	ldr	r0, [pc, #60]	; (8008b8c <midiInputEventPopAndStore+0x58>)
 8008b50:	f7ff ffa3 	bl	8008a9a <midiEventQueuePop>
 8008b54:	4603      	mov	r3, r0
 8008b56:	60bb      	str	r3, [r7, #8]
		
		if (event.EventData != 0)
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d007      	beq.n	8008b6e <midiInputEventPopAndStore+0x3a>
		{
			buffer[event_index++].EventData = event.EventData;
 8008b5e:	8afb      	ldrh	r3, [r7, #22]
 8008b60:	1c5a      	adds	r2, r3, #1
 8008b62:	82fa      	strh	r2, [r7, #22]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	4413      	add	r3, r2
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	601a      	str	r2, [r3, #0]
		}
	} while ( event_index < buffer_event_size && event.EventData != 0);
 8008b6e:	8afa      	ldrh	r2, [r7, #22]
 8008b70:	89fb      	ldrh	r3, [r7, #14]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d202      	bcs.n	8008b7c <midiInputEventPopAndStore+0x48>
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e8      	bne.n	8008b4e <midiInputEventPopAndStore+0x1a>
	
	// return used buffer size
	return event_index * sizeof(USBMIDIEventPacket);
 8008b7c:	8afb      	ldrh	r3, [r7, #22]
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	b29b      	uxth	r3, r3
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3718      	adds	r7, #24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20001e78 	.word	0x20001e78

08008b90 <midiOutputInitialize>:
/*****************************************************************************/

///////////////////////////////////////////////////////////////////////////////
/// @brief Initialize MIDI output
void midiOutputInitialize(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	af00      	add	r7, sp, #0
	midiEventQueueInitialize(&l_midi_output_queue, l_midi_output_queue_buffer, midiOUT_BUFFER_MAX_EVENT_COUNT);
 8008b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b98:	4905      	ldr	r1, [pc, #20]	; (8008bb0 <midiOutputInitialize+0x20>)
 8008b9a:	4806      	ldr	r0, [pc, #24]	; (8008bb4 <midiOutputInitialize+0x24>)
 8008b9c:	f7ff ff1c 	bl	80089d8 <midiEventQueueInitialize>
	l_running_status = MIDI_INVALID_TYPE;
 8008ba0:	4b05      	ldr	r3, [pc, #20]	; (8008bb8 <midiOutputInitialize+0x28>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	701a      	strb	r2, [r3, #0]
	l_is_transmitting = false;
 8008ba6:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <midiOutputInitialize+0x2c>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	701a      	strb	r2, [r3, #0]
}
 8008bac:	bf00      	nop
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	20001e84 	.word	0x20001e84
 8008bb4:	20003f78 	.word	0x20003f78
 8008bb8:	20003e85 	.word	0x20003e85
 8008bbc:	20003e84 	.word	0x20003e84

08008bc0 <midiOutputEventPush>:
///////////////////////////////////////////////////////////////////////////////
/// @brief Pushes MIDI event into the MIDI output queue
/// @param in_event MIDI event to push
/// @return true if event was pushed or false is there is no space in the buffer
bool midiOutputEventPush(USBMIDIEventPacket in_event)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
	return midiEventQueuePush(&l_midi_output_queue, in_event);
 8008bc8:	6879      	ldr	r1, [r7, #4]
 8008bca:	4804      	ldr	r0, [pc, #16]	; (8008bdc <midiOutputEventPush+0x1c>)
 8008bcc:	f7ff ff3c 	bl	8008a48 <midiEventQueuePush>
 8008bd0:	4603      	mov	r3, r0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20003f78 	.word	0x20003f78

08008be0 <midiOutput>:
	l_is_transmitting = true;

	return true;
}
bool midiOutput(uint8_t* data,uint8_t* data1,uint8_t* data2,uint8_t* data3)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	603b      	str	r3, [r7, #0]
	uint16_t buffer_pos = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	82fb      	strh	r3, [r7, #22]
	USBMIDIEventPacket event;


	// check if buffer contains event
	if (midiEventQueueIsEmpty(&l_midi_output_queue))
 8008bf2:	4812      	ldr	r0, [pc, #72]	; (8008c3c <midiOutput+0x5c>)
 8008bf4:	f7ff ff05 	bl	8008a02 <midiEventQueueIsEmpty>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <midiOutput+0x22>
		return false;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e017      	b.n	8008c32 <midiOutput+0x52>

	// pop event
	event = midiEventQueuePop(&l_midi_output_queue);
 8008c02:	480e      	ldr	r0, [pc, #56]	; (8008c3c <midiOutput+0x5c>)
 8008c04:	f7ff ff49 	bl	8008a9a <midiEventQueuePop>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	613b      	str	r3, [r7, #16]

	// convert data from USB event format to MIDI message and store it in the buffer


			//	GPIOC ->ODR |=GPIO_ODR_ODR13;
			*data=event.PacketHeader;
 8008c0c:	7c3a      	ldrb	r2, [r7, #16]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	701a      	strb	r2, [r3, #0]
			*data1= event.Data0;
 8008c12:	7c7a      	ldrb	r2, [r7, #17]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	701a      	strb	r2, [r3, #0]
			*data2= event.Data1;
 8008c18:	7cba      	ldrb	r2, [r7, #18]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	701a      	strb	r2, [r3, #0]
			*data3= event.Data2;
 8008c1e:	7cfa      	ldrb	r2, [r7, #19]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	701a      	strb	r2, [r3, #0]
			/*if(data==CIN_NOTE_OFF)GPIOC ->ODR |=GPIO_ODR_ODR13;
			if(data==CIN_NOTE_ON)GPIOC ->ODR &= ~ GPIO_ODR_ODR13;*/
			l_running_status = event.Data0;
 8008c24:	7c7a      	ldrb	r2, [r7, #17]
 8008c26:	4b06      	ldr	r3, [pc, #24]	; (8008c40 <midiOutput+0x60>)
 8008c28:	701a      	strb	r2, [r3, #0]

	l_is_transmitting = true;
 8008c2a:	4b06      	ldr	r3, [pc, #24]	; (8008c44 <midiOutput+0x64>)
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	701a      	strb	r2, [r3, #0]
	
	return true;
 8008c30:	2301      	movs	r3, #1
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20003f78 	.word	0x20003f78
 8008c40:	20003e85 	.word	0x20003e85
 8008c44:	20003e84 	.word	0x20003e84

08008c48 <midiUSBDeviceInitialize>:


//////////////////////////////////////////////////////////////////////////////
/// @brief Initializes USB MIDI device
void midiUSBDeviceInitialize(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	af00      	add	r7, sp, #0
  /* Init Device Library,Add Supported Class and Start the library*/
	USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	4908      	ldr	r1, [pc, #32]	; (8008c70 <midiUSBDeviceInitialize+0x28>)
 8008c50:	4808      	ldr	r0, [pc, #32]	; (8008c74 <midiUSBDeviceInitialize+0x2c>)
 8008c52:	f000 f905 	bl	8008e60 <USBD_Init>

	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 8008c56:	4908      	ldr	r1, [pc, #32]	; (8008c78 <midiUSBDeviceInitialize+0x30>)
 8008c58:	4806      	ldr	r0, [pc, #24]	; (8008c74 <midiUSBDeviceInitialize+0x2c>)
 8008c5a:	f000 f92c 	bl	8008eb6 <USBD_RegisterClass>

	USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8008c5e:	4907      	ldr	r1, [pc, #28]	; (8008c7c <midiUSBDeviceInitialize+0x34>)
 8008c60:	4804      	ldr	r0, [pc, #16]	; (8008c74 <midiUSBDeviceInitialize+0x2c>)
 8008c62:	f001 fa89 	bl	800a178 <USBD_MIDI_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 8008c66:	4803      	ldr	r0, [pc, #12]	; (8008c74 <midiUSBDeviceInitialize+0x2c>)
 8008c68:	f000 f93e 	bl	8008ee8 <USBD_Start>
}
 8008c6c:	bf00      	nop
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	20000188 	.word	0x20000188
 8008c74:	20003f84 	.word	0x20003f84
 8008c78:	200000e8 	.word	0x200000e8
 8008c7c:	200000d0 	.word	0x200000d0

08008c80 <midiIsConnected>:

///////////////////////////////////////////////////////////////////////////////
/// @brief Check MIDI USB connection status
/// @return True if device is connected to the USB host and enumerated
bool midiIsConnected(void)
{
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0
	return (hUsbDeviceFS.pClassData != NULL);
 8008c84:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <midiIsConnected+0x1c>)
 8008c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	bf14      	ite	ne
 8008c8e:	2301      	movne	r3, #1
 8008c90:	2300      	moveq	r3, #0
 8008c92:	b2db      	uxtb	r3, r3
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bc80      	pop	{r7}
 8008c9a:	4770      	bx	lr
 8008c9c:	20003f84 	.word	0x20003f84

08008ca0 <midiUSBInitialize>:

///////////////////////////////////////////////////////////////////////////////
/// @brief  Initializes the MIDI USB low layer over the FS USB IP
/// @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
static int8_t midiUSBInitialize(void)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	af00      	add	r7, sp, #0
	// Set Application Buffers
	USBD_MIDI_SetTxBuffer(&hUsbDeviceFS, l_usb_transmit_buffer, 0);
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	4905      	ldr	r1, [pc, #20]	; (8008cbc <midiUSBInitialize+0x1c>)
 8008ca8:	4805      	ldr	r0, [pc, #20]	; (8008cc0 <midiUSBInitialize+0x20>)
 8008caa:	f001 fa7b 	bl	800a1a4 <USBD_MIDI_SetTxBuffer>
	USBD_MIDI_SetRxBuffer(&hUsbDeviceFS, l_usb_receive_buffer);
 8008cae:	4905      	ldr	r1, [pc, #20]	; (8008cc4 <midiUSBInitialize+0x24>)
 8008cb0:	4803      	ldr	r0, [pc, #12]	; (8008cc0 <midiUSBInitialize+0x20>)
 8008cb2:	f001 fa93 	bl	800a1dc <USBD_MIDI_SetRxBuffer>

	return (USBD_OK);
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	20003e88 	.word	0x20003e88
 8008cc0:	20003f84 	.word	0x20003f84
 8008cc4:	20003ec8 	.word	0x20003ec8

08008cc8 <midiUSBDeinitialize>:

///////////////////////////////////////////////////////////////////////////////
/// @brief DeInitializes the MIDI USB media low layer
/// @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
static int8_t midiUSBDeinitialize(void)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	af00      	add	r7, sp, #0
	return (USBD_OK);
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bc80      	pop	{r7}
 8008cd4:	4770      	bx	lr
	...

08008cd8 <midiUSBReceive>:
/// @brief  Process data received over USB MIDI data OUT endpoint
/// @param  Buf: Buffer of data to be received
/// @param  Len: Number of data received (in bytes)
/// @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
static int8_t midiUSBReceive(uint8_t* Buf, uint32_t *Len)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
	// prepare processing new received packet
	l_pending_receive_event_buffer = (USBMIDIEventPacket*)Buf;
 8008ce2:	4a09      	ldr	r2, [pc, #36]	; (8008d08 <midiUSBReceive+0x30>)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6013      	str	r3, [r2, #0]
	l_pending_receiver_event_buffer_count = (uint16_t)(*Len / sizeof(USBMIDIEventPacket));
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	089b      	lsrs	r3, r3, #2
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <midiUSBReceive+0x34>)
 8008cf2:	801a      	strh	r2, [r3, #0]
	l_pending_receiver_event_buffer_index = 0;
 8008cf4:	4b06      	ldr	r3, [pc, #24]	; (8008d10 <midiUSBReceive+0x38>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	801a      	strh	r2, [r3, #0]
	
	// process received packet
	midiUSBProcessUSBReceivedEvent();
 8008cfa:	f000 f847 	bl	8008d8c <midiUSBProcessUSBReceivedEvent>

	return (USBD_OK);
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	20003f08 	.word	0x20003f08
 8008d0c:	20003f0c 	.word	0x20003f0c
 8008d10:	20003f0e 	.word	0x20003f0e

08008d14 <midiUSBTask>:

///////////////////////////////////////////////////////////////////////////////
/// @brief Handles task related to MIDI USB communication
void midiUSBTask(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
	// process events received over USB
	midiUSBProcessUSBReceivedEvent();
 8008d18:	f000 f838 	bl	8008d8c <midiUSBProcessUSBReceivedEvent>
	midiUSBProcessUSBTransmitEvent();
 8008d1c:	f000 f802 	bl	8008d24 <midiUSBProcessUSBTransmitEvent>
}
 8008d20:	bf00      	nop
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <midiUSBProcessUSBTransmitEvent>:

///////////////////////////////////////////////////////////////////////////////
/// @brief Transmits data over USB
static void midiUSBProcessUSBTransmitEvent(void)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
	int16_t packet_length;
	
	// check for connection
	if(midiIsConnected())
 8008d2a:	f7ff ffa9 	bl	8008c80 <midiIsConnected>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d021      	beq.n	8008d78 <midiUSBProcessUSBTransmitEvent+0x54>
	{
		// if connected transfer received MIDI event over the USB
		if (!USBD_MIDI_IsTransmitterBusy(&hUsbDeviceFS) && !midiInputIsEmpty())
 8008d34:	4813      	ldr	r0, [pc, #76]	; (8008d84 <midiUSBProcessUSBTransmitEvent+0x60>)
 8008d36:	f001 fa68 	bl	800a20a <USBD_MIDI_IsTransmitterBusy>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d11d      	bne.n	8008d7c <midiUSBProcessUSBTransmitEvent+0x58>
 8008d40:	f7ff feee 	bl	8008b20 <midiInputIsEmpty>
 8008d44:	4603      	mov	r3, r0
 8008d46:	f083 0301 	eor.w	r3, r3, #1
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d015      	beq.n	8008d7c <midiUSBProcessUSBTransmitEvent+0x58>
		{
			packet_length = midiInputEventPopAndStore(l_usb_transmit_buffer, USB_MIDI_DATA_HS_IN_SIZE);
 8008d50:	2140      	movs	r1, #64	; 0x40
 8008d52:	480d      	ldr	r0, [pc, #52]	; (8008d88 <midiUSBProcessUSBTransmitEvent+0x64>)
 8008d54:	f7ff feee 	bl	8008b34 <midiInputEventPopAndStore>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	80fb      	strh	r3, [r7, #6]

			if (packet_length > 0)
 8008d5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	dd0b      	ble.n	8008d7c <midiUSBProcessUSBTransmitEvent+0x58>
			{
				USBD_MIDI_SetTxBuffer(&hUsbDeviceFS, l_usb_transmit_buffer, packet_length);
 8008d64:	88fb      	ldrh	r3, [r7, #6]
 8008d66:	461a      	mov	r2, r3
 8008d68:	4907      	ldr	r1, [pc, #28]	; (8008d88 <midiUSBProcessUSBTransmitEvent+0x64>)
 8008d6a:	4806      	ldr	r0, [pc, #24]	; (8008d84 <midiUSBProcessUSBTransmitEvent+0x60>)
 8008d6c:	f001 fa1a 	bl	800a1a4 <USBD_MIDI_SetTxBuffer>
				USBD_MIDI_TransmitPacket(&hUsbDeviceFS);
 8008d70:	4804      	ldr	r0, [pc, #16]	; (8008d84 <midiUSBProcessUSBTransmitEvent+0x60>)
 8008d72:	f001 fa7d 	bl	800a270 <USBD_MIDI_TransmitPacket>
	else
	{
		// if not connected clear MIDI input buffer
		midiInputClear();
	}
}
 8008d76:	e001      	b.n	8008d7c <midiUSBProcessUSBTransmitEvent+0x58>
		midiInputClear();
 8008d78:	f7ff fec8 	bl	8008b0c <midiInputClear>
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	20003f84 	.word	0x20003f84
 8008d88:	20003e88 	.word	0x20003e88

08008d8c <midiUSBProcessUSBReceivedEvent>:


///////////////////////////////////////////////////////////////////////////////
/// @brief Processes received data from MIDI USB 
static void midiUSBProcessUSBReceivedEvent(void)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	af00      	add	r7, sp, #0
	// do nothing if it is not connected
	if(!midiIsConnected())
 8008d90:	f7ff ff76 	bl	8008c80 <midiIsConnected>
 8008d94:	4603      	mov	r3, r0
 8008d96:	f083 0301 	eor.w	r3, r3, #1
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d145      	bne.n	8008e2c <midiUSBProcessUSBReceivedEvent+0xa0>
		return;

	// if buffer is not empty -> process buffer
	if (l_pending_receive_event_buffer != NULL)
 8008da0:	4b23      	ldr	r3, [pc, #140]	; (8008e30 <midiUSBProcessUSBReceivedEvent+0xa4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d02f      	beq.n	8008e08 <midiUSBProcessUSBReceivedEvent+0x7c>
	{
		// copy events to the event buffer
		while (l_pending_receiver_event_buffer_index < l_pending_receiver_event_buffer_count)
 8008da8:	e017      	b.n	8008dda <midiUSBProcessUSBReceivedEvent+0x4e>
		{
			if (!midiOutputEventPush(l_pending_receive_event_buffer[l_pending_receiver_event_buffer_index]))
 8008daa:	4b21      	ldr	r3, [pc, #132]	; (8008e30 <midiUSBProcessUSBReceivedEvent+0xa4>)
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	4b21      	ldr	r3, [pc, #132]	; (8008e34 <midiUSBProcessUSBReceivedEvent+0xa8>)
 8008db0:	881b      	ldrh	r3, [r3, #0]
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2200      	movs	r2, #0
 8008dba:	461a      	mov	r2, r3
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	f7ff feff 	bl	8008bc0 <midiOutputEventPush>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	f083 0301 	eor.w	r3, r3, #1
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10c      	bne.n	8008de8 <midiUSBProcessUSBReceivedEvent+0x5c>
				break;

			l_pending_receiver_event_buffer_index++;
 8008dce:	4b19      	ldr	r3, [pc, #100]	; (8008e34 <midiUSBProcessUSBReceivedEvent+0xa8>)
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	4b17      	ldr	r3, [pc, #92]	; (8008e34 <midiUSBProcessUSBReceivedEvent+0xa8>)
 8008dd8:	801a      	strh	r2, [r3, #0]
		while (l_pending_receiver_event_buffer_index < l_pending_receiver_event_buffer_count)
 8008dda:	4b16      	ldr	r3, [pc, #88]	; (8008e34 <midiUSBProcessUSBReceivedEvent+0xa8>)
 8008ddc:	881a      	ldrh	r2, [r3, #0]
 8008dde:	4b16      	ldr	r3, [pc, #88]	; (8008e38 <midiUSBProcessUSBReceivedEvent+0xac>)
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d3e1      	bcc.n	8008daa <midiUSBProcessUSBReceivedEvent+0x1e>
 8008de6:	e000      	b.n	8008dea <midiUSBProcessUSBReceivedEvent+0x5e>
				break;
 8008de8:	bf00      	nop
		}
		
		// if all events could be copied into event buffer then reset buffer
		if (l_pending_receiver_event_buffer_index >= l_pending_receiver_event_buffer_count)
 8008dea:	4b12      	ldr	r3, [pc, #72]	; (8008e34 <midiUSBProcessUSBReceivedEvent+0xa8>)
 8008dec:	881a      	ldrh	r2, [r3, #0]
 8008dee:	4b12      	ldr	r3, [pc, #72]	; (8008e38 <midiUSBProcessUSBReceivedEvent+0xac>)
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d308      	bcc.n	8008e08 <midiUSBProcessUSBReceivedEvent+0x7c>
		{
			l_pending_receive_event_buffer = NULL;
 8008df6:	4b0e      	ldr	r3, [pc, #56]	; (8008e30 <midiUSBProcessUSBReceivedEvent+0xa4>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	601a      	str	r2, [r3, #0]
			l_pending_receiver_event_buffer_count = 0;
 8008dfc:	4b0e      	ldr	r3, [pc, #56]	; (8008e38 <midiUSBProcessUSBReceivedEvent+0xac>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	801a      	strh	r2, [r3, #0]
			l_pending_receiver_event_buffer_index = 0;
 8008e02:	4b0c      	ldr	r3, [pc, #48]	; (8008e34 <midiUSBProcessUSBReceivedEvent+0xa8>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	801a      	strh	r2, [r3, #0]
		}
	}
	
	// if buffer is empty and receiver is not started -> start it
	if(!USBD_MIDI_IsReceiverBusy(&hUsbDeviceFS))
 8008e08:	480c      	ldr	r0, [pc, #48]	; (8008e3c <midiUSBProcessUSBReceivedEvent+0xb0>)
 8008e0a:	f001 fa19 	bl	800a240 <USBD_MIDI_IsReceiverBusy>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10c      	bne.n	8008e2e <midiUSBProcessUSBReceivedEvent+0xa2>
	{
		if(l_pending_receive_event_buffer == NULL)
 8008e14:	4b06      	ldr	r3, [pc, #24]	; (8008e30 <midiUSBProcessUSBReceivedEvent+0xa4>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d108      	bne.n	8008e2e <midiUSBProcessUSBReceivedEvent+0xa2>
		{
			// restart receiver
			USBD_MIDI_SetRxBuffer(&hUsbDeviceFS, l_usb_receive_buffer);
 8008e1c:	4908      	ldr	r1, [pc, #32]	; (8008e40 <midiUSBProcessUSBReceivedEvent+0xb4>)
 8008e1e:	4807      	ldr	r0, [pc, #28]	; (8008e3c <midiUSBProcessUSBReceivedEvent+0xb0>)
 8008e20:	f001 f9dc 	bl	800a1dc <USBD_MIDI_SetRxBuffer>
			USBD_MIDI_ReceivePacket(&hUsbDeviceFS);
 8008e24:	4805      	ldr	r0, [pc, #20]	; (8008e3c <midiUSBProcessUSBReceivedEvent+0xb0>)
 8008e26:	f001 fa49 	bl	800a2bc <USBD_MIDI_ReceivePacket>
 8008e2a:	e000      	b.n	8008e2e <midiUSBProcessUSBReceivedEvent+0xa2>
		return;
 8008e2c:	bf00      	nop
		}
	}
}
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	20003f08 	.word	0x20003f08
 8008e34:	20003f0e 	.word	0x20003f0e
 8008e38:	20003f0c 	.word	0x20003f0c
 8008e3c:	20003f84 	.word	0x20003f84
 8008e40:	20003ec8 	.word	0x20003ec8

08008e44 <sysMemZero>:
///////////////////////////////////////////////////////////////////////////////
/// @brief Fills the given memory region with zeros
/// @param in_destination memory address to fill with zeros
/// @param in_size Number of bytes to fill
void sysMemZero(void* in_destination, size_t in_size)  
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
	memset(in_destination, 0, in_size);
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	2100      	movs	r1, #0
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 fd4c 	bl	800a8f0 <memset>
}
 8008e58:	bf00      	nop
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e74:	2302      	movs	r3, #2
 8008e76:	e01a      	b.n	8008eae <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d003      	beq.n	8008e8a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	79fa      	ldrb	r2, [r7, #7]
 8008ea4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f001 fba0 	bl	800a5ec <USBD_LL_Init>

  return USBD_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b085      	sub	sp, #20
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d006      	beq.n	8008ed8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	73fb      	strb	r3, [r7, #15]
 8008ed6:	e001      	b.n	8008edc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008ed8:	2302      	movs	r3, #2
 8008eda:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bc80      	pop	{r7}
 8008ee6:	4770      	bx	lr

08008ee8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f001 fbd3 	bl	800a69c <USBD_LL_Start>

  return USBD_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bc80      	pop	{r7}
 8008f12:	4770      	bx	lr

08008f14 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f20:	2302      	movs	r3, #2
 8008f22:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00c      	beq.n	8008f48 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	78fa      	ldrb	r2, [r7, #3]
 8008f38:	4611      	mov	r1, r2
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	4798      	blx	r3
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d101      	bne.n	8008f48 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	78fa      	ldrb	r2, [r7, #3]
 8008f68:	4611      	mov	r1, r2
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3

  return USBD_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 feca 	bl	8009d24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008fac:	f003 031f 	and.w	r3, r3, #31
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d00c      	beq.n	8008fce <USBD_LL_SetupStage+0x56>
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d302      	bcc.n	8008fbe <USBD_LL_SetupStage+0x46>
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d010      	beq.n	8008fde <USBD_LL_SetupStage+0x66>
 8008fbc:	e017      	b.n	8008fee <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f9ca 	bl	8009360 <USBD_StdDevReq>
      break;
 8008fcc:	e01a      	b.n	8009004 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fa2c 	bl	8009434 <USBD_StdItfReq>
      break;
 8008fdc:	e012      	b.n	8009004 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fa6a 	bl	80094c0 <USBD_StdEPReq>
      break;
 8008fec:	e00a      	b.n	8009004 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008ff4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 fb89 	bl	800a714 <USBD_LL_StallEP>
      break;
 8009002:	bf00      	nop
  }

  return USBD_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b086      	sub	sp, #24
 8009012:	af00      	add	r7, sp, #0
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	460b      	mov	r3, r1
 8009018:	607a      	str	r2, [r7, #4]
 800901a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800901c:	7afb      	ldrb	r3, [r7, #11]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d14b      	bne.n	80090ba <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009028:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009030:	2b03      	cmp	r3, #3
 8009032:	d134      	bne.n	800909e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	429a      	cmp	r2, r3
 800903e:	d919      	bls.n	8009074 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	1ad2      	subs	r2, r2, r3
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009056:	429a      	cmp	r2, r3
 8009058:	d203      	bcs.n	8009062 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800905e:	b29b      	uxth	r3, r3
 8009060:	e002      	b.n	8009068 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009066:	b29b      	uxth	r3, r3
 8009068:	461a      	mov	r2, r3
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 ff2d 	bl	8009ecc <USBD_CtlContinueRx>
 8009072:	e038      	b.n	80090e6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00a      	beq.n	8009096 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009086:	2b03      	cmp	r3, #3
 8009088:	d105      	bne.n	8009096 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f000 ff2a 	bl	8009ef0 <USBD_CtlSendStatus>
 800909c:	e023      	b.n	80090e6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090a4:	2b05      	cmp	r3, #5
 80090a6:	d11e      	bne.n	80090e6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80090b0:	2100      	movs	r1, #0
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f001 fb2e 	bl	800a714 <USBD_LL_StallEP>
 80090b8:	e015      	b.n	80090e6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00d      	beq.n	80090e2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d108      	bne.n	80090e2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	7afa      	ldrb	r2, [r7, #11]
 80090da:	4611      	mov	r1, r2
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	4798      	blx	r3
 80090e0:	e001      	b.n	80090e6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80090e2:	2302      	movs	r3, #2
 80090e4:	e000      	b.n	80090e8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3718      	adds	r7, #24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	460b      	mov	r3, r1
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80090fe:	7afb      	ldrb	r3, [r7, #11]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d17f      	bne.n	8009204 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3314      	adds	r3, #20
 8009108:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009110:	2b02      	cmp	r3, #2
 8009112:	d15c      	bne.n	80091ce <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	68da      	ldr	r2, [r3, #12]
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	429a      	cmp	r2, r3
 800911e:	d915      	bls.n	800914c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	1ad2      	subs	r2, r2, r3
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	b29b      	uxth	r3, r3
 8009134:	461a      	mov	r2, r3
 8009136:	6879      	ldr	r1, [r7, #4]
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f000 feb5 	bl	8009ea8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800913e:	2300      	movs	r3, #0
 8009140:	2200      	movs	r2, #0
 8009142:	2100      	movs	r1, #0
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f001 fb5a 	bl	800a7fe <USBD_LL_PrepareReceive>
 800914a:	e04e      	b.n	80091ea <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	6912      	ldr	r2, [r2, #16]
 8009154:	fbb3 f1f2 	udiv	r1, r3, r2
 8009158:	fb02 f201 	mul.w	r2, r2, r1
 800915c:	1a9b      	subs	r3, r3, r2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d11c      	bne.n	800919c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800916a:	429a      	cmp	r2, r3
 800916c:	d316      	bcc.n	800919c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	689a      	ldr	r2, [r3, #8]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009178:	429a      	cmp	r2, r3
 800917a:	d20f      	bcs.n	800919c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800917c:	2200      	movs	r2, #0
 800917e:	2100      	movs	r1, #0
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 fe91 	bl	8009ea8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800918e:	2300      	movs	r3, #0
 8009190:	2200      	movs	r2, #0
 8009192:	2100      	movs	r1, #0
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f001 fb32 	bl	800a7fe <USBD_LL_PrepareReceive>
 800919a:	e026      	b.n	80091ea <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00a      	beq.n	80091be <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d105      	bne.n	80091be <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80091be:	2180      	movs	r1, #128	; 0x80
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f001 faa7 	bl	800a714 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 fea5 	bl	8009f16 <USBD_CtlReceiveStatus>
 80091cc:	e00d      	b.n	80091ea <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	d004      	beq.n	80091e2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d103      	bne.n	80091ea <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80091e2:	2180      	movs	r1, #128	; 0x80
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f001 fa95 	bl	800a714 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d11d      	bne.n	8009230 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7ff fe83 	bl	8008f00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009202:	e015      	b.n	8009230 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00d      	beq.n	800922c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009216:	2b03      	cmp	r3, #3
 8009218:	d108      	bne.n	800922c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	7afa      	ldrb	r2, [r7, #11]
 8009224:	4611      	mov	r1, r2
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	4798      	blx	r3
 800922a:	e001      	b.n	8009230 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800922c:	2302      	movs	r3, #2
 800922e:	e000      	b.n	8009232 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3718      	adds	r7, #24
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b082      	sub	sp, #8
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009242:	2340      	movs	r3, #64	; 0x40
 8009244:	2200      	movs	r2, #0
 8009246:	2100      	movs	r1, #0
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 fa36 	bl	800a6ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2240      	movs	r2, #64	; 0x40
 800925a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800925e:	2340      	movs	r3, #64	; 0x40
 8009260:	2200      	movs	r2, #0
 8009262:	2180      	movs	r1, #128	; 0x80
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 fa28 	bl	800a6ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2201      	movs	r2, #1
 800926e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2240      	movs	r2, #64	; 0x40
 8009274:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800929a:	2b00      	cmp	r3, #0
 800929c:	d009      	beq.n	80092b2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	6852      	ldr	r2, [r2, #4]
 80092aa:	b2d2      	uxtb	r2, r2
 80092ac:	4611      	mov	r1, r2
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	4798      	blx	r3
  }

  return USBD_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	78fa      	ldrb	r2, [r7, #3]
 80092cc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bc80      	pop	{r7}
 80092d8:	4770      	bx	lr

080092da <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092da:	b480      	push	{r7}
 80092dc:	b083      	sub	sp, #12
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2204      	movs	r2, #4
 80092f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bc80      	pop	{r7}
 8009300:	4770      	bx	lr

08009302 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009310:	2b04      	cmp	r3, #4
 8009312:	d105      	bne.n	8009320 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	bc80      	pop	{r7}
 800932a:	4770      	bx	lr

0800932c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800933a:	2b03      	cmp	r3, #3
 800933c:	d10b      	bne.n	8009356 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009344:	69db      	ldr	r3, [r3, #28]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d005      	beq.n	8009356 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009376:	2b20      	cmp	r3, #32
 8009378:	d004      	beq.n	8009384 <USBD_StdDevReq+0x24>
 800937a:	2b40      	cmp	r3, #64	; 0x40
 800937c:	d002      	beq.n	8009384 <USBD_StdDevReq+0x24>
 800937e:	2b00      	cmp	r3, #0
 8009380:	d008      	beq.n	8009394 <USBD_StdDevReq+0x34>
 8009382:	e04c      	b.n	800941e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	4798      	blx	r3
      break;
 8009392:	e049      	b.n	8009428 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	785b      	ldrb	r3, [r3, #1]
 8009398:	2b09      	cmp	r3, #9
 800939a:	d83a      	bhi.n	8009412 <USBD_StdDevReq+0xb2>
 800939c:	a201      	add	r2, pc, #4	; (adr r2, 80093a4 <USBD_StdDevReq+0x44>)
 800939e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a2:	bf00      	nop
 80093a4:	080093f5 	.word	0x080093f5
 80093a8:	08009409 	.word	0x08009409
 80093ac:	08009413 	.word	0x08009413
 80093b0:	080093ff 	.word	0x080093ff
 80093b4:	08009413 	.word	0x08009413
 80093b8:	080093d7 	.word	0x080093d7
 80093bc:	080093cd 	.word	0x080093cd
 80093c0:	08009413 	.word	0x08009413
 80093c4:	080093eb 	.word	0x080093eb
 80093c8:	080093e1 	.word	0x080093e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f9d4 	bl	800977c <USBD_GetDescriptor>
          break;
 80093d4:	e022      	b.n	800941c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fb37 	bl	8009a4c <USBD_SetAddress>
          break;
 80093de:	e01d      	b.n	800941c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fb74 	bl	8009ad0 <USBD_SetConfig>
          break;
 80093e8:	e018      	b.n	800941c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fbfd 	bl	8009bec <USBD_GetConfig>
          break;
 80093f2:	e013      	b.n	800941c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fc2c 	bl	8009c54 <USBD_GetStatus>
          break;
 80093fc:	e00e      	b.n	800941c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fc5a 	bl	8009cba <USBD_SetFeature>
          break;
 8009406:	e009      	b.n	800941c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fc69 	bl	8009ce2 <USBD_ClrFeature>
          break;
 8009410:	e004      	b.n	800941c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fcc1 	bl	8009d9c <USBD_CtlError>
          break;
 800941a:	bf00      	nop
      }
      break;
 800941c:	e004      	b.n	8009428 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fcbb 	bl	8009d9c <USBD_CtlError>
      break;
 8009426:	bf00      	nop
  }

  return ret;
 8009428:	7bfb      	ldrb	r3, [r7, #15]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop

08009434 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800944a:	2b20      	cmp	r3, #32
 800944c:	d003      	beq.n	8009456 <USBD_StdItfReq+0x22>
 800944e:	2b40      	cmp	r3, #64	; 0x40
 8009450:	d001      	beq.n	8009456 <USBD_StdItfReq+0x22>
 8009452:	2b00      	cmp	r3, #0
 8009454:	d12a      	bne.n	80094ac <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800945c:	3b01      	subs	r3, #1
 800945e:	2b02      	cmp	r3, #2
 8009460:	d81d      	bhi.n	800949e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	889b      	ldrh	r3, [r3, #4]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b01      	cmp	r3, #1
 800946a:	d813      	bhi.n	8009494 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	4798      	blx	r3
 800947a:	4603      	mov	r3, r0
 800947c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	88db      	ldrh	r3, [r3, #6]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d110      	bne.n	80094a8 <USBD_StdItfReq+0x74>
 8009486:	7bfb      	ldrb	r3, [r7, #15]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10d      	bne.n	80094a8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fd2f 	bl	8009ef0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009492:	e009      	b.n	80094a8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fc80 	bl	8009d9c <USBD_CtlError>
          break;
 800949c:	e004      	b.n	80094a8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fc7b 	bl	8009d9c <USBD_CtlError>
          break;
 80094a6:	e000      	b.n	80094aa <USBD_StdItfReq+0x76>
          break;
 80094a8:	bf00      	nop
      }
      break;
 80094aa:	e004      	b.n	80094b6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fc74 	bl	8009d9c <USBD_CtlError>
      break;
 80094b4:	bf00      	nop
  }

  return USBD_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	889b      	ldrh	r3, [r3, #4]
 80094d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d004      	beq.n	80094ea <USBD_StdEPReq+0x2a>
 80094e0:	2b40      	cmp	r3, #64	; 0x40
 80094e2:	d002      	beq.n	80094ea <USBD_StdEPReq+0x2a>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d008      	beq.n	80094fa <USBD_StdEPReq+0x3a>
 80094e8:	e13d      	b.n	8009766 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	4798      	blx	r3
      break;
 80094f8:	e13a      	b.n	8009770 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009502:	2b20      	cmp	r3, #32
 8009504:	d10a      	bne.n	800951c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	4798      	blx	r3
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	e12a      	b.n	8009772 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	785b      	ldrb	r3, [r3, #1]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d03e      	beq.n	80095a2 <USBD_StdEPReq+0xe2>
 8009524:	2b03      	cmp	r3, #3
 8009526:	d002      	beq.n	800952e <USBD_StdEPReq+0x6e>
 8009528:	2b00      	cmp	r3, #0
 800952a:	d070      	beq.n	800960e <USBD_StdEPReq+0x14e>
 800952c:	e115      	b.n	800975a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009534:	2b02      	cmp	r3, #2
 8009536:	d002      	beq.n	800953e <USBD_StdEPReq+0x7e>
 8009538:	2b03      	cmp	r3, #3
 800953a:	d015      	beq.n	8009568 <USBD_StdEPReq+0xa8>
 800953c:	e02b      	b.n	8009596 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00c      	beq.n	800955e <USBD_StdEPReq+0x9e>
 8009544:	7bbb      	ldrb	r3, [r7, #14]
 8009546:	2b80      	cmp	r3, #128	; 0x80
 8009548:	d009      	beq.n	800955e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800954a:	7bbb      	ldrb	r3, [r7, #14]
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f001 f8e0 	bl	800a714 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009554:	2180      	movs	r1, #128	; 0x80
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f001 f8dc 	bl	800a714 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800955c:	e020      	b.n	80095a0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fc1b 	bl	8009d9c <USBD_CtlError>
              break;
 8009566:	e01b      	b.n	80095a0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	885b      	ldrh	r3, [r3, #2]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10e      	bne.n	800958e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009570:	7bbb      	ldrb	r3, [r7, #14]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00b      	beq.n	800958e <USBD_StdEPReq+0xce>
 8009576:	7bbb      	ldrb	r3, [r7, #14]
 8009578:	2b80      	cmp	r3, #128	; 0x80
 800957a:	d008      	beq.n	800958e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	88db      	ldrh	r3, [r3, #6]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d104      	bne.n	800958e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009584:	7bbb      	ldrb	r3, [r7, #14]
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f001 f8c3 	bl	800a714 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fcae 	bl	8009ef0 <USBD_CtlSendStatus>

              break;
 8009594:	e004      	b.n	80095a0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fbff 	bl	8009d9c <USBD_CtlError>
              break;
 800959e:	bf00      	nop
          }
          break;
 80095a0:	e0e0      	b.n	8009764 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d002      	beq.n	80095b2 <USBD_StdEPReq+0xf2>
 80095ac:	2b03      	cmp	r3, #3
 80095ae:	d015      	beq.n	80095dc <USBD_StdEPReq+0x11c>
 80095b0:	e026      	b.n	8009600 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095b2:	7bbb      	ldrb	r3, [r7, #14]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00c      	beq.n	80095d2 <USBD_StdEPReq+0x112>
 80095b8:	7bbb      	ldrb	r3, [r7, #14]
 80095ba:	2b80      	cmp	r3, #128	; 0x80
 80095bc:	d009      	beq.n	80095d2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80095be:	7bbb      	ldrb	r3, [r7, #14]
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 f8a6 	bl	800a714 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80095c8:	2180      	movs	r1, #128	; 0x80
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f001 f8a2 	bl	800a714 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095d0:	e01c      	b.n	800960c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fbe1 	bl	8009d9c <USBD_CtlError>
              break;
 80095da:	e017      	b.n	800960c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	885b      	ldrh	r3, [r3, #2]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d112      	bne.n	800960a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d004      	beq.n	80095f8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f001 f8a1 	bl	800a73a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fc79 	bl	8009ef0 <USBD_CtlSendStatus>
              }
              break;
 80095fe:	e004      	b.n	800960a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fbca 	bl	8009d9c <USBD_CtlError>
              break;
 8009608:	e000      	b.n	800960c <USBD_StdEPReq+0x14c>
              break;
 800960a:	bf00      	nop
          }
          break;
 800960c:	e0aa      	b.n	8009764 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009614:	2b02      	cmp	r3, #2
 8009616:	d002      	beq.n	800961e <USBD_StdEPReq+0x15e>
 8009618:	2b03      	cmp	r3, #3
 800961a:	d032      	beq.n	8009682 <USBD_StdEPReq+0x1c2>
 800961c:	e097      	b.n	800974e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800961e:	7bbb      	ldrb	r3, [r7, #14]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d007      	beq.n	8009634 <USBD_StdEPReq+0x174>
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	2b80      	cmp	r3, #128	; 0x80
 8009628:	d004      	beq.n	8009634 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fbb5 	bl	8009d9c <USBD_CtlError>
                break;
 8009632:	e091      	b.n	8009758 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009638:	2b00      	cmp	r3, #0
 800963a:	da0b      	bge.n	8009654 <USBD_StdEPReq+0x194>
 800963c:	7bbb      	ldrb	r3, [r7, #14]
 800963e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009642:	4613      	mov	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	3310      	adds	r3, #16
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	4413      	add	r3, r2
 8009650:	3304      	adds	r3, #4
 8009652:	e00b      	b.n	800966c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009654:	7bbb      	ldrb	r3, [r7, #14]
 8009656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800965a:	4613      	mov	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	4413      	add	r3, r2
 800966a:	3304      	adds	r3, #4
 800966c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2202      	movs	r2, #2
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fbf8 	bl	8009e70 <USBD_CtlSendData>
              break;
 8009680:	e06a      	b.n	8009758 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009682:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009686:	2b00      	cmp	r3, #0
 8009688:	da11      	bge.n	80096ae <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800968a:	7bbb      	ldrb	r3, [r7, #14]
 800968c:	f003 020f 	and.w	r2, r3, #15
 8009690:	6879      	ldr	r1, [r7, #4]
 8009692:	4613      	mov	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	440b      	add	r3, r1
 800969c:	3318      	adds	r3, #24
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d117      	bne.n	80096d4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fb78 	bl	8009d9c <USBD_CtlError>
                  break;
 80096ac:	e054      	b.n	8009758 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	f003 020f 	and.w	r2, r3, #15
 80096b4:	6879      	ldr	r1, [r7, #4]
 80096b6:	4613      	mov	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4413      	add	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	440b      	add	r3, r1
 80096c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d104      	bne.n	80096d4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fb65 	bl	8009d9c <USBD_CtlError>
                  break;
 80096d2:	e041      	b.n	8009758 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	da0b      	bge.n	80096f4 <USBD_StdEPReq+0x234>
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	3310      	adds	r3, #16
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	4413      	add	r3, r2
 80096f0:	3304      	adds	r3, #4
 80096f2:	e00b      	b.n	800970c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096f4:	7bbb      	ldrb	r3, [r7, #14]
 80096f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096fa:	4613      	mov	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	4413      	add	r3, r2
 800970a:	3304      	adds	r3, #4
 800970c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800970e:	7bbb      	ldrb	r3, [r7, #14]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <USBD_StdEPReq+0x25a>
 8009714:	7bbb      	ldrb	r3, [r7, #14]
 8009716:	2b80      	cmp	r3, #128	; 0x80
 8009718:	d103      	bne.n	8009722 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2200      	movs	r2, #0
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	e00e      	b.n	8009740 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009722:	7bbb      	ldrb	r3, [r7, #14]
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 f81a 	bl	800a760 <USBD_LL_IsStallEP>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	2201      	movs	r2, #1
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	e002      	b.n	8009740 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2202      	movs	r2, #2
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fb92 	bl	8009e70 <USBD_CtlSendData>
              break;
 800974c:	e004      	b.n	8009758 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fb23 	bl	8009d9c <USBD_CtlError>
              break;
 8009756:	bf00      	nop
          }
          break;
 8009758:	e004      	b.n	8009764 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fb1d 	bl	8009d9c <USBD_CtlError>
          break;
 8009762:	bf00      	nop
      }
      break;
 8009764:	e004      	b.n	8009770 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fb17 	bl	8009d9c <USBD_CtlError>
      break;
 800976e:	bf00      	nop
  }

  return ret;
 8009770:	7bfb      	ldrb	r3, [r7, #15]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
	...

0800977c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009786:	2300      	movs	r3, #0
 8009788:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800978a:	2300      	movs	r3, #0
 800978c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	885b      	ldrh	r3, [r3, #2]
 8009796:	0a1b      	lsrs	r3, r3, #8
 8009798:	b29b      	uxth	r3, r3
 800979a:	3b01      	subs	r3, #1
 800979c:	2b06      	cmp	r3, #6
 800979e:	f200 8128 	bhi.w	80099f2 <USBD_GetDescriptor+0x276>
 80097a2:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <USBD_GetDescriptor+0x2c>)
 80097a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a8:	080097c5 	.word	0x080097c5
 80097ac:	080097dd 	.word	0x080097dd
 80097b0:	0800981d 	.word	0x0800981d
 80097b4:	080099f3 	.word	0x080099f3
 80097b8:	080099f3 	.word	0x080099f3
 80097bc:	08009993 	.word	0x08009993
 80097c0:	080099bf 	.word	0x080099bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7c12      	ldrb	r2, [r2, #16]
 80097d0:	f107 0108 	add.w	r1, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
      break;
 80097da:	e112      	b.n	8009a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	7c1b      	ldrb	r3, [r3, #16]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10d      	bne.n	8009800 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ec:	f107 0208 	add.w	r2, r7, #8
 80097f0:	4610      	mov	r0, r2
 80097f2:	4798      	blx	r3
 80097f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3301      	adds	r3, #1
 80097fa:	2202      	movs	r2, #2
 80097fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097fe:	e100      	b.n	8009a02 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	f107 0208 	add.w	r2, r7, #8
 800980c:	4610      	mov	r0, r2
 800980e:	4798      	blx	r3
 8009810:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3301      	adds	r3, #1
 8009816:	2202      	movs	r2, #2
 8009818:	701a      	strb	r2, [r3, #0]
      break;
 800981a:	e0f2      	b.n	8009a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	885b      	ldrh	r3, [r3, #2]
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b05      	cmp	r3, #5
 8009824:	f200 80ac 	bhi.w	8009980 <USBD_GetDescriptor+0x204>
 8009828:	a201      	add	r2, pc, #4	; (adr r2, 8009830 <USBD_GetDescriptor+0xb4>)
 800982a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982e:	bf00      	nop
 8009830:	08009849 	.word	0x08009849
 8009834:	0800987d 	.word	0x0800987d
 8009838:	080098b1 	.word	0x080098b1
 800983c:	080098e5 	.word	0x080098e5
 8009840:	08009919 	.word	0x08009919
 8009844:	0800994d 	.word	0x0800994d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00b      	beq.n	800986c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	7c12      	ldrb	r2, [r2, #16]
 8009860:	f107 0108 	add.w	r1, r7, #8
 8009864:	4610      	mov	r0, r2
 8009866:	4798      	blx	r3
 8009868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800986a:	e091      	b.n	8009990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fa94 	bl	8009d9c <USBD_CtlError>
            err++;
 8009874:	7afb      	ldrb	r3, [r7, #11]
 8009876:	3301      	adds	r3, #1
 8009878:	72fb      	strb	r3, [r7, #11]
          break;
 800987a:	e089      	b.n	8009990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00b      	beq.n	80098a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	7c12      	ldrb	r2, [r2, #16]
 8009894:	f107 0108 	add.w	r1, r7, #8
 8009898:	4610      	mov	r0, r2
 800989a:	4798      	blx	r3
 800989c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800989e:	e077      	b.n	8009990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fa7a 	bl	8009d9c <USBD_CtlError>
            err++;
 80098a8:	7afb      	ldrb	r3, [r7, #11]
 80098aa:	3301      	adds	r3, #1
 80098ac:	72fb      	strb	r3, [r7, #11]
          break;
 80098ae:	e06f      	b.n	8009990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00b      	beq.n	80098d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	7c12      	ldrb	r2, [r2, #16]
 80098c8:	f107 0108 	add.w	r1, r7, #8
 80098cc:	4610      	mov	r0, r2
 80098ce:	4798      	blx	r3
 80098d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098d2:	e05d      	b.n	8009990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098d4:	6839      	ldr	r1, [r7, #0]
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fa60 	bl	8009d9c <USBD_CtlError>
            err++;
 80098dc:	7afb      	ldrb	r3, [r7, #11]
 80098de:	3301      	adds	r3, #1
 80098e0:	72fb      	strb	r3, [r7, #11]
          break;
 80098e2:	e055      	b.n	8009990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00b      	beq.n	8009908 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	7c12      	ldrb	r2, [r2, #16]
 80098fc:	f107 0108 	add.w	r1, r7, #8
 8009900:	4610      	mov	r0, r2
 8009902:	4798      	blx	r3
 8009904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009906:	e043      	b.n	8009990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fa46 	bl	8009d9c <USBD_CtlError>
            err++;
 8009910:	7afb      	ldrb	r3, [r7, #11]
 8009912:	3301      	adds	r3, #1
 8009914:	72fb      	strb	r3, [r7, #11]
          break;
 8009916:	e03b      	b.n	8009990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800991e:	695b      	ldr	r3, [r3, #20]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00b      	beq.n	800993c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	7c12      	ldrb	r2, [r2, #16]
 8009930:	f107 0108 	add.w	r1, r7, #8
 8009934:	4610      	mov	r0, r2
 8009936:	4798      	blx	r3
 8009938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800993a:	e029      	b.n	8009990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fa2c 	bl	8009d9c <USBD_CtlError>
            err++;
 8009944:	7afb      	ldrb	r3, [r7, #11]
 8009946:	3301      	adds	r3, #1
 8009948:	72fb      	strb	r3, [r7, #11]
          break;
 800994a:	e021      	b.n	8009990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00b      	beq.n	8009970 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	7c12      	ldrb	r2, [r2, #16]
 8009964:	f107 0108 	add.w	r1, r7, #8
 8009968:	4610      	mov	r0, r2
 800996a:	4798      	blx	r3
 800996c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800996e:	e00f      	b.n	8009990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009970:	6839      	ldr	r1, [r7, #0]
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fa12 	bl	8009d9c <USBD_CtlError>
            err++;
 8009978:	7afb      	ldrb	r3, [r7, #11]
 800997a:	3301      	adds	r3, #1
 800997c:	72fb      	strb	r3, [r7, #11]
          break;
 800997e:	e007      	b.n	8009990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fa0a 	bl	8009d9c <USBD_CtlError>
          err++;
 8009988:	7afb      	ldrb	r3, [r7, #11]
 800998a:	3301      	adds	r3, #1
 800998c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800998e:	e038      	b.n	8009a02 <USBD_GetDescriptor+0x286>
 8009990:	e037      	b.n	8009a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	7c1b      	ldrb	r3, [r3, #16]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d109      	bne.n	80099ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a2:	f107 0208 	add.w	r2, r7, #8
 80099a6:	4610      	mov	r0, r2
 80099a8:	4798      	blx	r3
 80099aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099ac:	e029      	b.n	8009a02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f9f3 	bl	8009d9c <USBD_CtlError>
        err++;
 80099b6:	7afb      	ldrb	r3, [r7, #11]
 80099b8:	3301      	adds	r3, #1
 80099ba:	72fb      	strb	r3, [r7, #11]
      break;
 80099bc:	e021      	b.n	8009a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	7c1b      	ldrb	r3, [r3, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10d      	bne.n	80099e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ce:	f107 0208 	add.w	r2, r7, #8
 80099d2:	4610      	mov	r0, r2
 80099d4:	4798      	blx	r3
 80099d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	3301      	adds	r3, #1
 80099dc:	2207      	movs	r2, #7
 80099de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099e0:	e00f      	b.n	8009a02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f9d9 	bl	8009d9c <USBD_CtlError>
        err++;
 80099ea:	7afb      	ldrb	r3, [r7, #11]
 80099ec:	3301      	adds	r3, #1
 80099ee:	72fb      	strb	r3, [r7, #11]
      break;
 80099f0:	e007      	b.n	8009a02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f9d1 	bl	8009d9c <USBD_CtlError>
      err++;
 80099fa:	7afb      	ldrb	r3, [r7, #11]
 80099fc:	3301      	adds	r3, #1
 80099fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009a00:	bf00      	nop
  }

  if (err != 0U)
 8009a02:	7afb      	ldrb	r3, [r7, #11]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d11c      	bne.n	8009a42 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009a08:	893b      	ldrh	r3, [r7, #8]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d011      	beq.n	8009a32 <USBD_GetDescriptor+0x2b6>
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	88db      	ldrh	r3, [r3, #6]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00d      	beq.n	8009a32 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	88da      	ldrh	r2, [r3, #6]
 8009a1a:	893b      	ldrh	r3, [r7, #8]
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	bf28      	it	cs
 8009a20:	4613      	movcs	r3, r2
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a26:	893b      	ldrh	r3, [r7, #8]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	68f9      	ldr	r1, [r7, #12]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fa1f 	bl	8009e70 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	88db      	ldrh	r3, [r3, #6]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d104      	bne.n	8009a44 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa58 	bl	8009ef0 <USBD_CtlSendStatus>
 8009a40:	e000      	b.n	8009a44 <USBD_GetDescriptor+0x2c8>
    return;
 8009a42:	bf00      	nop
    }
  }
}
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop

08009a4c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	889b      	ldrh	r3, [r3, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d130      	bne.n	8009ac0 <USBD_SetAddress+0x74>
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	88db      	ldrh	r3, [r3, #6]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d12c      	bne.n	8009ac0 <USBD_SetAddress+0x74>
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	885b      	ldrh	r3, [r3, #2]
 8009a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8009a6c:	d828      	bhi.n	8009ac0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	885b      	ldrh	r3, [r3, #2]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a80:	2b03      	cmp	r3, #3
 8009a82:	d104      	bne.n	8009a8e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f988 	bl	8009d9c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a8c:	e01c      	b.n	8009ac8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	7bfa      	ldrb	r2, [r7, #15]
 8009a92:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fe85 	bl	800a7aa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fa25 	bl	8009ef0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d004      	beq.n	8009ab6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ab4:	e008      	b.n	8009ac8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009abe:	e003      	b.n	8009ac8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f96a 	bl	8009d9c <USBD_CtlError>
  }
}
 8009ac8:	bf00      	nop
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	885b      	ldrh	r3, [r3, #2]
 8009ade:	b2da      	uxtb	r2, r3
 8009ae0:	4b41      	ldr	r3, [pc, #260]	; (8009be8 <USBD_SetConfig+0x118>)
 8009ae2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ae4:	4b40      	ldr	r3, [pc, #256]	; (8009be8 <USBD_SetConfig+0x118>)
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d904      	bls.n	8009af6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f954 	bl	8009d9c <USBD_CtlError>
 8009af4:	e075      	b.n	8009be2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d002      	beq.n	8009b06 <USBD_SetConfig+0x36>
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d023      	beq.n	8009b4c <USBD_SetConfig+0x7c>
 8009b04:	e062      	b.n	8009bcc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009b06:	4b38      	ldr	r3, [pc, #224]	; (8009be8 <USBD_SetConfig+0x118>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d01a      	beq.n	8009b44 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009b0e:	4b36      	ldr	r3, [pc, #216]	; (8009be8 <USBD_SetConfig+0x118>)
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2203      	movs	r2, #3
 8009b1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b20:	4b31      	ldr	r3, [pc, #196]	; (8009be8 <USBD_SetConfig+0x118>)
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	4619      	mov	r1, r3
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7ff f9f4 	bl	8008f14 <USBD_SetClassConfig>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d104      	bne.n	8009b3c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f931 	bl	8009d9c <USBD_CtlError>
            return;
 8009b3a:	e052      	b.n	8009be2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 f9d7 	bl	8009ef0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b42:	e04e      	b.n	8009be2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f9d3 	bl	8009ef0 <USBD_CtlSendStatus>
        break;
 8009b4a:	e04a      	b.n	8009be2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009b4c:	4b26      	ldr	r3, [pc, #152]	; (8009be8 <USBD_SetConfig+0x118>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d112      	bne.n	8009b7a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2202      	movs	r2, #2
 8009b58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009b5c:	4b22      	ldr	r3, [pc, #136]	; (8009be8 <USBD_SetConfig+0x118>)
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	461a      	mov	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009b66:	4b20      	ldr	r3, [pc, #128]	; (8009be8 <USBD_SetConfig+0x118>)
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7ff f9f0 	bl	8008f52 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f9bc 	bl	8009ef0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b78:	e033      	b.n	8009be2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009b7a:	4b1b      	ldr	r3, [pc, #108]	; (8009be8 <USBD_SetConfig+0x118>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d01d      	beq.n	8009bc4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff f9de 	bl	8008f52 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b96:	4b14      	ldr	r3, [pc, #80]	; (8009be8 <USBD_SetConfig+0x118>)
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ba0:	4b11      	ldr	r3, [pc, #68]	; (8009be8 <USBD_SetConfig+0x118>)
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7ff f9b4 	bl	8008f14 <USBD_SetClassConfig>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d104      	bne.n	8009bbc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f8f1 	bl	8009d9c <USBD_CtlError>
            return;
 8009bba:	e012      	b.n	8009be2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f997 	bl	8009ef0 <USBD_CtlSendStatus>
        break;
 8009bc2:	e00e      	b.n	8009be2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f993 	bl	8009ef0 <USBD_CtlSendStatus>
        break;
 8009bca:	e00a      	b.n	8009be2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f8e4 	bl	8009d9c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009bd4:	4b04      	ldr	r3, [pc, #16]	; (8009be8 <USBD_SetConfig+0x118>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7ff f9b9 	bl	8008f52 <USBD_ClrClassConfig>
        break;
 8009be0:	bf00      	nop
    }
  }
}
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	20003f10 	.word	0x20003f10

08009bec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	88db      	ldrh	r3, [r3, #6]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d004      	beq.n	8009c08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f8cb 	bl	8009d9c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c06:	e021      	b.n	8009c4c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	db17      	blt.n	8009c42 <USBD_GetConfig+0x56>
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	dd02      	ble.n	8009c1c <USBD_GetConfig+0x30>
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	d00b      	beq.n	8009c32 <USBD_GetConfig+0x46>
 8009c1a:	e012      	b.n	8009c42 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	3308      	adds	r3, #8
 8009c26:	2201      	movs	r2, #1
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f920 	bl	8009e70 <USBD_CtlSendData>
        break;
 8009c30:	e00c      	b.n	8009c4c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3304      	adds	r3, #4
 8009c36:	2201      	movs	r2, #1
 8009c38:	4619      	mov	r1, r3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f918 	bl	8009e70 <USBD_CtlSendData>
        break;
 8009c40:	e004      	b.n	8009c4c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f8a9 	bl	8009d9c <USBD_CtlError>
        break;
 8009c4a:	bf00      	nop
}
 8009c4c:	bf00      	nop
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c64:	3b01      	subs	r3, #1
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d81e      	bhi.n	8009ca8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	88db      	ldrh	r3, [r3, #6]
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d004      	beq.n	8009c7c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f891 	bl	8009d9c <USBD_CtlError>
        break;
 8009c7a:	e01a      	b.n	8009cb2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d005      	beq.n	8009c98 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	f043 0202 	orr.w	r2, r3, #2
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	330c      	adds	r3, #12
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f8e5 	bl	8009e70 <USBD_CtlSendData>
      break;
 8009ca6:	e004      	b.n	8009cb2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f876 	bl	8009d9c <USBD_CtlError>
      break;
 8009cb0:	bf00      	nop
  }
}
 8009cb2:	bf00      	nop
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b082      	sub	sp, #8
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	885b      	ldrh	r3, [r3, #2]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d106      	bne.n	8009cda <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f90b 	bl	8009ef0 <USBD_CtlSendStatus>
  }
}
 8009cda:	bf00      	nop
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b082      	sub	sp, #8
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d80b      	bhi.n	8009d10 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	885b      	ldrh	r3, [r3, #2]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d10c      	bne.n	8009d1a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f8f1 	bl	8009ef0 <USBD_CtlSendStatus>
      }
      break;
 8009d0e:	e004      	b.n	8009d1a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f842 	bl	8009d9c <USBD_CtlError>
      break;
 8009d18:	e000      	b.n	8009d1c <USBD_ClrFeature+0x3a>
      break;
 8009d1a:	bf00      	nop
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781a      	ldrb	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	785a      	ldrb	r2, [r3, #1]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	3302      	adds	r3, #2
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	3303      	adds	r3, #3
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	021b      	lsls	r3, r3, #8
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	4413      	add	r3, r2
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	3305      	adds	r3, #5
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	021b      	lsls	r3, r3, #8
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	4413      	add	r3, r2
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	3306      	adds	r3, #6
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	3307      	adds	r3, #7
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	021b      	lsls	r3, r3, #8
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	4413      	add	r3, r2
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	80da      	strh	r2, [r3, #6]

}
 8009d92:	bf00      	nop
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bc80      	pop	{r7}
 8009d9a:	4770      	bx	lr

08009d9c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009da6:	2180      	movs	r1, #128	; 0x80
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 fcb3 	bl	800a714 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009dae:	2100      	movs	r1, #0
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fcaf 	bl	800a714 <USBD_LL_StallEP>
}
 8009db6:	bf00      	nop
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b086      	sub	sp, #24
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	60b9      	str	r1, [r7, #8]
 8009dc8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d032      	beq.n	8009e3a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f000 f834 	bl	8009e42 <USBD_GetLen>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	3301      	adds	r3, #1
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009de8:	7dfb      	ldrb	r3, [r7, #23]
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	75fa      	strb	r2, [r7, #23]
 8009dee:	461a      	mov	r2, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	4413      	add	r3, r2
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	7812      	ldrb	r2, [r2, #0]
 8009df8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	75fa      	strb	r2, [r7, #23]
 8009e00:	461a      	mov	r2, r3
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	4413      	add	r3, r2
 8009e06:	2203      	movs	r2, #3
 8009e08:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009e0a:	e012      	b.n	8009e32 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	1c5a      	adds	r2, r3, #1
 8009e10:	60fa      	str	r2, [r7, #12]
 8009e12:	7dfa      	ldrb	r2, [r7, #23]
 8009e14:	1c51      	adds	r1, r2, #1
 8009e16:	75f9      	strb	r1, [r7, #23]
 8009e18:	4611      	mov	r1, r2
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	440a      	add	r2, r1
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
 8009e24:	1c5a      	adds	r2, r3, #1
 8009e26:	75fa      	strb	r2, [r7, #23]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	2200      	movs	r2, #0
 8009e30:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e8      	bne.n	8009e0c <USBD_GetString+0x4e>
    }
  }
}
 8009e3a:	bf00      	nop
 8009e3c:	3718      	adds	r7, #24
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b085      	sub	sp, #20
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009e4e:	e005      	b.n	8009e5c <USBD_GetLen+0x1a>
  {
    len++;
 8009e50:	7bfb      	ldrb	r3, [r7, #15]
 8009e52:	3301      	adds	r3, #1
 8009e54:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1f5      	bne.n	8009e50 <USBD_GetLen+0xe>
  }

  return len;
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bc80      	pop	{r7}
 8009e6e:	4770      	bx	lr

08009e70 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2202      	movs	r2, #2
 8009e82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e86:	88fa      	ldrh	r2, [r7, #6]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009e8c:	88fa      	ldrh	r2, [r7, #6]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e92:	88fb      	ldrh	r3, [r7, #6]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	2100      	movs	r1, #0
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 fc99 	bl	800a7d0 <USBD_LL_Transmit>

  return USBD_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009eb6:	88fb      	ldrh	r3, [r7, #6]
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	2100      	movs	r1, #0
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f000 fc87 	bl	800a7d0 <USBD_LL_Transmit>

  return USBD_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009eda:	88fb      	ldrh	r3, [r7, #6]
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	2100      	movs	r1, #0
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 fc8c 	bl	800a7fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2204      	movs	r2, #4
 8009efc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f00:	2300      	movs	r3, #0
 8009f02:	2200      	movs	r2, #0
 8009f04:	2100      	movs	r1, #0
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fc62 	bl	800a7d0 <USBD_LL_Transmit>

  return USBD_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b082      	sub	sp, #8
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2205      	movs	r2, #5
 8009f22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f26:	2300      	movs	r3, #0
 8009f28:	2200      	movs	r2, #0
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 fc66 	bl	800a7fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <USBD_MIDI_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	73fb      	strb	r3, [r7, #15]
  USBD_MIDI_HandleTypeDef   *hcdc;
	
	if (pdev->dev_speed == USBD_SPEED_HIGH) 
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	7c1b      	ldrb	r3, [r3, #16]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10c      	bne.n	8009f6e <USBD_MIDI_Init+0x32>
	{  
    /* Open EP IN */
		USBD_LL_OpenEP(pdev,
 8009f54:	2340      	movs	r3, #64	; 0x40
 8009f56:	2202      	movs	r2, #2
 8009f58:	2181      	movs	r1, #129	; 0x81
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fbad 	bl	800a6ba <USBD_LL_OpenEP>
			USB_MIDI_DATA_IN_EP,
			USBD_EP_TYPE_BULK,
			USB_MIDI_DATA_HS_IN_SIZE);
    
		/* Open EP OUT */
		USBD_LL_OpenEP(pdev,
 8009f60:	2340      	movs	r3, #64	; 0x40
 8009f62:	2202      	movs	r2, #2
 8009f64:	2101      	movs	r1, #1
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fba7 	bl	800a6ba <USBD_LL_OpenEP>
 8009f6c:	e00b      	b.n	8009f86 <USBD_MIDI_Init+0x4a>
			USB_MIDI_DATA_HS_OUT_SIZE);
	}
	else
	{
    /* Open EP IN */
		USBD_LL_OpenEP(pdev,
 8009f6e:	2340      	movs	r3, #64	; 0x40
 8009f70:	2202      	movs	r2, #2
 8009f72:	2181      	movs	r1, #129	; 0x81
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fba0 	bl	800a6ba <USBD_LL_OpenEP>
			USB_MIDI_DATA_IN_EP,
			USBD_EP_TYPE_BULK,
			USB_MIDI_DATA_FS_IN_SIZE);
    
		/* Open EP OUT */
		USBD_LL_OpenEP(pdev,
 8009f7a:	2340      	movs	r3, #64	; 0x40
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	2101      	movs	r1, #1
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fb9a 	bl	800a6ba <USBD_LL_OpenEP>
			USB_MIDI_DATA_OUT_EP,
			USBD_EP_TYPE_BULK,
			USB_MIDI_DATA_FS_OUT_SIZE);
	}
	
  pdev->pClassData = USBD_malloc(sizeof (USBD_MIDI_HandleTypeDef));
 8009f86:	2018      	movs	r0, #24
 8009f88:	f000 fc64 	bl	800a854 <USBD_static_malloc>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  
  if(pdev->pClassData == NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d102      	bne.n	8009fa4 <USBD_MIDI_Init+0x68>
  {
    ret = 1; 
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	73fb      	strb	r3, [r7, #15]
 8009fa2:	e021      	b.n	8009fe8 <USBD_MIDI_Init+0xac>
  }
  else
  {
    hcdc = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009faa:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_MIDI_ItfTypeDef*)pdev->pUserData)->Init();
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	611a      	str	r2, [r3, #16]
    hcdc->RxState =0;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	615a      	str	r2, [r3, #20]
       
	  if (pdev->dev_speed == USBD_SPEED_HIGH) 
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	7c1b      	ldrb	r3, [r3, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d107      	bne.n	8009fda <USBD_MIDI_Init+0x9e>
	  {      
	    /* Prepare Out endpoint to receive next packet */
		  USBD_LL_PrepareReceive(pdev,
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	2340      	movs	r3, #64	; 0x40
 8009fd0:	2101      	movs	r1, #1
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fc13 	bl	800a7fe <USBD_LL_PrepareReceive>
 8009fd8:	e006      	b.n	8009fe8 <USBD_MIDI_Init+0xac>
			  USB_MIDI_DATA_HS_OUT_SIZE);
	  }
	  else
	  {
	    /* Prepare Out endpoint to receive next packet */
		  USBD_LL_PrepareReceive(pdev,
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	2340      	movs	r3, #64	; 0x40
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fc0b 	bl	800a7fe <USBD_LL_PrepareReceive>
			  hcdc->RxBuffer,
			  USB_MIDI_DATA_FS_OUT_SIZE);
	  }
  }
	
  return ret;
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <USBD_MIDI_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8009ffe:	2300      	movs	r3, #0
 800a000:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
	USBD_LL_CloseEP(pdev, USB_MIDI_DATA_IN_EP);
 800a002:	2181      	movs	r1, #129	; 0x81
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 fb72 	bl	800a6ee <USBD_LL_CloseEP>
  
  /* Open EP OUT */
	USBD_LL_CloseEP(pdev, USB_MIDI_DATA_OUT_EP);
 800a00a:	2101      	movs	r1, #1
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fb6e 	bl	800a6ee <USBD_LL_CloseEP>
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00e      	beq.n	800a03a <USBD_MIDI_DeInit+0x48>
  {
    ((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 fc1d 	bl	800a86c <USBD_static_free>
    pdev->pClassData = NULL;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  
  return ret;
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <USBD_MIDI_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_MIDI_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
	// not relevant for USB MIDI
  return USBD_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	bc80      	pop	{r7}
 800a058:	4770      	bx	lr

0800a05a <USBD_MIDI_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b085      	sub	sp, #20
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	460b      	mov	r3, r1
 800a064:	70fb      	strb	r3, [r7, #3]
  USBD_MIDI_HandleTypeDef   *hcdc = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a06c:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a074:	2b00      	cmp	r3, #0
 800a076:	d004      	beq.n	800a082 <USBD_MIDI_DataIn+0x28>
  {
    
    hcdc->TxState = 0;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	611a      	str	r2, [r3, #16]

    return USBD_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	e000      	b.n	800a084 <USBD_MIDI_DataIn+0x2a>
  }
  else
  {
    return USBD_FAIL;
 800a082:	2302      	movs	r3, #2
  }
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	bc80      	pop	{r7}
 800a08c:	4770      	bx	lr

0800a08e <USBD_MIDI_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	460b      	mov	r3, r1
 800a098:	70fb      	strb	r3, [r7, #3]
  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a0:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hmidi->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800a0a2:	78fb      	ldrb	r3, [r7, #3]
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fbc0 	bl	800a82c <USBD_LL_GetRxDataSize>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	609a      	str	r2, [r3, #8]
  hmidi->RxState = 0;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	615a      	str	r2, [r3, #20]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00b      	beq.n	800a0da <USBD_MIDI_DataOut+0x4c>
  {
    ((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->RxBuffer, &hmidi->RxLength);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	6810      	ldr	r0, [r2, #0]
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	3208      	adds	r2, #8
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	4798      	blx	r3

    return USBD_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	e000      	b.n	800a0dc <USBD_MIDI_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a0da:	2302      	movs	r3, #2
  }
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBD_MIDI_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_MIDI_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
	// not relevant for USB MIDI
  return USBD_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bc80      	pop	{r7}
 800a0f6:	4770      	bx	lr

0800a0f8 <USBD_MIDI_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetFSCfgDesc (uint16_t *length)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgFSDesc);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2265      	movs	r2, #101	; 0x65
 800a104:	801a      	strh	r2, [r3, #0]
	return USBD_MIDI_CfgFSDesc;
 800a106:	4b03      	ldr	r3, [pc, #12]	; (800a114 <USBD_MIDI_GetFSCfgDesc+0x1c>)
}
 800a108:	4618      	mov	r0, r3
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bc80      	pop	{r7}
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	20000120 	.word	0x20000120

0800a118 <USBD_MIDI_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetHSCfgDesc (uint16_t *length)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  //*length = sizeof (USBD_MIDI_CfgHSDesc);
  //return USBD_MIDI_CfgHSDesc;
	*length = sizeof(USBD_MIDI_CfgFSDesc);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2265      	movs	r2, #101	; 0x65
 800a124:	801a      	strh	r2, [r3, #0]
	return USBD_MIDI_CfgFSDesc;
 800a126:	4b03      	ldr	r3, [pc, #12]	; (800a134 <USBD_MIDI_GetHSCfgDesc+0x1c>)
}
 800a128:	4618      	mov	r0, r3
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bc80      	pop	{r7}
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	20000120 	.word	0x20000120

0800a138 <USBD_MIDI_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  //*length = sizeof (USBD_MIDI_OtherSpeedCfgDesc);
  //return USBD_MIDI_OtherSpeedCfgDesc;
	*length = sizeof(USBD_MIDI_CfgFSDesc);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2265      	movs	r2, #101	; 0x65
 800a144:	801a      	strh	r2, [r3, #0]
	return USBD_MIDI_CfgFSDesc;
 800a146:	4b03      	ldr	r3, [pc, #12]	; (800a154 <USBD_MIDI_GetOtherSpeedCfgDesc+0x1c>)
}
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bc80      	pop	{r7}
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20000120 	.word	0x20000120

0800a158 <USBD_MIDI_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MIDI_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	220a      	movs	r2, #10
 800a164:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_DeviceQualifierDesc;
 800a166:	4b03      	ldr	r3, [pc, #12]	; (800a174 <USBD_MIDI_GetDeviceQualifierDescriptor+0x1c>)
}
 800a168:	4618      	mov	r0, r3
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bc80      	pop	{r7}
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	200000dc 	.word	0x200000dc

0800a178 <USBD_MIDI_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_MIDI_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_MIDI_ItfTypeDef *fops)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a182:	2302      	movs	r3, #2
 800a184:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d005      	beq.n	800a198 <USBD_MIDI_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;    
 800a194:	2300      	movs	r3, #0
 800a196:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800a198:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bc80      	pop	{r7}
 800a1a2:	4770      	bx	lr

0800a1a4 <USBD_MIDI_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_MIDI_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	80fb      	strh	r3, [r7, #6]
  USBD_MIDI_HandleTypeDef   *hcdc = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1b8:	617b      	str	r3, [r7, #20]
  
	if (hcdc == NULL)
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <USBD_MIDI_SetTxBuffer+0x20>
		return USBD_FAIL;
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	e006      	b.n	800a1d2 <USBD_MIDI_SetTxBuffer+0x2e>
	
  hcdc->TxBuffer = pbuff;
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	605a      	str	r2, [r3, #4]
  hcdc->TxLength = length;  
 800a1ca:	88fa      	ldrh	r2, [r7, #6]
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	60da      	str	r2, [r3, #12]
  
  return USBD_OK;  
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	371c      	adds	r7, #28
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bc80      	pop	{r7}
 800a1da:	4770      	bx	lr

0800a1dc <USBD_MIDI_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_MIDI_SetRxBuffer(USBD_HandleTypeDef   *pdev,
	uint8_t  *pbuff)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
	USBD_MIDI_HandleTypeDef   *hcdc = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ec:	60fb      	str	r3, [r7, #12]
  
	if (hcdc == NULL)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <USBD_MIDI_SetRxBuffer+0x1c>
		return USBD_FAIL;
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	e003      	b.n	800a200 <USBD_MIDI_SetRxBuffer+0x24>

	hcdc->RxBuffer = pbuff;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	601a      	str	r2, [r3, #0]
  
	return USBD_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	bc80      	pop	{r7}
 800a208:	4770      	bx	lr

0800a20a <USBD_MIDI_IsTransmitterBusy>:
  *         Return true when transmitter (USB IN) is busy
  * @param  pdev: device instance
  * @retval busy status
  */
uint8_t  USBD_MIDI_IsTransmitterBusy(USBD_HandleTypeDef *pdev)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b085      	sub	sp, #20
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
	USBD_MIDI_HandleTypeDef   *hcdc = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a218:	60fb      	str	r3, [r7, #12]

	if (pdev->pClassData != NULL)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a220:	2b00      	cmp	r3, #0
 800a222:	d007      	beq.n	800a234 <USBD_MIDI_IsTransmitterBusy+0x2a>
	{
		return (hcdc->TxState != 0);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	bf14      	ite	ne
 800a22c:	2301      	movne	r3, #1
 800a22e:	2300      	moveq	r3, #0
 800a230:	b2db      	uxtb	r3, r3
 800a232:	e000      	b.n	800a236 <USBD_MIDI_IsTransmitterBusy+0x2c>
	}
	else
	{
		return 1;
 800a234:	2301      	movs	r3, #1
	}
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bc80      	pop	{r7}
 800a23e:	4770      	bx	lr

0800a240 <USBD_MIDI_IsReceiverBusy>:
  *         Checks USB receiver (OUT endpoint) status
  * @param  pdev: device instance
  * @retval true if receiver is waiting for packet, false when receiver is not active endpoint sends NAK
  */
uint8_t USBD_MIDI_IsReceiverBusy(USBD_HandleTypeDef *pdev)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  return (PCD_GET_EP_RX_STATUS((PCD_TypeDef*)((PCD_HandleTypeDef*)(pdev->pData))->Instance, USB_MIDI_DATA_OUT_EP) == USB_EP_RX_VALID);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3304      	adds	r3, #4
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	b29b      	uxth	r3, r3
 800a256:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a25a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a25e:	bf0c      	ite	eq
 800a260:	2301      	moveq	r3, #1
 800a262:	2300      	movne	r3, #0
 800a264:	b2db      	uxtb	r3, r3
}
 800a266:	4618      	mov	r0, r3
 800a268:	370c      	adds	r7, #12
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bc80      	pop	{r7}
 800a26e:	4770      	bx	lr

0800a270 <USBD_MIDI_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_MIDI_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
	USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a27e:	60fb      	str	r3, [r7, #12]
  
	if (pdev->pClassData != NULL)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a286:	2b00      	cmp	r3, #0
 800a288:	d013      	beq.n	800a2b2 <USBD_MIDI_TransmitPacket+0x42>
	{
		if (hmidi->TxState == 0)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d10d      	bne.n	800a2ae <USBD_MIDI_TransmitPacket+0x3e>
		{
		  /* Tx Transfer in progress */
			hmidi->TxState = 1;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2201      	movs	r2, #1
 800a296:	611a      	str	r2, [r3, #16]
      
			/* Transmit next packet */
			USBD_LL_Transmit(pdev,
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	685a      	ldr	r2, [r3, #4]
				USB_MIDI_DATA_IN_EP,
				hmidi->TxBuffer,
				hmidi->TxLength);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	68db      	ldr	r3, [r3, #12]
			USBD_LL_Transmit(pdev,
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	2181      	movs	r1, #129	; 0x81
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fa93 	bl	800a7d0 <USBD_LL_Transmit>
      
			return USBD_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e002      	b.n	800a2b4 <USBD_MIDI_TransmitPacket+0x44>
		}
		else
		{
			return USBD_BUSY;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e000      	b.n	800a2b4 <USBD_MIDI_TransmitPacket+0x44>
		}
	}
	else
	{
		return USBD_FAIL;
 800a2b2:	2302      	movs	r3, #2
	}
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBD_MIDI_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
	  uint8_t  USBD_MIDI_ReceivePacket(USBD_HandleTypeDef *pdev)
	  {      
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
		  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ca:	60fb      	str	r3, [r7, #12]
  
		  /* Suspend or Resume USB Out process */
		  if (hmidi != NULL)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d017      	beq.n	800a302 <USBD_MIDI_ReceivePacket+0x46>
		  {
		  	hmidi->RxState = 1;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	615a      	str	r2, [r3, #20]
			  if (pdev->dev_speed == USBD_SPEED_HIGH) 
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	7c1b      	ldrb	r3, [r3, #16]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d107      	bne.n	800a2f0 <USBD_MIDI_ReceivePacket+0x34>
			  {      
			    /* Prepare Out endpoint to receive next packet */
				  USBD_LL_PrepareReceive(pdev,
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	2340      	movs	r3, #64	; 0x40
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 fa88 	bl	800a7fe <USBD_LL_PrepareReceive>
 800a2ee:	e006      	b.n	800a2fe <USBD_MIDI_ReceivePacket+0x42>
					  USB_MIDI_DATA_HS_OUT_SIZE);
			  }
			  else
			  {
			    /* Prepare Out endpoint to receive next packet */
				  USBD_LL_PrepareReceive(pdev,
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	2340      	movs	r3, #64	; 0x40
 800a2f6:	2101      	movs	r1, #1
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 fa80 	bl	800a7fe <USBD_LL_PrepareReceive>
					  USB_MIDI_DATA_OUT_EP,
					  hmidi->RxBuffer,
					  USB_MIDI_DATA_FS_OUT_SIZE);
			  }
			  return USBD_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	e000      	b.n	800a304 <USBD_MIDI_ReceivePacket+0x48>
		  }
		  else
		  {
			  return USBD_FAIL;
 800a302:	2302      	movs	r3, #2
		  }
	  }
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_FS_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2212      	movs	r2, #18
 800a31c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a31e:	4b03      	ldr	r3, [pc, #12]	; (800a32c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	bc80      	pop	{r7}
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	200001a4 	.word	0x200001a4

0800a330 <USBD_FS_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	4603      	mov	r3, r0
 800a338:	6039      	str	r1, [r7, #0]
 800a33a:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	2204      	movs	r2, #4
 800a340:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a342:	4b03      	ldr	r3, [pc, #12]	; (800a350 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a344:	4618      	mov	r0, r3
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	bc80      	pop	{r7}
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	200001b8 	.word	0x200001b8

0800a354 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	6039      	str	r1, [r7, #0]
 800a35e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a360:	79fb      	ldrb	r3, [r7, #7]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d105      	bne.n	800a372 <USBD_FS_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString ((uint8_t*)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	4907      	ldr	r1, [pc, #28]	; (800a388 <USBD_FS_ProductStrDescriptor+0x34>)
 800a36a:	4808      	ldr	r0, [pc, #32]	; (800a38c <USBD_FS_ProductStrDescriptor+0x38>)
 800a36c:	f7ff fd27 	bl	8009dbe <USBD_GetString>
 800a370:	e004      	b.n	800a37c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	4904      	ldr	r1, [pc, #16]	; (800a388 <USBD_FS_ProductStrDescriptor+0x34>)
 800a376:	4805      	ldr	r0, [pc, #20]	; (800a38c <USBD_FS_ProductStrDescriptor+0x38>)
 800a378:	f7ff fd21 	bl	8009dbe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a37c:	4b02      	ldr	r3, [pc, #8]	; (800a388 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20004248 	.word	0x20004248
 800a38c:	0800aa34 	.word	0x0800aa34

0800a390 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	6039      	str	r1, [r7, #0]
 800a39a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString ((uint8_t*)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	4904      	ldr	r1, [pc, #16]	; (800a3b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a3a0:	4804      	ldr	r0, [pc, #16]	; (800a3b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a3a2:	f7ff fd0c 	bl	8009dbe <USBD_GetString>
  return USBD_StrDesc;
 800a3a6:	4b02      	ldr	r3, [pc, #8]	; (800a3b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	20004248 	.word	0x20004248
 800a3b4:	0800aa48 	.word	0x0800aa48

0800a3b8 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	6039      	str	r1, [r7, #0]
 800a3c2:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 800a3c4:	79fb      	ldrb	r3, [r7, #7]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d105      	bne.n	800a3d6 <USBD_FS_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString ((uint8_t*)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	4907      	ldr	r1, [pc, #28]	; (800a3ec <USBD_FS_SerialStrDescriptor+0x34>)
 800a3ce:	4808      	ldr	r0, [pc, #32]	; (800a3f0 <USBD_FS_SerialStrDescriptor+0x38>)
 800a3d0:	f7ff fcf5 	bl	8009dbe <USBD_GetString>
 800a3d4:	e004      	b.n	800a3e0 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	4904      	ldr	r1, [pc, #16]	; (800a3ec <USBD_FS_SerialStrDescriptor+0x34>)
 800a3da:	4805      	ldr	r0, [pc, #20]	; (800a3f0 <USBD_FS_SerialStrDescriptor+0x38>)
 800a3dc:	f7ff fcef 	bl	8009dbe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3e0:	4b02      	ldr	r3, [pc, #8]	; (800a3ec <USBD_FS_SerialStrDescriptor+0x34>)
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20004248 	.word	0x20004248
 800a3f0:	0800aa58 	.word	0x0800aa58

0800a3f4 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	6039      	str	r1, [r7, #0]
 800a3fe:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 800a400:	79fb      	ldrb	r3, [r7, #7]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d105      	bne.n	800a412 <USBD_FS_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString ((uint8_t*)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	4907      	ldr	r1, [pc, #28]	; (800a428 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a40a:	4808      	ldr	r0, [pc, #32]	; (800a42c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a40c:	f7ff fcd7 	bl	8009dbe <USBD_GetString>
 800a410:	e004      	b.n	800a41c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	4904      	ldr	r1, [pc, #16]	; (800a428 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a416:	4805      	ldr	r0, [pc, #20]	; (800a42c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a418:	f7ff fcd1 	bl	8009dbe <USBD_GetString>
  }
  return USBD_StrDesc;  
 800a41c:	4b02      	ldr	r3, [pc, #8]	; (800a428 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	20004248 	.word	0x20004248
 800a42c:	0800aa68 	.word	0x0800aa68

0800a430 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	6039      	str	r1, [r7, #0]
 800a43a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a43c:	79fb      	ldrb	r3, [r7, #7]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d105      	bne.n	800a44e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString ((uint8_t*)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	4907      	ldr	r1, [pc, #28]	; (800a464 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a446:	4808      	ldr	r0, [pc, #32]	; (800a468 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a448:	f7ff fcb9 	bl	8009dbe <USBD_GetString>
 800a44c:	e004      	b.n	800a458 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	4904      	ldr	r1, [pc, #16]	; (800a464 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a452:	4805      	ldr	r0, [pc, #20]	; (800a468 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a454:	f7ff fcb3 	bl	8009dbe <USBD_GetString>
  }
  return USBD_StrDesc;  
 800a458:	4b02      	ldr	r3, [pc, #8]	; (800a464 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20004248 	.word	0x20004248
 800a468:	0800aa34 	.word	0x0800aa34

0800a46c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a0d      	ldr	r2, [pc, #52]	; (800a4b0 <HAL_PCD_MspInit+0x44>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d113      	bne.n	800a4a6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a47e:	4b0d      	ldr	r3, [pc, #52]	; (800a4b4 <HAL_PCD_MspInit+0x48>)
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	4a0c      	ldr	r2, [pc, #48]	; (800a4b4 <HAL_PCD_MspInit+0x48>)
 800a484:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a488:	61d3      	str	r3, [r2, #28]
 800a48a:	4b0a      	ldr	r3, [pc, #40]	; (800a4b4 <HAL_PCD_MspInit+0x48>)
 800a48c:	69db      	ldr	r3, [r3, #28]
 800a48e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a496:	2200      	movs	r2, #0
 800a498:	2100      	movs	r1, #0
 800a49a:	2014      	movs	r0, #20
 800a49c:	f7f7 ff3b 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a4a0:	2014      	movs	r0, #20
 800a4a2:	f7f7 ff54 	bl	800234e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a4a6:	bf00      	nop
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	40005c00 	.word	0x40005c00
 800a4b4:	40021000 	.word	0x40021000

0800a4b8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup Stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	f7fe fd52 	bl	8008f78 <USBD_LL_SetupStage>
}
 800a4d4:	bf00      	nop
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800a4ee:	78fb      	ldrb	r3, [r7, #3]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	015b      	lsls	r3, r3, #5
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	78fb      	ldrb	r3, [r7, #3]
 800a4fe:	4619      	mov	r1, r3
 800a500:	f7fe fd85 	bl	800900e <USBD_LL_DataOutStage>
}
 800a504:	bf00      	nop
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	460b      	mov	r3, r1
 800a516:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800a51e:	78fb      	ldrb	r3, [r7, #3]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	015b      	lsls	r3, r3, #5
 800a524:	4413      	add	r3, r2
 800a526:	333c      	adds	r3, #60	; 0x3c
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	78fb      	ldrb	r3, [r7, #3]
 800a52c:	4619      	mov	r1, r3
 800a52e:	f7fe fddf 	bl	80090f0 <USBD_LL_DataInStage>
}
 800a532:	bf00      	nop
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b082      	sub	sp, #8
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fe feef 	bl	800932c <USBD_LL_SOF>
}
 800a54e:	bf00      	nop
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a55e:	2301      	movs	r3, #1
 800a560:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	2b02      	cmp	r3, #2
 800a568:	d102      	bne.n	800a570 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 800a56a:	2301      	movs	r3, #1
 800a56c:	73fb      	strb	r3, [r7, #15]
    break;
 800a56e:	e002      	b.n	800a576 <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;    
 800a570:	2301      	movs	r3, #1
 800a572:	73fb      	strb	r3, [r7, #15]
    break;    
 800a574:	bf00      	nop
  }
  USBD_LL_SetSpeed(hpcd->pData, speed);  
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a57c:	7bfa      	ldrb	r2, [r7, #15]
 800a57e:	4611      	mov	r1, r2
 800a580:	4618      	mov	r0, r3
 800a582:	f7fe fe9b 	bl	80092bc <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset(hpcd->pData);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fe fe54 	bl	800923a <USBD_LL_Reset>
}
 800a592:	bf00      	nop
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend(hpcd->pData);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fe fe95 	bl	80092da <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d005      	beq.n	800a5c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5b8:	4b04      	ldr	r3, [pc, #16]	; (800a5cc <HAL_PCD_SuspendCallback+0x30>)
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	4a03      	ldr	r2, [pc, #12]	; (800a5cc <HAL_PCD_SuspendCallback+0x30>)
 800a5be:	f043 0306 	orr.w	r3, r3, #6
 800a5c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a5c4:	bf00      	nop
 800a5c6:	3708      	adds	r7, #8
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	e000ed00 	.word	0xe000ed00

0800a5d0 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume(hpcd->pData);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe fe8f 	bl	8009302 <USBD_LL_Resume>
  
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 800a5f4:	4a27      	ldr	r2, [pc, #156]	; (800a694 <USBD_LL_Init+0xa8>)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a25      	ldr	r2, [pc, #148]	; (800a694 <USBD_LL_Init+0xa8>)
 800a600:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a604:	4b23      	ldr	r3, [pc, #140]	; (800a694 <USBD_LL_Init+0xa8>)
 800a606:	4a24      	ldr	r2, [pc, #144]	; (800a698 <USBD_LL_Init+0xac>)
 800a608:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a60a:	4b22      	ldr	r3, [pc, #136]	; (800a694 <USBD_LL_Init+0xa8>)
 800a60c:	2208      	movs	r2, #8
 800a60e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a610:	4b20      	ldr	r3, [pc, #128]	; (800a694 <USBD_LL_Init+0xa8>)
 800a612:	2202      	movs	r2, #2
 800a614:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 800a616:	4b1f      	ldr	r3, [pc, #124]	; (800a694 <USBD_LL_Init+0xa8>)
 800a618:	2203      	movs	r2, #3
 800a61a:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a61c:	4b1d      	ldr	r3, [pc, #116]	; (800a694 <USBD_LL_Init+0xa8>)
 800a61e:	2200      	movs	r2, #0
 800a620:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a622:	4b1c      	ldr	r3, [pc, #112]	; (800a694 <USBD_LL_Init+0xa8>)
 800a624:	2200      	movs	r2, #0
 800a626:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a628:	4b1a      	ldr	r3, [pc, #104]	; (800a694 <USBD_LL_Init+0xa8>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	621a      	str	r2, [r3, #32]
  HAL_PCD_Init(&hpcd_USB_FS);
 800a62e:	4819      	ldr	r0, [pc, #100]	; (800a694 <USBD_LL_Init+0xa8>)
 800a630:	f7f9 f81c 	bl	800366c <HAL_PCD_Init>

  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a63a:	2318      	movs	r3, #24
 800a63c:	2200      	movs	r2, #0
 800a63e:	2100      	movs	r1, #0
 800a640:	f7f9 feba 	bl	80043b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a64a:	2358      	movs	r3, #88	; 0x58
 800a64c:	2200      	movs	r2, #0
 800a64e:	2180      	movs	r1, #128	; 0x80
 800a650:	f7f9 feb2 	bl	80043b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);  
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a65a:	23c0      	movs	r3, #192	; 0xc0
 800a65c:	2200      	movs	r2, #0
 800a65e:	2181      	movs	r1, #129	; 0x81
 800a660:	f7f9 feaa 	bl	80043b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a66a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a66e:	2200      	movs	r2, #0
 800a670:	2101      	movs	r1, #1
 800a672:	f7f9 fea1 	bl	80043b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);  
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a67c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a680:	2200      	movs	r2, #0
 800a682:	2182      	movs	r1, #130	; 0x82
 800a684:	f7f9 fe98 	bl	80043b8 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20004448 	.word	0x20004448
 800a698:	40005c00 	.word	0x40005c00

0800a69c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7f9 f8bf 	bl	800382e <HAL_PCD_Start>
  return USBD_OK; 
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	4608      	mov	r0, r1
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	70fb      	strb	r3, [r7, #3]
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	70bb      	strb	r3, [r7, #2]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	803b      	strh	r3, [r7, #0]

  HAL_PCD_EP_Open(pdev->pData, 
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6da:	78bb      	ldrb	r3, [r7, #2]
 800a6dc:	883a      	ldrh	r2, [r7, #0]
 800a6de:	78f9      	ldrb	r1, [r7, #3]
 800a6e0:	f7f9 f9fe 	bl	8003ae0 <HAL_PCD_EP_Open>
                  ep_addr, 
                  ep_mps, 
                  ep_type);
  
  return USBD_OK; 
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b082      	sub	sp, #8
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a700:	78fa      	ldrb	r2, [r7, #3]
 800a702:	4611      	mov	r1, r2
 800a704:	4618      	mov	r0, r3
 800a706:	f7f9 fa4b 	bl	8003ba0 <HAL_PCD_EP_Close>
  return USBD_OK; 
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a726:	78fa      	ldrb	r2, [r7, #3]
 800a728:	4611      	mov	r1, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7f9 fb01 	bl	8003d32 <HAL_PCD_EP_SetStall>
  return USBD_OK; 
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b082      	sub	sp, #8
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	460b      	mov	r3, r1
 800a744:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a74c:	78fa      	ldrb	r2, [r7, #3]
 800a74e:	4611      	mov	r1, r2
 800a750:	4618      	mov	r0, r3
 800a752:	f7f9 fb48 	bl	8003de6 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	460b      	mov	r3, r1
 800a76a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData; 
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a772:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	da08      	bge.n	800a78e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a77c:	78fb      	ldrb	r3, [r7, #3]
 800a77e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	015b      	lsls	r3, r3, #5
 800a786:	4413      	add	r3, r2
 800a788:	332a      	adds	r3, #42	; 0x2a
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	e008      	b.n	800a7a0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a78e:	78fb      	ldrb	r3, [r7, #3]
 800a790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	015b      	lsls	r3, r3, #5
 800a798:	4413      	add	r3, r2
 800a79a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a79e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bc80      	pop	{r7}
 800a7a8:	4770      	bx	lr

0800a7aa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7bc:	78fa      	ldrb	r2, [r7, #3]
 800a7be:	4611      	mov	r1, r2
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7f9 f968 	bl	8003a96 <HAL_PCD_SetAddress>
  return USBD_OK; 
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	607a      	str	r2, [r7, #4]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	460b      	mov	r3, r1
 800a7de:	72fb      	strb	r3, [r7, #11]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	813b      	strh	r3, [r7, #8]

  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7ea:	893b      	ldrh	r3, [r7, #8]
 800a7ec:	7af9      	ldrb	r1, [r7, #11]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	f7f9 fa66 	bl	8003cc0 <HAL_PCD_EP_Transmit>
  return USBD_OK;   
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b084      	sub	sp, #16
 800a802:	af00      	add	r7, sp, #0
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	607a      	str	r2, [r7, #4]
 800a808:	461a      	mov	r2, r3
 800a80a:	460b      	mov	r3, r1
 800a80c:	72fb      	strb	r3, [r7, #11]
 800a80e:	4613      	mov	r3, r2
 800a810:	813b      	strh	r3, [r7, #8]

  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a818:	893b      	ldrh	r3, [r7, #8]
 800a81a:	7af9      	ldrb	r1, [r7, #11]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	f7f9 fa01 	bl	8003c24 <HAL_PCD_EP_Receive>
  return USBD_OK;   
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a83e:	78fa      	ldrb	r2, [r7, #3]
 800a840:	4611      	mov	r1, r2
 800a842:	4618      	mov	r0, r3
 800a844:	f7f9 fa28 	bl	8003c98 <HAL_PCD_EP_GetRxCount>
 800a848:	4603      	mov	r3, r0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
	...

0800a854 <USBD_static_malloc>:
  * @brief  static single allocation.
  * @param  size: size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MIDI_HandleTypeDef)/4)+1];//On 32-bit boundary
  return mem;
 800a85c:	4b02      	ldr	r3, [pc, #8]	; (800a868 <USBD_static_malloc+0x14>)
}
 800a85e:	4618      	mov	r0, r3
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	bc80      	pop	{r7}
 800a866:	4770      	bx	lr
 800a868:	20003f14 	.word	0x20003f14

0800a86c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  free(p);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f833 	bl	800a8e0 <free>
}
 800a87a:	bf00      	nop
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 800a882:	b480      	push	{r7}
 800a884:	b083      	sub	sp, #12
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	460b      	mov	r3, r1
 800a88c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High Connection State */
   
  } 
/* USER CODE END 5 */
}
 800a88e:	bf00      	nop
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	bc80      	pop	{r7}
 800a896:	4770      	bx	lr

0800a898 <__libc_init_array>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	2500      	movs	r5, #0
 800a89c:	4e0c      	ldr	r6, [pc, #48]	; (800a8d0 <__libc_init_array+0x38>)
 800a89e:	4c0d      	ldr	r4, [pc, #52]	; (800a8d4 <__libc_init_array+0x3c>)
 800a8a0:	1ba4      	subs	r4, r4, r6
 800a8a2:	10a4      	asrs	r4, r4, #2
 800a8a4:	42a5      	cmp	r5, r4
 800a8a6:	d109      	bne.n	800a8bc <__libc_init_array+0x24>
 800a8a8:	f000 f878 	bl	800a99c <_init>
 800a8ac:	2500      	movs	r5, #0
 800a8ae:	4e0a      	ldr	r6, [pc, #40]	; (800a8d8 <__libc_init_array+0x40>)
 800a8b0:	4c0a      	ldr	r4, [pc, #40]	; (800a8dc <__libc_init_array+0x44>)
 800a8b2:	1ba4      	subs	r4, r4, r6
 800a8b4:	10a4      	asrs	r4, r4, #2
 800a8b6:	42a5      	cmp	r5, r4
 800a8b8:	d105      	bne.n	800a8c6 <__libc_init_array+0x2e>
 800a8ba:	bd70      	pop	{r4, r5, r6, pc}
 800a8bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a8c0:	4798      	blx	r3
 800a8c2:	3501      	adds	r5, #1
 800a8c4:	e7ee      	b.n	800a8a4 <__libc_init_array+0xc>
 800a8c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a8ca:	4798      	blx	r3
 800a8cc:	3501      	adds	r5, #1
 800a8ce:	e7f2      	b.n	800a8b6 <__libc_init_array+0x1e>
 800a8d0:	0800aa8c 	.word	0x0800aa8c
 800a8d4:	0800aa8c 	.word	0x0800aa8c
 800a8d8:	0800aa8c 	.word	0x0800aa8c
 800a8dc:	0800aa94 	.word	0x0800aa94

0800a8e0 <free>:
 800a8e0:	4b02      	ldr	r3, [pc, #8]	; (800a8ec <free+0xc>)
 800a8e2:	4601      	mov	r1, r0
 800a8e4:	6818      	ldr	r0, [r3, #0]
 800a8e6:	f000 b80b 	b.w	800a900 <_free_r>
 800a8ea:	bf00      	nop
 800a8ec:	200001bc 	.word	0x200001bc

0800a8f0 <memset>:
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	4402      	add	r2, r0
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d100      	bne.n	800a8fa <memset+0xa>
 800a8f8:	4770      	bx	lr
 800a8fa:	f803 1b01 	strb.w	r1, [r3], #1
 800a8fe:	e7f9      	b.n	800a8f4 <memset+0x4>

0800a900 <_free_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4605      	mov	r5, r0
 800a904:	2900      	cmp	r1, #0
 800a906:	d043      	beq.n	800a990 <_free_r+0x90>
 800a908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a90c:	1f0c      	subs	r4, r1, #4
 800a90e:	2b00      	cmp	r3, #0
 800a910:	bfb8      	it	lt
 800a912:	18e4      	addlt	r4, r4, r3
 800a914:	f000 f840 	bl	800a998 <__malloc_lock>
 800a918:	4a1e      	ldr	r2, [pc, #120]	; (800a994 <_free_r+0x94>)
 800a91a:	6813      	ldr	r3, [r2, #0]
 800a91c:	4610      	mov	r0, r2
 800a91e:	b933      	cbnz	r3, 800a92e <_free_r+0x2e>
 800a920:	6063      	str	r3, [r4, #4]
 800a922:	6014      	str	r4, [r2, #0]
 800a924:	4628      	mov	r0, r5
 800a926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a92a:	f000 b836 	b.w	800a99a <__malloc_unlock>
 800a92e:	42a3      	cmp	r3, r4
 800a930:	d90b      	bls.n	800a94a <_free_r+0x4a>
 800a932:	6821      	ldr	r1, [r4, #0]
 800a934:	1862      	adds	r2, r4, r1
 800a936:	4293      	cmp	r3, r2
 800a938:	bf01      	itttt	eq
 800a93a:	681a      	ldreq	r2, [r3, #0]
 800a93c:	685b      	ldreq	r3, [r3, #4]
 800a93e:	1852      	addeq	r2, r2, r1
 800a940:	6022      	streq	r2, [r4, #0]
 800a942:	6063      	str	r3, [r4, #4]
 800a944:	6004      	str	r4, [r0, #0]
 800a946:	e7ed      	b.n	800a924 <_free_r+0x24>
 800a948:	4613      	mov	r3, r2
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	b10a      	cbz	r2, 800a952 <_free_r+0x52>
 800a94e:	42a2      	cmp	r2, r4
 800a950:	d9fa      	bls.n	800a948 <_free_r+0x48>
 800a952:	6819      	ldr	r1, [r3, #0]
 800a954:	1858      	adds	r0, r3, r1
 800a956:	42a0      	cmp	r0, r4
 800a958:	d10b      	bne.n	800a972 <_free_r+0x72>
 800a95a:	6820      	ldr	r0, [r4, #0]
 800a95c:	4401      	add	r1, r0
 800a95e:	1858      	adds	r0, r3, r1
 800a960:	4282      	cmp	r2, r0
 800a962:	6019      	str	r1, [r3, #0]
 800a964:	d1de      	bne.n	800a924 <_free_r+0x24>
 800a966:	6810      	ldr	r0, [r2, #0]
 800a968:	6852      	ldr	r2, [r2, #4]
 800a96a:	4401      	add	r1, r0
 800a96c:	6019      	str	r1, [r3, #0]
 800a96e:	605a      	str	r2, [r3, #4]
 800a970:	e7d8      	b.n	800a924 <_free_r+0x24>
 800a972:	d902      	bls.n	800a97a <_free_r+0x7a>
 800a974:	230c      	movs	r3, #12
 800a976:	602b      	str	r3, [r5, #0]
 800a978:	e7d4      	b.n	800a924 <_free_r+0x24>
 800a97a:	6820      	ldr	r0, [r4, #0]
 800a97c:	1821      	adds	r1, r4, r0
 800a97e:	428a      	cmp	r2, r1
 800a980:	bf01      	itttt	eq
 800a982:	6811      	ldreq	r1, [r2, #0]
 800a984:	6852      	ldreq	r2, [r2, #4]
 800a986:	1809      	addeq	r1, r1, r0
 800a988:	6021      	streq	r1, [r4, #0]
 800a98a:	6062      	str	r2, [r4, #4]
 800a98c:	605c      	str	r4, [r3, #4]
 800a98e:	e7c9      	b.n	800a924 <_free_r+0x24>
 800a990:	bd38      	pop	{r3, r4, r5, pc}
 800a992:	bf00      	nop
 800a994:	20003f30 	.word	0x20003f30

0800a998 <__malloc_lock>:
 800a998:	4770      	bx	lr

0800a99a <__malloc_unlock>:
 800a99a:	4770      	bx	lr

0800a99c <_init>:
 800a99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99e:	bf00      	nop
 800a9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9a2:	bc08      	pop	{r3}
 800a9a4:	469e      	mov	lr, r3
 800a9a6:	4770      	bx	lr

0800a9a8 <_fini>:
 800a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9aa:	bf00      	nop
 800a9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ae:	bc08      	pop	{r3}
 800a9b0:	469e      	mov	lr, r3
 800a9b2:	4770      	bx	lr
